; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\system_stm32f10x.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\outlib -I..\app\inc -I..\ucos\core -I..\ucos\config -I..\ucos\cpu -I..\ucos\port -I..\ucos\lib -I..\app\app -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_FULL_ASSERT --omf_browse=.\obj\system_stm32f10x.crf ..\app\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=1

                  SetSysClock PROC
;;;420      */
;;;421    static void SetSysClock(void)
000000  b510              PUSH     {r4,lr}
;;;422    {
;;;423    #ifdef SYSCLK_FREQ_HSE
;;;424      SetSysClockToHSE();
;;;425    #elif defined SYSCLK_FREQ_24MHz
;;;426      SetSysClockTo24();
;;;427    #elif defined SYSCLK_FREQ_36MHz
;;;428      SetSysClockTo36();
;;;429    #elif defined SYSCLK_FREQ_48MHz
;;;430      SetSysClockTo48();
;;;431    #elif defined SYSCLK_FREQ_56MHz
;;;432      SetSysClockTo56();  
;;;433    #elif defined SYSCLK_FREQ_72MHz
;;;434      SetSysClockTo72();
000002  f7fffffe          BL       SetSysClockTo72
;;;435    #endif
;;;436     
;;;437     /* If none of the define above is enabled, the HSI is used as System clock
;;;438        source (default after reset) */ 
;;;439    }
000006  bd10              POP      {r4,pc}
;;;440    
                          ENDP


                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;988      */
;;;989    static void SetSysClockTo72(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;990    {
;;;991      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;992      
;;;993      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;994      /* Enable HSE */    
;;;995      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4832              LDR      r0,|L2.212|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4930              LDR      r1,|L2.212|
000012  6008              STR      r0,[r1,#0]
;;;996     
;;;997      /* Wait till HSE is ready and if Time out is reached exit */
;;;998      do
000014  bf00              NOP      
                  |L2.22|
;;;999      {
;;;1000       HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  482f              LDR      r0,|L2.212|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;1001       StartUpCounter++;  
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;1002     } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L2.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b06fa0          CMP      r0,#0x500
000030  d1f1              BNE      |L2.22|
                  |L2.50|
;;;1003   
;;;1004     if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4828              LDR      r0,|L2.212|
000034  6800              LDR      r0,[r0,#0]
000036  f4103f00          TST      r0,#0x20000
00003a  d002              BEQ      |L2.66|
;;;1005     {
;;;1006       HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L2.70|
                  |L2.66|
;;;1007     }
;;;1008     else
;;;1009     {
;;;1010       HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L2.70|
;;;1011     }  
;;;1012   
;;;1013     if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d142              BNE      |L2.210|
;;;1014     {
;;;1015       /* Enable Prefetch Buffer */
;;;1016       FLASH->ACR |= FLASH_ACR_PRFTBE;
00004c  4822              LDR      r0,|L2.216|
00004e  6800              LDR      r0,[r0,#0]
000050  f0400010          ORR      r0,r0,#0x10
000054  4920              LDR      r1,|L2.216|
000056  6008              STR      r0,[r1,#0]
;;;1017   
;;;1018       /* Flash 2 wait state */
;;;1019       FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200003          BIC      r0,r0,#3
000060  6008              STR      r0,[r1,#0]
;;;1020       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000062  4608              MOV      r0,r1
000064  6800              LDR      r0,[r0,#0]
000066  f0400002          ORR      r0,r0,#2
00006a  6008              STR      r0,[r1,#0]
;;;1021   
;;;1022    
;;;1023       /* HCLK = SYSCLK */
;;;1024       RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00006c  4819              LDR      r0,|L2.212|
00006e  6840              LDR      r0,[r0,#4]
000070  4918              LDR      r1,|L2.212|
000072  6048              STR      r0,[r1,#4]
;;;1025         
;;;1026       /* PCLK2 = HCLK */
;;;1027       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000074  4608              MOV      r0,r1
000076  6840              LDR      r0,[r0,#4]
000078  6048              STR      r0,[r1,#4]
;;;1028       
;;;1029       /* PCLK1 = HCLK */
;;;1030       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00007a  4608              MOV      r0,r1
00007c  6840              LDR      r0,[r0,#4]
00007e  f4406080          ORR      r0,r0,#0x400
000082  6048              STR      r0,[r1,#4]
;;;1031   
;;;1032   #ifdef STM32F10X_CL
;;;1033       /* Configure PLLs ------------------------------------------------------*/
;;;1034       /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;1035       /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;1036           
;;;1037       RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;1038                                 RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;1039       RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;1040                                RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;1041     
;;;1042       /* Enable PLL2 */
;;;1043       RCC->CR |= RCC_CR_PLL2ON;
;;;1044       /* Wait till PLL2 is ready */
;;;1045       while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;1046       {
;;;1047       }
;;;1048       
;;;1049      
;;;1050       /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;1051       RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;1052       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;1053                               RCC_CFGR_PLLMULL9); 
;;;1054   #else    
;;;1055       /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;1056       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000084  4608              MOV      r0,r1
000086  6840              LDR      r0,[r0,#4]
000088  f420107c          BIC      r0,r0,#0x3f0000
00008c  6048              STR      r0,[r1,#4]
;;;1057                                           RCC_CFGR_PLLMULL));
;;;1058       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00008e  4608              MOV      r0,r1
000090  6840              LDR      r0,[r0,#4]
000092  f44010e8          ORR      r0,r0,#0x1d0000
000096  6048              STR      r0,[r1,#4]
;;;1059   #endif /* STM32F10X_CL */
;;;1060   
;;;1061       /* Enable PLL */
;;;1062       RCC->CR |= RCC_CR_PLLON;
000098  4608              MOV      r0,r1
00009a  6800              LDR      r0,[r0,#0]
00009c  f0407080          ORR      r0,r0,#0x1000000
0000a0  6008              STR      r0,[r1,#0]
;;;1063   
;;;1064       /* Wait till PLL is ready */
;;;1065       while((RCC->CR & RCC_CR_PLLRDY) == 0)
0000a2  bf00              NOP      
                  |L2.164|
0000a4  480b              LDR      r0,|L2.212|
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f0107f00          TST      r0,#0x2000000
0000ac  d0fa              BEQ      |L2.164|
;;;1066       {
;;;1067       }
;;;1068       
;;;1069       /* Select PLL as system clock source */
;;;1070       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000ae  4809              LDR      r0,|L2.212|
0000b0  6840              LDR      r0,[r0,#4]
0000b2  f0200003          BIC      r0,r0,#3
0000b6  4907              LDR      r1,|L2.212|
0000b8  6048              STR      r0,[r1,#4]
;;;1071       RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000ba  4608              MOV      r0,r1
0000bc  6840              LDR      r0,[r0,#4]
0000be  f0400002          ORR      r0,r0,#2
0000c2  6048              STR      r0,[r1,#4]
;;;1072   
;;;1073       /* Wait till PLL is used as system clock source */
;;;1074       while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000c4  bf00              NOP      
                  |L2.198|
0000c6  4803              LDR      r0,|L2.212|
0000c8  6840              LDR      r0,[r0,#4]
0000ca  f000000c          AND      r0,r0,#0xc
0000ce  2808              CMP      r0,#8
0000d0  d1f9              BNE      |L2.198|
                  |L2.210|
;;;1075       {
;;;1076       }
;;;1077     }
;;;1078     else
;;;1079     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1080            configuration. User can add here some code to deal with this error */
;;;1081     }
;;;1082   }
0000d2  bd0c              POP      {r2,r3,pc}
;;;1083   #endif
                          ENDP

                  |L2.212|
                          DCD      0x40021000
                  |L2.216|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;307      */
;;;308    void SystemCoreClockUpdate (void)
000000  b510              PUSH     {r4,lr}
;;;309    {
;;;310      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
000002  2100              MOVS     r1,#0
000004  2000              MOVS     r0,#0
000006  2200              MOVS     r2,#0
;;;311    
;;;312    #ifdef  STM32F10X_CL
;;;313      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;314    #endif /* STM32F10X_CL */
;;;315    
;;;316    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;317      uint32_t prediv1factor = 0;
;;;318    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;319        
;;;320      /* Get SYSCLK source -------------------------------------------------------*/
;;;321      tmp = RCC->CFGR & RCC_CFGR_SWS;
000008  4b23              LDR      r3,|L3.152|
00000a  685b              LDR      r3,[r3,#4]
00000c  f003010c          AND      r1,r3,#0xc
;;;322      
;;;323      switch (tmp)
000010  b121              CBZ      r1,|L3.28|
000012  2904              CMP      r1,#4
000014  d006              BEQ      |L3.36|
000016  2908              CMP      r1,#8
000018  d12c              BNE      |L3.116|
00001a  e008              B        |L3.46|
                  |L3.28|
;;;324      {
;;;325        case 0x00:  /* HSI used as system clock */
;;;326          SystemCoreClock = HSI_VALUE;
00001c  4b1f              LDR      r3,|L3.156|
00001e  4c20              LDR      r4,|L3.160|
000020  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;327          break;
000022  e02b              B        |L3.124|
                  |L3.36|
;;;328        case 0x04:  /* HSE used as system clock */
;;;329          SystemCoreClock = HSE_VALUE;
000024  4b1f              LDR      r3,|L3.164|
000026  681b              LDR      r3,[r3,#0]  ; Default_Hse_Value
000028  4c1d              LDR      r4,|L3.160|
00002a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;330          break;
00002c  e026              B        |L3.124|
                  |L3.46|
;;;331        case 0x08:  /* PLL used as system clock */
;;;332    
;;;333          /* Get PLL clock source and multiplication factor ----------------------*/
;;;334          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
00002e  4b1a              LDR      r3,|L3.152|
000030  685b              LDR      r3,[r3,#4]
000032  f4031070          AND      r0,r3,#0x3c0000
;;;335          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000036  4b18              LDR      r3,|L3.152|
000038  685b              LDR      r3,[r3,#4]
00003a  f4033280          AND      r2,r3,#0x10000
;;;336          
;;;337    #ifndef STM32F10X_CL      
;;;338          pllmull = ( pllmull >> 18) + 2;
00003e  2302              MOVS     r3,#2
000040  eb034090          ADD      r0,r3,r0,LSR #18
;;;339          
;;;340          if (pllsource == 0x00)
000044  b922              CBNZ     r2,|L3.80|
;;;341          {
;;;342            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;343            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
000046  4b18              LDR      r3,|L3.168|
000048  4343              MULS     r3,r0,r3
00004a  4c15              LDR      r4,|L3.160|
00004c  6023              STR      r3,[r4,#0]  ; SystemCoreClock
00004e  e010              B        |L3.114|
                  |L3.80|
;;;344          }
;;;345          else
;;;346          {
;;;347     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;348           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;349           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;350           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;351     #else
;;;352            /* HSE selected as PLL clock entry */
;;;353            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
000050  4b11              LDR      r3,|L3.152|
000052  685b              LDR      r3,[r3,#4]
000054  f4133f00          TST      r3,#0x20000
000058  d006              BEQ      |L3.104|
;;;354            {/* HSE oscillator clock divided by 2 */
;;;355              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
00005a  4b12              LDR      r3,|L3.164|
00005c  681b              LDR      r3,[r3,#0]  ; Default_Hse_Value
00005e  085b              LSRS     r3,r3,#1
000060  4343              MULS     r3,r0,r3
000062  4c0f              LDR      r4,|L3.160|
000064  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000066  e004              B        |L3.114|
                  |L3.104|
;;;356            }
;;;357            else
;;;358            {
;;;359              SystemCoreClock = HSE_VALUE * pllmull;
000068  4b0e              LDR      r3,|L3.164|
00006a  681b              LDR      r3,[r3,#0]  ; Default_Hse_Value
00006c  4343              MULS     r3,r0,r3
00006e  4c0c              LDR      r4,|L3.160|
000070  6023              STR      r3,[r4,#0]  ; SystemCoreClock
                  |L3.114|
;;;360            }
;;;361     #endif
;;;362          }
;;;363    #else
;;;364          pllmull = pllmull >> 18;
;;;365          
;;;366          if (pllmull != 0x0D)
;;;367          {
;;;368             pllmull += 2;
;;;369          }
;;;370          else
;;;371          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;372            pllmull = 13 / 2; 
;;;373          }
;;;374                
;;;375          if (pllsource == 0x00)
;;;376          {
;;;377            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;378            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;379          }
;;;380          else
;;;381          {/* PREDIV1 selected as PLL clock entry */
;;;382            
;;;383            /* Get PREDIV1 clock source and division factor */
;;;384            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;385            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;386            
;;;387            if (prediv1source == 0)
;;;388            { 
;;;389              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;390              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;391            }
;;;392            else
;;;393            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;394              
;;;395              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;396              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;397              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;398              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;399            }
;;;400          }
;;;401    #endif /* STM32F10X_CL */ 
;;;402          break;
000072  e003              B        |L3.124|
                  |L3.116|
;;;403    
;;;404        default:
;;;405          SystemCoreClock = HSI_VALUE;
000074  4b09              LDR      r3,|L3.156|
000076  4c0a              LDR      r4,|L3.160|
000078  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;406          break;
00007a  bf00              NOP      
                  |L3.124|
00007c  bf00              NOP                            ;327
;;;407      }
;;;408      
;;;409      /* Compute HCLK clock frequency ----------------*/
;;;410      /* Get HCLK prescaler */
;;;411      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00007e  4b06              LDR      r3,|L3.152|
000080  685b              LDR      r3,[r3,#4]
000082  f3c31303          UBFX     r3,r3,#4,#4
000086  4c09              LDR      r4,|L3.172|
000088  5ce1              LDRB     r1,[r4,r3]
;;;412      /* HCLK clock frequency */
;;;413      SystemCoreClock >>= tmp;  
00008a  4b05              LDR      r3,|L3.160|
00008c  681b              LDR      r3,[r3,#0]  ; SystemCoreClock
00008e  40cb              LSRS     r3,r3,r1
000090  4c03              LDR      r4,|L3.160|
000092  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;414    }
000094  bd10              POP      {r4,pc}
;;;415    
                          ENDP

000096  0000              DCW      0x0000
                  |L3.152|
                          DCD      0x40021000
                  |L3.156|
                          DCD      0x007a1200
                  |L3.160|
                          DCD      SystemCoreClock
                  |L3.164|
                          DCD      Default_Hse_Value
                  |L3.168|
                          DCD      0x003d0900
                  |L3.172|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;213      */
;;;214    void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;217      /* Set HSION bit */
;;;218      RCC->CR |= (uint32_t)0x00000001;
000002  4814              LDR      r0,|L4.84|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4912              LDR      r1,|L4.84|
00000c  6008              STR      r0,[r1,#0]
;;;219    
;;;220      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;221    #ifndef STM32F10X_CL
;;;222      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4911              LDR      r1,|L4.88|
000014  4008              ANDS     r0,r0,r1
000016  490f              LDR      r1,|L4.84|
000018  6048              STR      r0,[r1,#4]
;;;223    #else
;;;224      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;225    #endif /* STM32F10X_CL */   
;;;226      
;;;227      /* Reset HSEON, CSSON and PLLON bits */
;;;228      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  490f              LDR      r1,|L4.92|
000020  4008              ANDS     r0,r0,r1
000022  490c              LDR      r1,|L4.84|
000024  6008              STR      r0,[r1,#0]
;;;229    
;;;230      /* Reset HSEBYP bit */
;;;231      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f4202080          BIC      r0,r0,#0x40000
00002e  6008              STR      r0,[r1,#0]
;;;232    
;;;233      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;234      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  f42000fe          BIC      r0,r0,#0x7f0000
000038  6048              STR      r0,[r1,#4]
;;;235    
;;;236    #ifdef STM32F10X_CL
;;;237      /* Reset PLL2ON and PLL3ON bits */
;;;238      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;239    
;;;240      /* Disable all interrupts and clear pending bits  */
;;;241      RCC->CIR = 0x00FF0000;
;;;242    
;;;243      /* Reset CFGR2 register */
;;;244      RCC->CFGR2 = 0x00000000;
;;;245    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;246      /* Disable all interrupts and clear pending bits  */
;;;247      RCC->CIR = 0x009F0000;
;;;248    
;;;249      /* Reset CFGR2 register */
;;;250      RCC->CFGR2 = 0x00000000;      
;;;251    #else
;;;252      /* Disable all interrupts and clear pending bits  */
;;;253      RCC->CIR = 0x009F0000;
00003a  f44f001f          MOV      r0,#0x9f0000
00003e  6088              STR      r0,[r1,#8]
;;;254    #endif /* STM32F10X_CL */
;;;255        
;;;256    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;257      #ifdef DATA_IN_ExtSRAM
;;;258        SystemInit_ExtMemCtl(); 
;;;259      #endif /* DATA_IN_ExtSRAM */
;;;260    #endif 
;;;261    
;;;262      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;263      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;264      SetSysClock();
000040  f7fffffe          BL       SetSysClock
;;;265    
;;;266    #ifdef VECT_TAB_SRAM
;;;267      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;268    #else
;;;269      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
000044  4806              LDR      r0,|L4.96|
000046  6800              LDR      r0,[r0,#0]  ; VEC_OFFSET
000048  f0406000          ORR      r0,r0,#0x8000000
00004c  4905              LDR      r1,|L4.100|
00004e  6008              STR      r0,[r1,#0]
;;;270    #endif 
;;;271    }
000050  bd10              POP      {r4,pc}
;;;272    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      0x40021000
                  |L4.88|
                          DCD      0xf8ff0000
                  |L4.92|
                          DCD      0xfef6ffff
                  |L4.96|
                          DCD      VEC_OFFSET
                  |L4.100|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\app\\system_stm32f10x.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f10x_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f10x_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
