; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\t_mutex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\t_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\outlib -I..\app\inc -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -DSTM32F10X_HD --omf_browse=.\obj\t_mutex.crf ..\app\t_mutex.c]
                          THUMB

                          AREA ||i._para_lock||, CODE, READONLY, ALIGN=2

                  _para_lock PROC
;;;18     U32 this_mutex[4] = {0};
;;;19     void _para_lock(int mutex)
000000  b510              PUSH     {r4,lr}
;;;20     {
000002  4604              MOV      r4,r0
;;;21     	locktimes++;
000004  4804              LDR      r0,|L1.24|
000006  6800              LDR      r0,[r0,#0]  ; locktimes
000008  1c40              ADDS     r0,r0,#1
00000a  4903              LDR      r1,|L1.24|
00000c  6008              STR      r0,[r1,#0]  ; locktimes
;;;22     //	if(*mutex==0)
;;;23     //		*mutex = gt_mutex_init();
;;;24     	gt_mutex_lock(mutex);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       gt_mutex_lock
;;;25     }
000014  bd10              POP      {r4,pc}
;;;26     
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      locktimes

                          AREA ||i._para_unlock||, CODE, READONLY, ALIGN=2

                  _para_unlock PROC
;;;26     
;;;27     void _para_unlock(int mutex)
000000  b510              PUSH     {r4,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29     	unlocktimes++;
000004  4804              LDR      r0,|L2.24|
000006  6800              LDR      r0,[r0,#0]  ; unlocktimes
000008  1c40              ADDS     r0,r0,#1
00000a  4903              LDR      r1,|L2.24|
00000c  6008              STR      r0,[r1,#0]  ; unlocktimes
;;;30     	gt_mutex_unlock(mutex);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       gt_mutex_unlock
;;;31     }
000014  bd10              POP      {r4,pc}
;;;32     #define lock()		_para_lock((int)this_mutex)//;gt_msleep(10)
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      unlocktimes

                          AREA ||i.gt_task_A||, CODE, READONLY, ALIGN=2

                  gt_task_A PROC
;;;54     
;;;55     void gt_task_A(void*arg)
000000  e012              B        |L3.40|
                  |L3.2|
;;;56     {
;;;57     	while(1)
;;;58     	{
;;;59     
;;;60     		int i = 0;
000002  2400              MOVS     r4,#0
;;;61     		while(i++ <cca){
000004  e005              B        |L3.18|
                  |L3.6|
;;;62     				lock();
000006  4809              LDR      r0,|L3.44|
000008  f7fffffe          BL       _para_lock
;;;63     				unlock();
00000c  4807              LDR      r0,|L3.44|
00000e  f7fffffe          BL       _para_unlock
                  |L3.18|
000012  4620              MOV      r0,r4                 ;61
000014  1c64              ADDS     r4,r4,#1              ;61
000016  4906              LDR      r1,|L3.48|
000018  6809              LDR      r1,[r1,#0]            ;61  ; cca
00001a  4288              CMP      r0,r1                 ;61
00001c  dbf3              BLT      |L3.6|
;;;64     		}
;;;65     		gt_msleep(tca);
00001e  4805              LDR      r0,|L3.52|
000020  6800              LDR      r0,[r0,#0]  ; tca
000022  f7fffffe          BL       gt_msleep
;;;66     	}
000026  bf00              NOP      
                  |L3.40|
000028  e7eb              B        |L3.2|
;;;67     }
;;;68     
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      this_mutex
                  |L3.48|
                          DCD      ||cca||
                  |L3.52|
                          DCD      tca

                          AREA ||i.gt_task_B||, CODE, READONLY, ALIGN=2

                  gt_task_B PROC
;;;68     
;;;69     void gt_task_B(void*arg)
000000  e012              B        |L4.40|
                  |L4.2|
;;;70     {
;;;71     	while(1)
;;;72     	{
;;;73     
;;;74     		int i = 0;
000002  2400              MOVS     r4,#0
;;;75     		while(i++ <ccb){
000004  e005              B        |L4.18|
                  |L4.6|
;;;76     				lock();
000006  4809              LDR      r0,|L4.44|
000008  f7fffffe          BL       _para_lock
;;;77     				unlock();
00000c  4807              LDR      r0,|L4.44|
00000e  f7fffffe          BL       _para_unlock
                  |L4.18|
000012  4620              MOV      r0,r4                 ;75
000014  1c64              ADDS     r4,r4,#1              ;75
000016  4906              LDR      r1,|L4.48|
000018  6809              LDR      r1,[r1,#0]            ;75  ; ccb
00001a  4288              CMP      r0,r1                 ;75
00001c  dbf3              BLT      |L4.6|
;;;78     		}
;;;79     		gt_msleep(tcb);	
00001e  4805              LDR      r0,|L4.52|
000020  6800              LDR      r0,[r0,#0]  ; tcb
000022  f7fffffe          BL       gt_msleep
;;;80     	}
000026  bf00              NOP      
                  |L4.40|
000028  e7eb              B        |L4.2|
;;;81     }
;;;82     
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      this_mutex
                  |L4.48|
                          DCD      ||ccb||
                  |L4.52|
                          DCD      tcb

                          AREA ||i.gt_task_C||, CODE, READONLY, ALIGN=2

                  gt_task_C PROC
;;;82     
;;;83     void gt_task_C(void*arg)
000000  e012              B        |L5.40|
                  |L5.2|
;;;84     {
;;;85     	while(1)
;;;86     	{
;;;87     
;;;88     		int i = 0;
000002  2400              MOVS     r4,#0
;;;89     		while(i++ <ccc){
000004  e005              B        |L5.18|
                  |L5.6|
;;;90     				lock();
000006  4809              LDR      r0,|L5.44|
000008  f7fffffe          BL       _para_lock
;;;91     				unlock();
00000c  4807              LDR      r0,|L5.44|
00000e  f7fffffe          BL       _para_unlock
                  |L5.18|
000012  4620              MOV      r0,r4                 ;89
000014  1c64              ADDS     r4,r4,#1              ;89
000016  4906              LDR      r1,|L5.48|
000018  6809              LDR      r1,[r1,#0]            ;89  ; ccc
00001a  4288              CMP      r0,r1                 ;89
00001c  dbf3              BLT      |L5.6|
;;;92     		}
;;;93     		gt_msleep(tcc);	
00001e  4805              LDR      r0,|L5.52|
000020  6800              LDR      r0,[r0,#0]  ; tcc
000022  f7fffffe          BL       gt_msleep
;;;94     	}
000026  bf00              NOP      
                  |L5.40|
000028  e7eb              B        |L5.2|
;;;95     }
;;;96     
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      this_mutex
                  |L5.48|
                          DCD      ||ccc||
                  |L5.52|
                          DCD      tcc

                          AREA ||i.gt_task_D||, CODE, READONLY, ALIGN=2

                  gt_task_D PROC
;;;96     
;;;97     void gt_task_D(void*arg)
000000  e012              B        |L6.40|
                  |L6.2|
;;;98     {
;;;99     	while(1)
;;;100    	{
;;;101    
;;;102    		int i = 0;
000002  2400              MOVS     r4,#0
;;;103    		while(i++ <ccd){
000004  e005              B        |L6.18|
                  |L6.6|
;;;104    				lock();
000006  4809              LDR      r0,|L6.44|
000008  f7fffffe          BL       _para_lock
;;;105    				unlock();
00000c  4807              LDR      r0,|L6.44|
00000e  f7fffffe          BL       _para_unlock
                  |L6.18|
000012  4620              MOV      r0,r4                 ;103
000014  1c64              ADDS     r4,r4,#1              ;103
000016  4906              LDR      r1,|L6.48|
000018  6809              LDR      r1,[r1,#0]            ;103  ; ccd
00001a  4288              CMP      r0,r1                 ;103
00001c  dbf3              BLT      |L6.6|
;;;106    		}
;;;107    		gt_msleep(tcd);	
00001e  4805              LDR      r0,|L6.52|
000020  6800              LDR      r0,[r0,#0]  ; tcd
000022  f7fffffe          BL       gt_msleep
;;;108    	}
000026  bf00              NOP      
                  |L6.40|
000028  e7eb              B        |L6.2|
;;;109    }
;;;110    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      this_mutex
                  |L6.48|
                          DCD      ||ccd||
                  |L6.52|
                          DCD      tcd

                          AREA ||i.gt_task_E||, CODE, READONLY, ALIGN=2

                  gt_task_E PROC
;;;111    
;;;112    void gt_task_E(void*arg)
000000  e012              B        |L7.40|
                  |L7.2|
;;;113    {
;;;114    	while(1)
;;;115    	{
;;;116    
;;;117    		int i = 0;
000002  2400              MOVS     r4,#0
;;;118    		while(i++ <cce){
000004  e005              B        |L7.18|
                  |L7.6|
;;;119    				lock();
000006  4809              LDR      r0,|L7.44|
000008  f7fffffe          BL       _para_lock
;;;120    				unlock();
00000c  4807              LDR      r0,|L7.44|
00000e  f7fffffe          BL       _para_unlock
                  |L7.18|
000012  4620              MOV      r0,r4                 ;118
000014  1c64              ADDS     r4,r4,#1              ;118
000016  4906              LDR      r1,|L7.48|
000018  6809              LDR      r1,[r1,#0]            ;118  ; cce
00001a  4288              CMP      r0,r1                 ;118
00001c  dbf3              BLT      |L7.6|
;;;121    		}
;;;122    		gt_msleep(tce);	
00001e  4805              LDR      r0,|L7.52|
000020  6800              LDR      r0,[r0,#0]  ; tce
000022  f7fffffe          BL       gt_msleep
;;;123    	}
000026  bf00              NOP      
                  |L7.40|
000028  e7eb              B        |L7.2|
;;;124    }
;;;125    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      this_mutex
                  |L7.48|
                          DCD      ||cce||
                  |L7.52|
                          DCD      tce

                          AREA ||i.gt_task_F||, CODE, READONLY, ALIGN=2

                  gt_task_F PROC
;;;125    
;;;126    void gt_task_F(void*arg)
000000  e012              B        |L8.40|
                  |L8.2|
;;;127    {
;;;128    	while(1)
;;;129    	{
;;;130    
;;;131    		int i = 0;
000002  2400              MOVS     r4,#0
;;;132    		while(i++ <ccf){
000004  e005              B        |L8.18|
                  |L8.6|
;;;133    				lock();
000006  4809              LDR      r0,|L8.44|
000008  f7fffffe          BL       _para_lock
;;;134    				unlock();
00000c  4807              LDR      r0,|L8.44|
00000e  f7fffffe          BL       _para_unlock
                  |L8.18|
000012  4620              MOV      r0,r4                 ;132
000014  1c64              ADDS     r4,r4,#1              ;132
000016  4906              LDR      r1,|L8.48|
000018  6809              LDR      r1,[r1,#0]            ;132  ; ccf
00001a  4288              CMP      r0,r1                 ;132
00001c  dbf3              BLT      |L8.6|
;;;135    		}
;;;136    		gt_msleep(tcf);	
00001e  4805              LDR      r0,|L8.52|
000020  6800              LDR      r0,[r0,#0]  ; tcf
000022  f7fffffe          BL       gt_msleep
;;;137    	}
000026  bf00              NOP      
                  |L8.40|
000028  e7eb              B        |L8.2|
;;;138    }
;;;139    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      this_mutex
                  |L8.48|
                          DCD      ||ccf||
                  |L8.52|
                          DCD      tcf

                          AREA ||i.gt_task_G||, CODE, READONLY, ALIGN=2

                  gt_task_G PROC
;;;140    
;;;141    void gt_task_G(void*arg)
000000  e012              B        |L9.40|
                  |L9.2|
;;;142    {
;;;143    	while(1)
;;;144    	{
;;;145    
;;;146    		int i = 0;
000002  2400              MOVS     r4,#0
;;;147    		while(i++ <ccg){
000004  e005              B        |L9.18|
                  |L9.6|
;;;148    				lock();
000006  4809              LDR      r0,|L9.44|
000008  f7fffffe          BL       _para_lock
;;;149    				unlock();
00000c  4807              LDR      r0,|L9.44|
00000e  f7fffffe          BL       _para_unlock
                  |L9.18|
000012  4620              MOV      r0,r4                 ;147
000014  1c64              ADDS     r4,r4,#1              ;147
000016  4906              LDR      r1,|L9.48|
000018  6809              LDR      r1,[r1,#0]            ;147  ; ccg
00001a  4288              CMP      r0,r1                 ;147
00001c  dbf3              BLT      |L9.6|
;;;150    		}
;;;151    		gt_msleep(tcg);	
00001e  4805              LDR      r0,|L9.52|
000020  6800              LDR      r0,[r0,#0]  ; tcg
000022  f7fffffe          BL       gt_msleep
;;;152    	}
000026  bf00              NOP      
                  |L9.40|
000028  e7eb              B        |L9.2|
;;;153    }
;;;154    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      this_mutex
                  |L9.48|
                          DCD      ||ccg||
                  |L9.52|
                          DCD      tcg

                          AREA ||i.gt_task_H||, CODE, READONLY, ALIGN=2

                  gt_task_H PROC
;;;155    
;;;156    void gt_task_H(void*arg)
000000  e012              B        |L10.40|
                  |L10.2|
;;;157    {
;;;158    	while(1)
;;;159    	{
;;;160    
;;;161    		int i = 0;
000002  2400              MOVS     r4,#0
;;;162    		while(i++ <cch){
000004  e005              B        |L10.18|
                  |L10.6|
;;;163    				lock();
000006  4809              LDR      r0,|L10.44|
000008  f7fffffe          BL       _para_lock
;;;164    				unlock();
00000c  4807              LDR      r0,|L10.44|
00000e  f7fffffe          BL       _para_unlock
                  |L10.18|
000012  4620              MOV      r0,r4                 ;162
000014  1c64              ADDS     r4,r4,#1              ;162
000016  4906              LDR      r1,|L10.48|
000018  6809              LDR      r1,[r1,#0]            ;162  ; cch
00001a  4288              CMP      r0,r1                 ;162
00001c  dbf3              BLT      |L10.6|
;;;165    		}
;;;166    		gt_msleep(tch);	
00001e  4805              LDR      r0,|L10.52|
000020  6800              LDR      r0,[r0,#0]  ; tch
000022  f7fffffe          BL       gt_msleep
;;;167    	}
000026  bf00              NOP      
                  |L10.40|
000028  e7eb              B        |L10.2|
;;;168    }
;;;169    
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      this_mutex
                  |L10.48|
                          DCD      ||cch||
                  |L10.52|
                          DCD      tch

                          AREA ||i.gt_task_I||, CODE, READONLY, ALIGN=2

                  gt_task_I PROC
;;;170    
;;;171    void gt_task_I(void*arg)
000000  e012              B        |L11.40|
                  |L11.2|
;;;172    {
;;;173    	while(1)
;;;174    	{
;;;175    
;;;176    		int i = 0;
000002  2400              MOVS     r4,#0
;;;177    		while(i++ <cci){
000004  e005              B        |L11.18|
                  |L11.6|
;;;178    				lock();
000006  4809              LDR      r0,|L11.44|
000008  f7fffffe          BL       _para_lock
;;;179    				unlock();
00000c  4807              LDR      r0,|L11.44|
00000e  f7fffffe          BL       _para_unlock
                  |L11.18|
000012  4620              MOV      r0,r4                 ;177
000014  1c64              ADDS     r4,r4,#1              ;177
000016  4906              LDR      r1,|L11.48|
000018  6809              LDR      r1,[r1,#0]            ;177  ; cci
00001a  4288              CMP      r0,r1                 ;177
00001c  dbf3              BLT      |L11.6|
;;;180    		}
;;;181    		gt_msleep(tci);	
00001e  4805              LDR      r0,|L11.52|
000020  6800              LDR      r0,[r0,#0]  ; tci
000022  f7fffffe          BL       gt_msleep
;;;182    	}
000026  bf00              NOP      
                  |L11.40|
000028  e7eb              B        |L11.2|
;;;183    }
;;;184    
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      this_mutex
                  |L11.48|
                          DCD      ||cci||
                  |L11.52|
                          DCD      tci

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  this_mutex
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  locktimes
                          DCD      0x00000000
                  unlocktimes
                          DCD      0x00000000
                  ||cca||
                          DCD      0x00000064
                  ||ccb||
                          DCD      0x0000012c
                  ||ccc||
                          DCD      0x00000064
                  ||ccd||
                          DCD      0x000001f4
                  ||cce||
                          DCD      0x00000064
                  ||ccf||
                          DCD      0x00000258
                  ||ccg||
                          DCD      0x00000064
                  ||cch||
                          DCD      0x00000032
                  ||cci||
                          DCD      0x0000000a
                  tca
                          DCD      0x00000064
                  tcb
                          DCD      0x0000005a
                  tcc
                          DCD      0x00000050
                  tcd
                          DCD      0x00000064
                  tce
                          DCD      0x000000c8
                  tcf
                          DCD      0x0000012c
                  tcg
                          DCD      0x00000064
                  tch
                          DCD      0x00000190
                  tci
                          DCD      0x00000190
