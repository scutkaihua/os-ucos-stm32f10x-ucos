; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ucos-main.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\ucos-main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\outlib -I..\app\inc -I..\ucos\core -I..\ucos\config -I..\ucos\cpu -I..\ucos\port -I..\ucos\lib -I..\app\app -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_FULL_ASSERT --omf_browse=.\obj\ucos-main.crf ..\app\ucos-main.c]
                          THUMB

                          AREA ||i.SysTick_Config||, CODE, READONLY, ALIGN=2

                  SysTick_Config PROC
;;;1542    */
;;;1543   __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
000000  b530              PUSH     {r4,r5,lr}
;;;1544   {
000002  4601              MOV      r1,r0
;;;1545     if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
000004  1e48              SUBS     r0,r1,#1
000006  f1b07f80          CMP      r0,#0x1000000
00000a  d301              BCC      |L1.16|
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;1546   
;;;1547     SysTick->LOAD  = ticks - 1;                                  /* set reload register */
;;;1548     NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
;;;1549     SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
;;;1550     SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
;;;1551                      SysTick_CTRL_TICKINT_Msk   |
;;;1552                      SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
;;;1553     return (0);                                                  /* Function successful */
;;;1554   }
00000e  bd30              POP      {r4,r5,pc}
                  |L1.16|
000010  1e48              SUBS     r0,r1,#1              ;1547
000012  f04f22e0          MOV      r2,#0xe000e000        ;1547
000016  6150              STR      r0,[r2,#0x14]         ;1547
000018  1750              ASRS     r0,r2,#29             ;1548
00001a  220f              MOVS     r2,#0xf               ;1548
00001c  2800              CMP      r0,#0                 ;1548
00001e  da07              BGE      |L1.48|
000020  0713              LSLS     r3,r2,#28             ;1548
000022  0e1d              LSRS     r5,r3,#24             ;1548
000024  4b09              LDR      r3,|L1.76|
000026  f000040f          AND      r4,r0,#0xf            ;1548
00002a  1f24              SUBS     r4,r4,#4              ;1548
00002c  551d              STRB     r5,[r3,r4]            ;1548
00002e  e003              B        |L1.56|
                  |L1.48|
000030  0713              LSLS     r3,r2,#28             ;1548
000032  0e1c              LSRS     r4,r3,#24             ;1548
000034  4b06              LDR      r3,|L1.80|
000036  541c              STRB     r4,[r3,r0]            ;1548
                  |L1.56|
000038  bf00              NOP                            ;1548
00003a  2000              MOVS     r0,#0                 ;1549
00003c  f04f22e0          MOV      r2,#0xe000e000        ;1549
000040  6190              STR      r0,[r2,#0x18]         ;1549
000042  2007              MOVS     r0,#7                 ;1550
000044  6110              STR      r0,[r2,#0x10]         ;1550
000046  2000              MOVS     r0,#0                 ;1553
000048  e7e1              B        |L1.14|
;;;1555   
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0xe000ed18
                  |L1.80|
                          DCD      0xe000e400

                          AREA ||i.SysTick_init||, CODE, READONLY, ALIGN=2

                  SysTick_init PROC
;;;8      /*配置SysTick定时器*/
;;;9      void SysTick_init(void)
000000  b510              PUSH     {r4,lr}
;;;10     {
;;;11       /* 初始化并使能SysTick定时器 */
;;;12       SysTick_Config(SystemCoreClock/OSCfg_TickRate_Hz);
000002  480b              LDR      r0,|L2.48|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  490b              LDR      r1,|L2.52|
000008  6809              LDR      r1,[r1,#0]  ; OSCfg_TickRate_Hz
00000a  fbb0f4f1          UDIV     r4,r0,r1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SysTick_Config
;;;13       
;;;14       /*  配置1ms 中断一次，即os的频率为1000hz */
;;;15     	if (SysTick_Config(SystemCoreClock/OSCfg_TickRate_Hz))	
000014  4806              LDR      r0,|L2.48|
000016  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000018  4906              LDR      r1,|L2.52|
00001a  6809              LDR      r1,[r1,#0]  ; OSCfg_TickRate_Hz
00001c  fbb0f4f1          UDIV     r4,r0,r1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SysTick_Config
000026  b108              CBZ      r0,|L2.44|
;;;16     	{ 
;;;17     		/* Capture error */ 
;;;18     		while (1);
000028  bf00              NOP      
                  |L2.42|
00002a  e7fe              B        |L2.42|
                  |L2.44|
;;;19     	}
;;;20     }
00002c  bd10              POP      {r4,pc}
;;;21     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      SystemCoreClock
                  |L2.52|
                          DCD      OSCfg_TickRate_Hz

                          AREA ||i.assert_param||, CODE, READONLY, ALIGN=1

                  assert_param PROC
;;;1      
;;;2      void assert_param(void*arg){}
000000  4770              BX       lr
;;;3      	
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;61       */
;;;62     int main(void)
000000  b500              PUSH     {lr}
;;;63     {
000002  b08b              SUB      sp,sp,#0x2c
;;;64       OS_ERR err;	
;;;65     
;;;66       /* 初始化"uC/OS-III"内核 */  
;;;67     	OSInit(&err);		                                        
000004  a80a              ADD      r0,sp,#0x28
000006  f7fffffe          BL       OSInit
;;;68       
;;;69     	/*创建任务*/
;;;70     	OSTaskCreate((OS_TCB     *)&StartUp_TCB,                // 任务控制块指针          
00000a  a80a              ADD      r0,sp,#0x28
00000c  2103              MOVS     r1,#3
00000e  2200              MOVS     r2,#0
000010  9205              STR      r2,[sp,#0x14]
000012  e9cd2106          STRD     r2,r1,[sp,#0x18]
000016  9008              STR      r0,[sp,#0x20]
000018  4610              MOV      r0,r2
00001a  21c8              MOVS     r1,#0xc8
00001c  2214              MOVS     r2,#0x14
00001e  4b09              LDR      r3,|L4.68|
000020  e9cd3201          STRD     r3,r2,[sp,#4]
000024  e9cd1003          STRD     r1,r0,[sp,#0xc]
000028  2003              MOVS     r0,#3
00002a  2300              MOVS     r3,#0
00002c  4a06              LDR      r2,|L4.72|
00002e  a107              ADR      r1,|L4.76|
000030  9000              STR      r0,[sp,#0]
000032  4808              LDR      r0,|L4.84|
000034  f7fffffe          BL       OSTaskCreate
;;;71                    (CPU_CHAR   *)"StartUp",		                // 任务名称
;;;72                    (OS_TASK_PTR )Task_Start, 	                // 任务代码指针
;;;73                    (void       *)0,			                      // 传递给任务的参数parg
;;;74                    (OS_PRIO     )STARTUP_TASK_PRIO,			      // 任务优先级
;;;75                    (CPU_STK    *)&StartUp_Stk[0],	            // 任务堆栈基地址
;;;76                    (CPU_STK_SIZE)STARTUP_TASK_STK_SIZE/10,	  // 堆栈剩余警戒线
;;;77                    (CPU_STK_SIZE)STARTUP_TASK_STK_SIZE,			  // 堆栈大小
;;;78                    (OS_MSG_QTY  )0,			                      // 可接收的最大消息队列数
;;;79                    (OS_TICK     )0,			                      // 时间片轮转时间
;;;80                    (void       *)0,			                      // 任务控制块扩展信息
;;;81                    (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
;;;82                                   OS_OPT_TASK_STK_CLR),	      // 任务选项
;;;83                    (OS_ERR     *)&err);		                    // 返回值
;;;84     	
;;;85       /* 启动多任务系统，控制权交给uC/OS-II */
;;;86       OSStart(&err);                                       
000038  a80a              ADD      r0,sp,#0x28
00003a  f7fffffe          BL       OSStart
;;;87     }
00003e  2000              MOVS     r0,#0
000040  b00b              ADD      sp,sp,#0x2c
000042  bd00              POP      {pc}
;;;88     
                          ENDP

                  |L4.68|
                          DCD      StartUp_Stk
                  |L4.72|
                          DCD      Task_Start
                  |L4.76|
00004c  53746172          DCB      "StartUp",0
000050  74557000
                  |L4.84|
                          DCD      StartUp_TCB

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  StartUp_TCB
                          %        132
                  StartUp_Stk
                          %        800

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  VEC_OFFSET
                          DCD      0x00000000
                  Default_Hse_Value
                          DCD      0x044aa200

;*** Start embedded assembler ***

#line 1 "..\\app\\ucos-main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_ucos_main_c_cd3a7be9____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_ucos_main_c_cd3a7be9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_ucos_main_c_cd3a7be9____REVSH|
#line 144
|__asm___11_ucos_main_c_cd3a7be9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
