; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\app.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\app.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\app -I..\outlib -I..\app\inc -I..\ucos\core -I..\ucos\config -I..\ucos\cpu -I..\ucos\port -I..\ucos\lib -I..\app\app -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_FULL_ASSERT --omf_browse=.\obj\app.crf ..\app\app\app.c]
                          THUMB

                          AREA ||i.Task_CUSTOMER||, CODE, READONLY, ALIGN=2

                  Task_CUSTOMER PROC
;;;164     */
;;;165    void Task_CUSTOMER(void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;166    {
;;;167      OS_ERR err;
;;;168      OS_SEM_CTR  Ctr;
;;;169    	 CPU_TS      ts;
;;;170      while (1)
000002  e00c              B        |L1.30|
                  |L1.4|
;;;171      {
;;;172    
;;;173        //获取信号量
;;;174        Ctr= OSSemPend((OS_SEM   *)&SemOfPRODUCT,
000004  a802              ADD      r0,sp,#8
000006  ab01              ADD      r3,sp,#4
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  9000              STR      r0,[sp,#0]
00000e  4804              LDR      r0,|L1.32|
000010  f7fffffe          BL       OSSemPend
;;;175                       (OS_TICK   )0,                         //如果这个参数设置为0就一直等待下去
;;;176                       (OS_OPT    )OS_OPT_PEND_BLOCKING,  //如果没有信号量也不阻塞
;;;177                       (CPU_TS   *)&ts,                       //这个参数是指向存放信号量被提交、强制解除等待状态、或者信号量被删除的时间戳        
;;;178                       (OS_ERR   *)&err);   //LED1( ON );
;;;179    		
;;;180    	  OSTimeDly ((OS_TICK   )10,
000014  aa02              ADD      r2,sp,#8
000016  2100              MOVS     r1,#0
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       OSTimeDly
                  |L1.30|
00001e  e7f1              B        |L1.4|
;;;181                   (OS_OPT    )OS_OPT_TIME_DLY,
;;;182                   (OS_ERR   *)&err);
;;;183      }
;;;184    }
;;;185    
                          ENDP

                  |L1.32|
                          DCD      SemOfPRODUCT

                          AREA ||i.Task_PRODUCT||, CODE, READONLY, ALIGN=2

                  Task_PRODUCT PROC
;;;127     */
;;;128    void Task_PRODUCT(void *p_arg)
000000  b092              SUB      sp,sp,#0x48
;;;129    {
;;;130      OS_ERR err;  
;;;131      OS_TMR TmrOfPRODUCT;
;;;132    
;;;133      (void)p_arg;
;;;134      //创建一个定时器，用来定时扫描按键状态,10m扫描一次按键
;;;135      OSTmrCreate ((OS_TMR              *)&TmrOfPRODUCT,
000002  a811              ADD      r0,sp,#0x44
000004  2100              MOVS     r1,#0
000006  4a0c              LDR      r2,|L2.56|
000008  2302              MOVS     r3,#2
00000a  e9cd3200          STRD     r3,r2,[sp,#0]
00000e  e9cd1002          STRD     r1,r0,[sp,#8]
000012  2364              MOVS     r3,#0x64
000014  460a              MOV      r2,r1
000016  a109              ADR      r1,|L2.60|
000018  a804              ADD      r0,sp,#0x10
00001a  f7fffffe          BL       OSTmrCreate
;;;136                   (CPU_CHAR            *)"TmrOfPRODUCT",
;;;137                   (OS_TICK              )0,
;;;138                   (OS_TICK              )100,  //注意定时器定时的单位在例程中是10ms，所以这里用1就可以
;;;139                   (OS_OPT               )OS_OPT_TMR_PERIODIC,
;;;140                   (OS_TMR_CALLBACK_PTR  )cbTimerOfPRODUCT,
;;;141                   (void                *)0,
;;;142                   (OS_ERR              *)&err);
;;;143                   
;;;144      //开启定时器
;;;145      OSTmrStart (&TmrOfPRODUCT,&err);
00001e  a911              ADD      r1,sp,#0x44
000020  a804              ADD      r0,sp,#0x10
000022  f7fffffe          BL       OSTmrStart
;;;146      
;;;147      while (1)
000026  e005              B        |L2.52|
                  |L2.40|
;;;148      {
;;;149    
;;;150        OSTimeDly ((OS_TICK   )1000,
000028  aa11              ADD      r2,sp,#0x44
00002a  2100              MOVS     r1,#0
00002c  f44f707a          MOV      r0,#0x3e8
000030  f7fffffe          BL       OSTimeDly
                  |L2.52|
000034  e7f8              B        |L2.40|
;;;151                   (OS_OPT    )OS_OPT_TIME_DLY,
;;;152                   (OS_ERR   *)&err);
;;;153      }
;;;154    }
;;;155    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      cbTimerOfPRODUCT
                  |L2.60|
00003c  546d724f          DCB      "TmrOfPRODUCT",0
000040  6650524f
000044  44554354
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.Task_Sem||, CODE, READONLY, ALIGN=2

                  Task_Sem PROC
;;;91      */
;;;92     void Task_Sem(void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;93     {
;;;94       OS_ERR err;
;;;95       OS_SEM_CTR  Ctr;
;;;96     	 CPU_TS      ts;
;;;97       (void)p_arg;  
;;;98     
;;;99       //在使用信号量之前一定要先创建信号量。
;;;100      //创建一个信号量，按键按下的时候post一个信号量给其他任务。
;;;101      OSSemCreate ((OS_SEM      *)&SemOfPRODUCT,     //指向信号量变量的指针
000002  ab02              ADD      r3,sp,#8
000004  2200              MOVS     r2,#0
000006  a108              ADR      r1,|L3.40|
000008  480b              LDR      r0,|L3.56|
00000a  f7fffffe          BL       OSSemCreate
;;;102                   (CPU_CHAR    *)"SemOfPRODUCT",    //信号量的名字
;;;103                   (OS_SEM_CTR   )0,             //信号量计数值Ctr代表的是停车场的车位数，3个
;;;104                   (OS_ERR      *)&err);         //错误类型
;;;105      
;;;106      
;;;107      while (1)
00000e  e009              B        |L3.36|
                  |L3.16|
;;;108      {
;;;109        OSTimeDlyHMSM(0, 0,0,500,OS_OPT_TIME_HMSM_STRICT,&err);	//延时阻塞500ms
000010  a802              ADD      r0,sp,#8
000012  2100              MOVS     r1,#0
000014  f44f73fa          MOV      r3,#0x1f4
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
                  |L3.36|
000024  e7f4              B        |L3.16|
;;;110      }
;;;111    }
;;;112    //按键定时扫描的定时器
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
000028  53656d4f          DCB      "SemOfPRODUCT",0
00002c  6650524f
000030  44554354
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
                  |L3.56|
                          DCD      SemOfPRODUCT

                          AREA ||i.Task_Start||, CODE, READONLY, ALIGN=2

                  Task_Start PROC
;;;21      */
;;;22     void Task_Start(void *p_arg)
000000  b510              PUSH     {r4,lr}
;;;23     {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;24     	OS_ERR err;
;;;25       (void)p_arg;	
;;;26     
;;;27       CPU_Init();
000006  f7fffffe          BL       CPU_Init
;;;28     
;;;29       SysTick_init();
00000a  f7fffffe          BL       SysTick_init
;;;30     
;;;31       //创建信号量任务
;;;32     	OSTaskCreate((OS_TCB     *)&SEM_TCB,					            // 任务控制块指针          
00000e  a809              ADD      r0,sp,#0x24
000010  2103              MOVS     r1,#3
000012  2200              MOVS     r2,#0
000014  9205              STR      r2,[sp,#0x14]
000016  e9cd2106          STRD     r2,r1,[sp,#0x18]
00001a  9008              STR      r0,[sp,#0x20]
00001c  4610              MOV      r0,r2
00001e  f44f71fa          MOV      r1,#0x1f4
000022  2232              MOVS     r2,#0x32
000024  4b20              LDR      r3,|L4.168|
000026  e9cd3201          STRD     r3,r2,[sp,#4]
00002a  e9cd1003          STRD     r1,r0,[sp,#0xc]
00002e  2004              MOVS     r0,#4
000030  2300              MOVS     r3,#0
000032  4a1e              LDR      r2,|L4.172|
000034  a11e              ADR      r1,|L4.176|
000036  9000              STR      r0,[sp,#0]
000038  481e              LDR      r0,|L4.180|
00003a  f7fffffe          BL       OSTaskCreate
;;;33                    (CPU_CHAR   *)"Sem",						              // 任务名称
;;;34                    (OS_TASK_PTR )Task_Sem,					            // 任务代码指针
;;;35                    (void       *)0,							                // 传递给任务的参数parg
;;;36                    (OS_PRIO     )TASK_SEM_PRIO,				        // 任务优先级
;;;37                    (CPU_STK    *)&Sem_Stk[0],				          // 任务堆栈基地址
;;;38                    (CPU_STK_SIZE)TASK_SEM_STK_SIZE/10,		      // 堆栈剩余警戒线
;;;39                    (CPU_STK_SIZE)TASK_SEM_STK_SIZE,			      // 堆栈大小
;;;40                    (OS_MSG_QTY  )0,							                // 可接收的最大消息队列数
;;;41                    (OS_TICK     )0,							                // 时间片轮转时间
;;;42                    (void       *)0,							                // 任务控制块扩展信息
;;;43                    (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
;;;44                                   OS_OPT_TASK_STK_CLR),	        // 任务选项
;;;45                    (OS_ERR     *)&err);						              // 返回值
;;;46     			
;;;47     
;;;48     	//创建生产者
;;;49     	OSTaskCreate((OS_TCB     *)&Product_TCB,					  
00003e  a809              ADD      r0,sp,#0x24
000040  2103              MOVS     r1,#3
000042  2200              MOVS     r2,#0
000044  9205              STR      r2,[sp,#0x14]
000046  e9cd2106          STRD     r2,r1,[sp,#0x18]
00004a  9008              STR      r0,[sp,#0x20]
00004c  4610              MOV      r0,r2
00004e  21c8              MOVS     r1,#0xc8
000050  2214              MOVS     r2,#0x14
000052  4b19              LDR      r3,|L4.184|
000054  e9cd3201          STRD     r3,r2,[sp,#4]
000058  e9cd1003          STRD     r1,r0,[sp,#0xc]
00005c  203b              MOVS     r0,#0x3b
00005e  2300              MOVS     r3,#0
000060  4a16              LDR      r2,|L4.188|
000062  a117              ADR      r1,|L4.192|
000064  9000              STR      r0,[sp,#0]
000066  4818              LDR      r0,|L4.200|
000068  f7fffffe          BL       OSTaskCreate
;;;50                    (CPU_CHAR   *)"PRODUCT",						
;;;51                    (OS_TASK_PTR )Task_PRODUCT,				
;;;52                    (void       *)0,							
;;;53                    (OS_PRIO     )TASK_PRODUCT_PRIO,				
;;;54                    (CPU_STK    *)&PRO_Stk[0],				
;;;55                    (CPU_STK_SIZE)TASK_PRODUCT_STK_SIZE/10,		
;;;56                    (CPU_STK_SIZE)TASK_PRODUCT_STK_SIZE,			
;;;57                    (OS_MSG_QTY  )0,						
;;;58                    (OS_TICK     )0,							
;;;59                    (void       *)0,							
;;;60                    (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
;;;61                                   OS_OPT_TASK_STK_CLR),	 
;;;62                    (OS_ERR     *)&err);	
;;;63     							 
;;;64     	//创建消息者
;;;65     	OSTaskCreate((OS_TCB     *)&Customer_TCB,					  
00006c  a809              ADD      r0,sp,#0x24
00006e  2103              MOVS     r1,#3
000070  2200              MOVS     r2,#0
000072  9205              STR      r2,[sp,#0x14]
000074  e9cd2106          STRD     r2,r1,[sp,#0x18]
000078  9008              STR      r0,[sp,#0x20]
00007a  4610              MOV      r0,r2
00007c  21c8              MOVS     r1,#0xc8
00007e  2214              MOVS     r2,#0x14
000080  4b12              LDR      r3,|L4.204|
000082  e9cd3201          STRD     r3,r2,[sp,#4]
000086  e9cd1003          STRD     r1,r0,[sp,#0xc]
00008a  203a              MOVS     r0,#0x3a
00008c  2300              MOVS     r3,#0
00008e  4a10              LDR      r2,|L4.208|
000090  a110              ADR      r1,|L4.212|
000092  9000              STR      r0,[sp,#0]
000094  4812              LDR      r0,|L4.224|
000096  f7fffffe          BL       OSTaskCreate
;;;66                    (CPU_CHAR   *)"Customer",						
;;;67                    (OS_TASK_PTR )Task_CUSTOMER,				
;;;68                    (void       *)0,							
;;;69                    (OS_PRIO     )TASK_CUSTOMER_PRIO,				
;;;70                    (CPU_STK    *)&Cus_Stk[0],				
;;;71                    (CPU_STK_SIZE)TASK_CUSTOMER_STK_SIZE/10,		
;;;72                    (CPU_STK_SIZE)TASK_CUSTOMER_STK_SIZE,			
;;;73                    (OS_MSG_QTY  )0,						
;;;74                    (OS_TICK     )0,							
;;;75                    (void       *)0,							
;;;76                    (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
;;;77                                   OS_OPT_TASK_STK_CLR),	 
;;;78                    (OS_ERR     *)&err);	
;;;79                    
;;;80       //任务删除自己	
;;;81     	OSTaskDel(&StartUp_TCB,&err);							 
00009a  a909              ADD      r1,sp,#0x24
00009c  4811              LDR      r0,|L4.228|
00009e  f7fffffe          BL       OSTaskDel
;;;82     }
0000a2  b00a              ADD      sp,sp,#0x28
0000a4  bd10              POP      {r4,pc}
;;;83     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
                          DCD      Sem_Stk
                  |L4.172|
                          DCD      Task_Sem
                  |L4.176|
0000b0  53656d00          DCB      "Sem",0
                  |L4.180|
                          DCD      SEM_TCB
                  |L4.184|
                          DCD      PRO_Stk
                  |L4.188|
                          DCD      Task_PRODUCT
                  |L4.192|
0000c0  50524f44          DCB      "PRODUCT",0
0000c4  55435400
                  |L4.200|
                          DCD      Product_TCB
                  |L4.204|
                          DCD      Cus_Stk
                  |L4.208|
                          DCD      Task_CUSTOMER
                  |L4.212|
0000d4  43757374          DCB      "Customer",0
0000d8  6f6d6572
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L4.224|
                          DCD      Customer_TCB
                  |L4.228|
                          DCD      StartUp_TCB

                          AREA ||i.cbTimerOfPRODUCT||, CODE, READONLY, ALIGN=2

                  cbTimerOfPRODUCT PROC
;;;112    //按键定时扫描的定时器
;;;113    void cbTimerOfPRODUCT (OS_TMR *p_tmr, void *p_arg)
000000  b538              PUSH     {r3-r5,lr}
;;;114    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;115      OS_ERR      err;
;;;116      OSSemPost ((OS_SEM  *)&SemOfPRODUCT,
000006  466a              MOV      r2,sp
000008  f44f7100          MOV      r1,#0x200
00000c  4801              LDR      r0,|L5.20|
00000e  f7fffffe          BL       OSSemPost
;;;117                        (OS_OPT   )OS_OPT_POST_ALL,
;;;118                        (OS_ERR  *)&err);
;;;119    
;;;120    }
000012  bd38              POP      {r3-r5,pc}
;;;121    /* 
                          ENDP

                  |L5.20|
                          DCD      SemOfPRODUCT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SEM_TCB
                          %        132
                  Sem_Stk
                          %        2000
                  Product_TCB
                          %        132
                  PRO_Stk
                          %        800
                  Customer_TCB
                          %        132
                  Cus_Stk
                          %        800
                  SemOfPRODUCT
                          %        40
