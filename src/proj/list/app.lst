L 1 "..\app\app\app.c"
N#include "app.h"
L 1 "..\app\app\app.h" 1
N#ifndef	_APP_H_
N#define	_APP_H_
N
N#include "os.h"  		
L 1 "..\ucos\core\os.h" 1
N/*
N************************************************************************************************************************
N*                                                      uC/OS-III
N*                                                 The Real-Time Kernel
N*
N*                                  (c) Copyright 2009-2011; Micrium, Inc.; Weston, FL
N*                           All rights reserved.  Protected by international copyright laws.
N*
N* File    : OS.H
N* By      : JJL
N* Version : V3.02.00
N*
N* LICENSING TERMS:
N* ---------------
N*           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
N*           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
N*           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
N*           application/product.   We provide ALL the source code for your convenience and to help you 
N*           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
N*           it commercially without paying a licensing fee.
N*
N*           Knowledge of the source code may NOT be used to develop a similar product.
N*
N*           Please help us continue to provide the embedded community with the finest software available.
N*           Your honesty is greatly appreciated.
N*
N*           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
N************************************************************************************************************************
N* Note(s) : (1) Assumes the following versions (or more recent) of software modules are included in the project build:
N*
N*               (a) uC/LIB V1.26
N*               (b) uC/CPU V1.25
N************************************************************************************************************************
N*/
N
N#ifndef   OS_H
N#define   OS_H
N
N/*
N************************************************************************************************************************
N*                                               uC/OS-III VERSION NUMBER
N************************************************************************************************************************
N*/
N
N#define  OS_VERSION  30200u                       /* Version of uC/OS-III (Vx.yy.zz mult. by 10000)                   */
N
N/*
N************************************************************************************************************************
N*                                                 INCLUDE HEADER FILES
N************************************************************************************************************************
N*/
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N
N#include <os_cfg.h>
L 1 "..\ucos\config\os_cfg.h" 1
N/*
N************************************************************************************************************************
N*                                                      uC/OS-III
N*                                                 The Real-Time Kernel
N*
N*                                  (c) Copyright 2009-2011; Micrium, Inc.; Weston, FL
N*                           All rights reserved.  Protected by international copyright laws.
N*
N*                                                  CONFIGURATION FILE
N*
N* File    : OS_CFG.H
N* By      : JJL
N* Version : V3.02.00
N*
N* LICENSING TERMS:
N* ---------------
N*           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
N*           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
N*           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
N*           application/product.   We provide ALL the source code for your convenience and to help you 
N*           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
N*           it commercially without paying a licensing fee.
N*
N*           Knowledge of the source code may NOT be used to develop a similar product.
N*
N*           Please help us continue to provide the embedded community with the finest software available.
N*           Your honesty is greatly appreciated.
N*
N*           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_H
N#define OS_CFG_H
N
N
N
N//-------- <<< Use Configuration Wizard in Context Menu >>> -----------------                                             
N                                             /* ---------------------------- MISCELLANEOUS -------------------------- */
N//<e>使用钩子
N//<i>当#define设置为1时，说明μC/OS-III的钩子函数(介入函数)可以调用用户定义的钩子函数。从而实现μC/OS-III自身的功能能够扩充，通过用户程序代码实现。
N#define OS_CFG_APP_HOOKS_EN             1u   /* Enable (1) or Disable (0) application specific hooks                  */
N//</e>
N//<e>检测入参
N//<i>该宏决定用户是否希望对μC/OS-III的大部分函数执行参数检查，如确保传递传递给函数的指针非NULL、参数值在允许的范围内、选项是有效的等。
N//<i>当设置为0时，将禁止参数检查功能，相应的节省内核的代码空间和处理时间。
N//<i>统计发现，μC/OS-III为超过40个函数提供参数检查功能。因此，禁用此选项将节约几百字节的代码空间。
N//<i>应用中，可以考虑调试阶段开启此选项，项目的后期发布阶段禁止该选项。
N#define OS_CFG_ARG_CHK_EN               1u   /* Enable (1) or Disable (0) argument checking                           */
N//</e>
N//<e>检测中断调用
N//<i>决定内核是否进行检查以确保大多数的函数没有被ISR调用。换句话说，大多数μC/OS-III函数应该只被任务级代码调用，除了“POST”类的发送函数(它们可以被ISR调用)。
N//<i>μC/OS-III为大约50个函数提供此项检查。因此，禁用此选项，将节约几百字节的代码空间。
N//<i>应用中，可以考虑调试阶段开启此选项，项目的后期发布阶段禁止该选项。
N#define OS_CFG_CALLED_FROM_ISR_CHK_EN   1u   /* Enable (1) or Disable (0) check for called from ISR                   */
N//</e>
N//<e>调试
N//<i>当这个宏设置为1时，os_dbg.c中的ROM常量将被添加以帮助支持内核调试器。具体来说，调试器将可以通过查询一系列所谓的ROM变量，来获知编译时的选项。例如，调试器可以找出OS_TCB的尺寸大小、μC/OS-III的版本号、一个事件标志组的尺寸(OS_FLAG_GRP)等。
N#define OS_CFG_DBG_EN                   1u   /* Enable (1) debug code/variables                                       */
N//</e>
N//<e>中断post防护
N//<i>当置为1时，将减小中断延迟，因为在μC/OS-III的大多数临界段代码中将不再禁用中断。相反，在这些临界段代码执行期间，调度器将被锁定。该宏设置为1的好处是中断延迟小，但是，ISR到任务的响应时间会变得略长。如果启用了以下服务，建议设置改为1，因为若设置它为0，则中断延迟有可能会变得无法接受的长：
N//<i> Event Flags 事件标志组
N//<i> Multiple Pend 多内核对象
N#define OS_CFG_ISR_POST_DEFERRED_EN     1u   /* Enable (1) or Disable (0) Deferred ISR posts                          */
N//</e>
N//<e>检测内核对象类型
N//<i>决定是否让大多数的μC/OS-III函数检查其操作的内核对象类型是否正确。换言之，如果希望发送一个信号量，那么用户传递的是否确实是一个信号量，或者错误的使用了其他类型的内核对象呢？μC/OS-III的内核对象检查大约有30处，禁用该选项，将节约几百字节的代码空间以及部分的处理时间。
N//<i>建议调试阶段开启该选项；发布代码时关闭该检查项。
N#define OS_CFG_OBJ_TYPE_CHK_EN          1u   /* Enable (1) or Disable (0) object type checking                        */
N//</e>
N//<e>时间戳
N//<i>OS_CFG_SCHED_LOCK_TIME_MEAS_EN使能时，要开启
N#define OS_CFG_TS_EN                    1u   /* Enable (1) or Disable (0) time stamping                               */
N//</e>
N//<e>多事件等待
N//<i>决定代码是否支持等待多个事件(如信号量或消息队列)，启用(1)或禁用(0)。
N#define OS_CFG_PEND_MULTI_EN            1u   /* Enable (1) or Disable (0) code generation for multi-pend feature      */
N//</e>
N//<o>最大优先级数量
N//<i>指定应用程序可用优先级的最大数量。将该宏指定为刚好够用户计划使用的优先级数量，将减少μC/OS-III所需的RAM量。
N//<i>在μC/OS-III.中，如果OS_PRIO数据类型为CPU_INT08U，则任务优先级可以从0(最高优先级)到最大255(最低优先级)。然而在μC/OS-III中，对于优先级的数量实际上没有限制。
N//<i>具体来说，如果定义OS_PRIO数据类型为CPU_INT16U，则任务优先级将多达65536个。应该总是设置OS_CFG_PRIO_MAX为8的倍数(如8,16,32,64,128,256等)，设置的优先级数量越多，μC/OS-III.的RAM开销越大。
N//<i>另，μC/OS-III.为自身保留了优先级（OS_CFG_PRIO_MAX-2）和（OS_CFG_PRIO_MAX-1）；前者用于空闲任务OS_IdleTask()。此外，不要将优先级0用于任何应用程序没因为它是μC/OS-III.保留作为ISR处理任务的。因此，应用程序的优先级可以在2到（OS_CFG_PRIO_MAX-3）之间(含)取值。
N#define OS_CFG_PRIO_MAX                64u   /* Defines the maximum number of task priorities (see OS_PRIO data type) */
N
N//<e>测量调度器被锁定时间
N//<i>决定是否生成 测量调度器被锁定时间（measure the amount of time the scheduler is locked） 的代码。这主要用于确定任务延迟。
N#define OS_CFG_SCHED_LOCK_TIME_MEAS_EN  1u   /* Include code to measure scheduler lock time                           */
N//</e>
N//<e>时间片调度
N//<i>决定是否生成时间片轮转调度代码。
N#define OS_CFG_SCHED_ROUND_ROBIN_EN     1u   /* Include code for Round-Robin scheduling                               */
N//</e>
N//<o>任务最小堆栈
N//<i>定义各个任务的最小堆栈大小(以CPU_STK为单元)。这为μC/OS-III在每个任务创建时提供了足够的堆栈空间。假设一个处理器包含16个32位的寄存器。同样，假设CPU_STK被声明为CPU_INT32U类型，那么最低限度，设置OS_CFG_STK_SIZE_MIN为16.然而，这将是很不明智的，因为可能无法容纳存储局部变量、函数调用的返回、可能的ISR嵌套。
N//<i>请参阅处理器的“移植”来看看如何设置这个最小值。注意，这是一个保障，来确保有足够的任务堆栈空间。
N#define OS_CFG_STK_SIZE_MIN            64u   /* Minimum allowable task stack size                                     */
N
N
N//<e>事件标志组
N//<i>设置为1时，允许生成事件标志服务的代码和数据结构，即开启了事件标志服务功能。
N//如果设置为0，那么无需再开启/禁止该文件中任何名称为OS_CFG_FLAG_xxx的#define常量。
N//应用不需要相关服务时，可以禁止该功能，以此来减少代码和数据的空间需求。                                             /* ----------------------------- EVENT FLAGS --------------------------- */
N#define OS_CFG_FLAG_EN                  1u   /* Enable (1) or Disable (0) code generation for EVENT FLAGS             */
N
N#if OS_CFG_FLAG_EN > 0u
X#if 1u > 0u
N//<e>OSFlagDel()
N//<i>决定是否生成OSFlagDel()函数代码。
N#define OS_CFG_FLAG_DEL_EN              1u   /*     Include code for OSFlagDel()                                      */
N//</e>
N//<e>等待事件标志变为0
N//<i>是否生成代码用于等待事件标志变为0.通常是等待事件标志被置为1。但是用户也可能需要等待事件标志的清零，在这种情况下，需要开启此选项。
N#define OS_CFG_FLAG_MODE_CLR_EN         1u   /*     Include code for Wait on Clear EVENT FLAGS                        */
N//</e>
N//<e>OSFlagPendAbort()
N//<i>OSFlagPendAbort().函数是否生成。
N#define OS_CFG_FLAG_PEND_ABORT_EN       1u   /*     Include code for OSFlagPendAbort()                                */
N//</e>
N#else
S#define OS_CFG_FLAG_DEL_EN              0u   /*     Include code for OSFlagDel()                                      */
S#define OS_CFG_FLAG_MODE_CLR_EN         0u   /*     Include code for Wait on Clear EVENT FLAGS                        */
S#define OS_CFG_FLAG_PEND_ABORT_EN       0u   /*     Include code for OSFlagPendAbort()                                */
N#endif
N                                             /* -------------------------- MEMORY MANAGEMENT ------------------------ */
N//</e>
N//<e>内存分区
N//<i>os_mem.c代码,决定是否生成分区存储管理代码和相关的数据结构。这让用户在不使用存储分区时，减少代码和数据的空间需求。
N#define OS_CFG_MEM_EN                   1u   /* Enable (1) or Disable (0) code generation for MEMORY MANAGER          */
N//</e>
N                                             /* --------------------- MUTUAL EXCLUSION SEMAPHORES ------------------- */
N
N
N//<e>互斥量
N//<i>决定是否开启互斥信号量服务的代码和数据结构。
N//<i>同其他的内核服务开关一样，OS_CFG_MUTEX_EN被设置为0，那么无需再开启/禁止本系统中任何名为OS_CFG_MUTEX_XXX 的#define常量。
N#define OS_CFG_MUTEX_EN                 1u   /* Enable (1) or Disable (0) code generation for MUTEX                   */
N
N#if OS_CFG_MUTEX_EN > 0u
X#if 1u > 0u
N//<e>OSMutexDel()
N//<i>是否生成OSMutexDel().代码。
N#define OS_CFG_MUTEX_DEL_EN             1u   /*     Include code for OSMutexDel()                                     */
N//</e>
N//<e>OSMutexPendAbort()
N//<i>是否生成OSMutexPendAbort().代码
N#define OS_CFG_MUTEX_PEND_ABORT_EN      1u   /*     Include code for OSMutexPendAbort()                               */
N//</e>
N#else
S#define OS_CFG_MUTEX_DEL_EN             0u   /*     Include code for OSMutexDel()                                     */
S#define OS_CFG_MUTEX_PEND_ABORT_EN      0u   /*     Include code for OSMutexPendAbort()                               */
N#endif
N//</e>
N                                             /* --------------------------- MESSAGE QUEUES -------------------------- */
N
N//<e>消息队列
N//<i>决定是否生成消息队列服务的代码和数据结构。
N//<i>同其他的内核服务开关一样，OS_CFG_Q_EN被设置为0，那么无需再开启/禁止本系统中任何名为OS_CFG_Q_XXX 的#define常量。
N#define OS_CFG_Q_EN                     1u   /* Enable (1) or Disable (0) code generation for QUEUES                  */
N
N#if OS_CFG_Q_EN > 0u
X#if 1u > 0u
N//<e>OSQDel()
N#define OS_CFG_Q_DEL_EN                 1u   /*     Include code for OSQDel()                                         */
N//</e>
N//<e>OSQFlush()
N#define OS_CFG_Q_FLUSH_EN               1u   /*     Include code for OSQFlush()                                       */
N//</e>
N//<e>OSQPendAbort()
N#define OS_CFG_Q_PEND_ABORT_EN          1u   /*     Include code for OSQPendAbort()                                   */
N//</e>
N#else
S#define OS_CFG_Q_DEL_EN                 0u   /*     Include code for OSQDel()                                         */
S#define OS_CFG_Q_FLUSH_EN               0u   /*     Include code for OSQFlush()                                       */
S#define OS_CFG_Q_PEND_ABORT_EN          0u   /*     Include code for OSQPendAbort()                                   */
N#endif
N//</e>
N                                             /* ----------------------------- SEMAPHORES ---------------------------- */
N
N//<e>信号量
N#define OS_CFG_SEM_EN                   1u   /* Enable (1) or Disable (0) code generation for SEMAPHORES              */
N
N#if OS_CFG_SEM_EN > 0u
X#if 1u > 0u
N//<e>OSSemDel()
N#define OS_CFG_SEM_DEL_EN               1u   /*    Include code for OSSemDel()                                        */
N//</e>
N//<e>OSSemPendAbort()
N#define OS_CFG_SEM_PEND_ABORT_EN        1u   /*    Include code for OSSemPendAbort()                                  */
N//</e>
N//<e>OSSemSet()
N#define OS_CFG_SEM_SET_EN               1u   /*    Include code for OSSemSet()                                        */
N//</e>
N#else
S#define OS_CFG_SEM_DEL_EN               1u   /*    Include code for OSSemDel()                                        */
S#define OS_CFG_SEM_PEND_ABORT_EN        1u   /*    Include code for OSSemPendAbort()                                  */
S#define OS_CFG_SEM_SET_EN               1u   /*    Include code for OSSemSet()                                        */
N#endif
N//</e>
N                                             /* -------------------------- TASK MANAGEMENT -------------------------- */
N//<h>任务管理
N//<e>统计任务
N//<i>决定是否启用μC/OS-III.的统计任务OS_StatTask()，以及他的初始化函数void OS_StatTaskInit ()。
N//<i>OS_StatTask()计算应用程序的CPU使用率、每个任务的堆栈开销、每个任务在运行时的CPU使用率等。
N//<i>当启用时，OS_StatTask()按照OS_CFG_TICK_RATE_HZ(see os_cfg_app.h)的频率执行。计算OSStatTaskCPUUsage的值时应该注意，它是一个应用程序CPU使用率的百分比值。OS_StatTask()在每次执行时调用OSStatTaskHook()钩子函数，进而用户可以通过它添加自定义的统计功能。统计任务的详细信息，参见os_stat.c。OS_StatTask()的优先级是应用程序中可配置的(see os_cfg_app.h)
N//<i>如果OS_CFG_STAT_TASK_STK_CHK_EN被设为1，则OS_StatTask()还将计算每个任务的堆栈使用情况。此时OS_StatTask()每次执行时，将为每个任务调用OSTaskStkChk()，并将结果放置在该任务的TCB中。任务TCB的.StkFree 和.StkUsed域分别代表剩余空间(字节单位)已用空间(字节单位)。
N//<i>如果OS_CFG_STAT_TASK_STK_CHK_EN被设为0，则统计任务用到的所有变量都将没有声明(见os.h)，当然也将减少内核的RAM开销。
N#define OS_CFG_STAT_TASK_EN             0u   /* Enable (1) or Disable(0) the statistics task                          */
N//</e>
N//<e>统计任务-堆栈监测
N//<i>决定统计任务是否为每个任务调用OSTaskStkChk()堆栈监测。为了做到这一点，需要将OS_CFG_STAT_TASK_EN设置为1(即统计任务需要开启)。当然，可以在某个任务中调用OSTaskStkChk()函数以获得这个任务的此类信息。
N#define OS_CFG_STAT_TASK_STK_CHK_EN     0u   /* Check task stacks from statistic task                                 */
N//</e>
N//<e>任务函数-更改优先级
N//<i>决定是否生成OSTaskChangePrio()函数
N#define OS_CFG_TASK_CHANGE_PRIO_EN      0u   /* Include code for OSTaskChangePrio()                                   */
N//</e>
N//<e>任务函数-删除任务
N#define OS_CFG_TASK_DEL_EN              1u   /* Include code for OSTaskDel()                                          */
N//</e>
N//<e>任务函数-直接收发消息
N//<i>决定是否生成直接向/从任务和ISR发送和接收消息的OSTaskQXXX()函数代码。
N//<i>直接向一个任务发送消息回避通过消息队列发送消息更有效率一些，因为不再有与消息关联的等待表。
N#define OS_CFG_TASK_Q_EN                0u   /* Include code for OSTaskQXXXX()                                        */
N//</e>
N//<e>任务函数-直接收发消息-Abort()
N#define OS_CFG_TASK_Q_PEND_ABORT_EN     0u   /* Include code for OSTaskQPendAbort()                                   */
N//</e>
N//<e>任务性能数据
N//<i>决定是否允许在每个任务的OS_TCB中分配变量来保存各个任务的性能数据。如果开启，则每个任务将有一些变量来跟踪任务切换的次数、任务的执行时间、任务相对其他任务的CPU使用率等。
N//<i>这项功能提供的信息对于调试非常有用，但需要额外的RAM，软件发布的时候关掉就好啦。
N#define OS_CFG_TASK_PROFILE_EN          0u   /* Include variables in OS_TCB for profiling                             */
N//</e>
N//<e>任务上下文变量
N//<i>该宏允许各个任务拥有任务上下文变量(This constant allows each task to have task context variables)。可以使用任务变量存储诸如“errno”、任务标识和其他的 任务相关的数值等元素。任务拥有的变量数目是由这个常量设置的。每个任务都有一个唯一的标识，从0到（OS_CFG_TASK_REG_TBL_SIZE-1）。此外。每个任务变量被声明为OS_REG数据类型(见os_type.h)。如果OS_REG被定义为CPU_INT32U，那么此表中所有的变量都为这种类型。
N#define OS_CFG_TASK_REG_TBL_SIZE        0u   /* Number of task specific registers                                     */
N//</e>
N//<e>任务函数-任务信号量Abort()
N//<i>Include code for OSTaskSemPendAbort()
N#define OS_CFG_TASK_SEM_PEND_ABORT_EN   0u   /* Include code for OSTaskSemPendAbort()                                 */
N//</e>
N//<e>任务函数-OSTaskSuspend/OSTaskResume
N//<i>
N#define OS_CFG_TASK_SUSPEND_EN          0u   /* Include code for OSTaskSuspend() and OSTaskResume()                   */
N//</e>
N//</e>
N//</h>
N                                             /* -------------------------- TIME MANAGEMENT -------------------------- */
N//<e>时间管理-OSTimeDlyHMSM
N#define OS_CFG_TIME_DLY_HMSM_EN         1u   /*     Include code for OSTimeDlyHMSM()                                  */
N//</e>
N//<e>时间管理-OSTimeDlyResume
N#define OS_CFG_TIME_DLY_RESUME_EN       1u   /*     Include code for OSTimeDlyResume()                                */
N//</e>
N
N                                             /* ------------------------- TIMER MANAGEMENT -------------------------- */
N//<e>定时器
N#define OS_CFG_TMR_EN                   1u   /* Enable (1) or Disable (0) code generation for TIMERS                  */
N
N#if OS_CFG_TMR_EN > 0u
X#if 1u > 0u
N//<e>定时器-OSTmrDel()
N#define OS_CFG_TMR_DEL_EN               1u   /* Enable (1) or Disable (0) code generation for OSTmrDel()              */
N//</e>
N#else
S#define OS_CFG_TMR_DEL_EN               0u
N#endif
N//</e>
N
N
N#endif
L 60 "..\ucos\core\os.h" 2
N#include <cpu.h>
L 1 "..\ucos\cpu\cpu.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form to registered licensees ONLY.  It is 
N*               illegal to distribute this source code to any third party unless you receive 
N*               written permission by an authorized Micrium representative.  Knowledge of 
N*               the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest 
N*               software available.  Your honesty is greatly appreciated.
N*
N*               You can contact us at www.micrium.com.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                            CPU PORT FILE
N*
N*                                            ARM-Cortex-M3
N*                                            IAR C Compiler
N*
N* Filename      : cpu.h
N* Version       : V1.28.01.00
N* Programmer(s) : JJL
N*                 BAN
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_MODULE_PRESENT
N#define  CPU_MODULE_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                          CPU INCLUDE FILES
N*
N* Note(s) : (1) The following CPU files are located in the following directories :
N*
N*               (a) \<Your Product Application>\cpu_cfg.h
N*
N*               (b) \<CPU-Compiler Directory>\cpu_def.h
N*
N*               (c) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                       where
N*                               <Your Product Application>      directory path for Your Product's Application
N*                               <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                               <cpu>                           directory name for specific CPU
N*                               <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<CPU-Compiler Directory>\' directory the 
N*               specific CPU-compiler directory, & '\<Your Product Application>\' as additional include 
N*               path directories.
N*
N*           (3) Since NO custom library modules are included, 'cpu.h' may ONLY use configurations from
N*               CPU configuration file 'cpu_cfg.h' that do NOT reference any custom library definitions.
N*
N*               In other words, 'cpu.h' may use 'cpu_cfg.h' configurations that are #define'd to numeric
N*               constants or to NULL (i.e. NULL-valued #define's); but may NOT use configurations to
N*               custom library #define's (e.g. DEF_DISABLED or DEF_ENABLED).
N*********************************************************************************************************
N*/
N
N#include  <cpu_def.h>
L 1 "..\ucos\cpu\cpu_def.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form to registered licensees ONLY.  It is 
N*               illegal to distribute this source code to any third party unless you receive 
N*               written permission by an authorized Micrium representative.  Knowledge of 
N*               the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest 
N*               software available.  Your honesty is greatly appreciated.
N*
N*               You can contact us at www.micrium.com.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      CPU CONFIGURATION DEFINES
N*
N* Filename      : cpu_def.h
N* Version       : V1.28.01
N* Programmer(s) : ITJ
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_DEF_MODULE_PRESENT
N#define  CPU_DEF_MODULE_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE in 'cpu.h' with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE in 'cpu.h' with CPU's data-word-memory order :
N*
N*               (a) CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*               (b) CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                        /* ---------------------- CPU WORD SIZE ----------------------- */
N#define  CPU_WORD_SIZE_08                          1u   /*  8-bit word size (in octets).                                */
N#define  CPU_WORD_SIZE_16                          2u   /* 16-bit word size (in octets).                                */
N#define  CPU_WORD_SIZE_32                          4u   /* 32-bit word size (in octets).                                */
N#define  CPU_WORD_SIZE_64                          8u   /* 64-bit word size (in octets).                                */
N
N
N                                                        /* ------------------ CPU WORD-ENDIAN ORDER ------------------- */
N#define  CPU_ENDIAN_TYPE_NONE                      0u
N#define  CPU_ENDIAN_TYPE_BIG                       1u   /* Big-   endian word order (see Note #1a).                     */
N#define  CPU_ENDIAN_TYPE_LITTLE                    2u   /* Little-endian word order (see Note #1b).                     */
N
N
N/*
N*********************************************************************************************************
N*                                       CPU STACK CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_STK_GROWTH in 'cpu.h' with CPU's stack growth order :
N*
N*               (a) CPU_STK_GROWTH_LO_TO_HI     CPU stack pointer increments to the next higher  stack 
N*                                                   memory address after data is pushed onto the stack
N*               (b) CPU_STK_GROWTH_HI_TO_LO     CPU stack pointer decrements to the next lower   stack 
N*                                                   memory address after data is pushed onto the stack
N*********************************************************************************************************
N*/
N
N                                                        /* ------------------ CPU STACK GROWTH ORDER ------------------ */
N#define  CPU_STK_GROWTH_NONE                       0u
N#define  CPU_STK_GROWTH_LO_TO_HI                   1u   /* CPU stk incs towards higher mem addrs (see Note #1a).        */
N#define  CPU_STK_GROWTH_HI_TO_LO                   2u   /* CPU stk decs towards lower  mem addrs (see Note #1b).        */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it supports multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (1) Push/save   interrupt status onto a local stack
N*                       (2) Disable     interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (3) Pop/restore interrupt status from a local stack
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it supports multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (1) Save    interrupt status into a local variable
N*                       (2) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (3) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) (a) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need 
N*                   to be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).
N*
N*                   (1) 'cpu_sr' local variable SHOULD be declared via the CPU_SR_ALLOC() macro which, 
N*                        if used, MUST be declared following ALL other local variables (see any 'cpu.h  
N*                        CRITICAL SECTION CONFIGURATION  Note #3a1').
N*
N*                        Example :
N*
N*                           void  Fnct (void)
N*                           {
N*                               CPU_INT08U  val_08;
N*                               CPU_INT16U  val_16;
N*                               CPU_INT32U  val_32;
N*                               CPU_SR_ALLOC();         MUST be declared after ALL other local variables
N*                                   :
N*                                   :
N*                           }
N*
N*               (b) Configure 'CPU_SR' data type with the appropriate-sized CPU data type large enough to 
N*                   completely store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
N                                                        /* --------------- CPU CRITICAL SECTION METHODS --------------- */
N#define  CPU_CRITICAL_METHOD_NONE                  0u   /*                                                              */
N#define  CPU_CRITICAL_METHOD_INT_DIS_EN            1u   /* DIS/EN       ints                    (see Note #1a).         */
N#define  CPU_CRITICAL_METHOD_STATUS_STK            2u   /* Push/Pop     int status onto stk     (see Note #1b).         */
N#define  CPU_CRITICAL_METHOD_STATUS_LOCAL          3u   /* Save/Restore int status to local var (see Note #1c).         */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                  /* End of CPU definition module include.                        */
N
L 80 "..\ucos\cpu\cpu.h" 2
N#include  <cpu_cfg.h>                                           /* See Note #3.                                         */
L 1 "..\ucos\cpu\cpu_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form to registered licensees ONLY.  It is 
N*               illegal to distribute this source code to any third party unless you receive 
N*               written permission by an authorized Micrium representative.  Knowledge of 
N*               the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest 
N*               software available.  Your honesty is greatly appreciated.
N*
N*               You can contact us at www.micrium.com.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                       CPU CONFIGURATION FILE
N*
N*                                              TEMPLATE
N*
N* Filename      : cpu_cfg.h
N* Version       : V1.28.01
N* Programmer(s) : SR
N*                 ITJ
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CFG_MODULE_PRESENT
N#define  CPU_CFG_MODULE_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                       CPU NAME CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_NAME_EN to enable/disable CPU host name feature :
N*
N*               (a) CPU host name storage
N*               (b) CPU host name API functions
N*
N*           (2) Configure CPU_CFG_NAME_SIZE with the desired ASCII string size of the CPU host name, 
N*               including the terminating NULL character.
N*
N*               See also 'cpu_core.h  GLOBAL VARIABLES  Note #1'.
N*********************************************************************************************************
N*/
N
N                                                                /* Configure CPU host name feature (see Note #1) :      */
N#define  CPU_CFG_NAME_EN                        DEF_DISABLED
N                                                                /*   DEF_DISABLED  CPU host name DISABLED               */
N                                                                /*   DEF_ENABLED   CPU host name ENABLED                */
N
N                                                                /* Configure CPU host name ASCII string size ...        */
N#define  CPU_CFG_NAME_SIZE                                16    /* ... (see Note #2).                                   */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     CPU TIMESTAMP CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_TS_xx_EN to enable/disable CPU timestamp features :
N*
N*               (a) CPU_CFG_TS_32_EN   enable/disable 32-bit CPU timestamp feature
N*               (b) CPU_CFG_TS_64_EN   enable/disable 64-bit CPU timestamp feature
N*
N*           (2) (a) Configure CPU_CFG_TS_TMR_SIZE with the CPU timestamp timer's word size :
N*
N*                       CPU_WORD_SIZE_08         8-bit word size
N*                       CPU_WORD_SIZE_16        16-bit word size
N*                       CPU_WORD_SIZE_32        32-bit word size
N*                       CPU_WORD_SIZE_64        64-bit word size
N*
N*               (b) If the size of the CPU timestamp timer is not a binary multiple of 8-bit octets 
N*                   (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple octet word 
N*                   size SHOULD be configured (e.g. to 16-bits).  However, the minimum supported word 
N*                   size for CPU timestamp timers is 8-bits.
N*
N*                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a'.
N*********************************************************************************************************
N*/
N
N                                                                /* Configure CPU timestamp features (see Note #1) :     */
N#define  CPU_CFG_TS_32_EN                       DEF_ENABLED
N#define  CPU_CFG_TS_64_EN                       DEF_DISABLED
N                                                                /*   DEF_DISABLED  CPU timestamps DISABLED              */
N                                                                /*   DEF_ENABLED   CPU timestamps ENABLED               */
N
N                                                                /* Configure CPU timestamp timer word size ...          */
N                                                                /* ... (see Note #2) :                                  */
N#define  CPU_CFG_TS_TMR_SIZE                    CPU_WORD_SIZE_32
N
N
N/*
N*********************************************************************************************************
N*                        CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION
N*
N* Note(s) : (1) (a) Configure CPU_CFG_INT_DIS_MEAS_EN to enable/disable measuring CPU's interrupts 
N*                   disabled time :
N*
N*                   (a)  Enabled,       if CPU_CFG_INT_DIS_MEAS_EN      #define'd in 'cpu_cfg.h'
N*
N*                   (b) Disabled,       if CPU_CFG_INT_DIS_MEAS_EN  NOT #define'd in 'cpu_cfg.h'
N*
N*                   See also 'cpu_core.h  FUNCTION PROTOTYPES  Note #1'.
N*
N*               (b) Configure CPU_CFG_INT_DIS_MEAS_OVRHD_NBR with the number of times to measure & 
N*                   average the interrupts disabled time measurements overhead.
N*
N*                   Recommend a single (1) overhead time measurement, even for instruction-cache-enabled 
N*                   CPUs, since critical sections are NOT typically called within instruction-cached loops.
N*                   Thus, a single non-cached/non-averaged time measurement is a more realistic overhead 
N*                   for the majority of non-cached interrupts disabled time measurements.
N*
N*                   See also 'cpu_core.c  CPU_IntDisMeasInit()  Note #3a'.
N*********************************************************************************************************
N*/
N
N#if 0                                                           /* Configure CPU interrupts disabled time ...           */
S#define  CPU_CFG_INT_DIS_MEAS_EN                                /* ... measurements feature (see Note #1a).             */
N#endif
N
N                                                                /* Configure number of interrupts disabled overhead ... */
N#define  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR                    1u   /* ... time measurements (see Note #1b).                */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                CPU COUNT LEADING ZEROS CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_LEAD_ZEROS_ASM_PRESENT to prototype/define count leading zeros bits 
N*               function(s) in :
N*
N*               (a) 'cpu.h'/'cpu_a.asm',       if CPU_CFG_LEAD_ZEROS_ASM_PRESENT      #define'd in 'cpu.h'/
N*                                                 'cpu_cfg.h' to enable assembly-version function
N*
N*               (b) 'cpu_core.h'/'cpu_core.c', if CPU_CFG_LEAD_ZEROS_ASM_PRESENT  NOT #define'd in 'cpu.h'/
N*                                                 'cpu_cfg.h' to enable C-source-version function otherwise
N*
N*               See also 'cpu_core.h  FUNCTION PROTOTYPES  Note #2'.
N*********************************************************************************************************
N*/
N
N#if 0                                                           /* Configure CPU count leading zeros bits ...           */
S#define  CPU_CFG_LEAD_ZEROS_ASM_PRESENT                         /* ... assembly-version (see Note #1).                  */
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of CPU cfg module include.                       */
N
L 81 "..\ucos\cpu\cpu.h" 2
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    CONFIGURE STANDARD DATA TYPES
N*
N* Note(s) : (1) Configure standard data types according to CPU-/compiler-specifications.
N*
N*           (2) (a) (1) 'CPU_FNCT_VOID' data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has no arguments.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_VOID  FnctName;
N*
N*                           FnctName();
N*
N*               (b) (1) 'CPU_FNCT_PTR'  data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has a single void
N*                       pointer argument.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_PTR   FnctName;
N*                           void          *p_obj
N*
N*                           FnctName(p_obj);
N*********************************************************************************************************
N*/
N
Ntypedef            void        CPU_VOID;
Ntypedef            char        CPU_CHAR;                        /*  8-bit character                                     */
Ntypedef  unsigned  char        CPU_BOOLEAN;                     /*  8-bit boolean or logical                            */
Ntypedef  unsigned  char        CPU_INT08U;                      /*  8-bit unsigned integer                              */
Ntypedef    signed  char        CPU_INT08S;                      /*  8-bit   signed integer                              */
Ntypedef  unsigned  short       CPU_INT16U;                      /* 16-bit unsigned integer                              */
Ntypedef    signed  short       CPU_INT16S;                      /* 16-bit   signed integer                              */
Ntypedef  unsigned  int         CPU_INT32U;                      /* 32-bit unsigned integer                              */
Ntypedef    signed  int         CPU_INT32S;                      /* 32-bit   signed integer                              */
Ntypedef  unsigned  long  long  CPU_INT64U;                      /* 64-bit unsigned integer                              */
Ntypedef    signed  long  long  CPU_INT64S;                      /* 64-bit   signed integer                              */
N
Ntypedef            float       CPU_FP32;                        /* 32-bit floating point                                */
Ntypedef            double      CPU_FP64;                        /* 64-bit floating point                                */
N
N
Ntypedef  volatile  CPU_INT08U  CPU_REG08;                       /*  8-bit register                                      */
Ntypedef  volatile  CPU_INT16U  CPU_REG16;                       /* 16-bit register                                      */
Ntypedef  volatile  CPU_INT32U  CPU_REG32;                       /* 32-bit register                                      */
Ntypedef  volatile  CPU_INT64U  CPU_REG64;                       /* 64-bit register                                      */
N
N
Ntypedef            void      (*CPU_FNCT_VOID)(void);            /* See Note #2a.                                        */
Ntypedef            void      (*CPU_FNCT_PTR )(void *p_obj);     /* See Note #2b.                                        */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE with CPU's data-word-memory order :
N*
N*               (a) CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*               (b) CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                                /* Define  CPU         word sizes (see Note #1) :       */
N#define  CPU_CFG_ADDR_SIZE              CPU_WORD_SIZE_32        /* Defines CPU address word size  (in octets).          */
N#define  CPU_CFG_DATA_SIZE              CPU_WORD_SIZE_32        /* Defines CPU data    word size  (in octets).          */
N
N#define  CPU_CFG_ENDIAN_TYPE            CPU_ENDIAN_TYPE_LITTLE  /* Defines CPU data    word-memory order (see Note #2). */
N
N
N/*
N*********************************************************************************************************
N*                                 CONFIGURE CPU ADDRESS & DATA TYPES
N*********************************************************************************************************
N*/
N
N                                                                /* CPU address type based on address bus size.          */
N#if     (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_32)
X#if     (4u == 4u)
Ntypedef  CPU_INT32U  CPU_ADDR;
N#elif   (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_ADDR;
S#else
Stypedef  CPU_INT08U  CPU_ADDR;
N#endif
N
N                                                                /* CPU data    type based on data    bus size.          */
N#if     (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
X#if     (4u == 4u)
Ntypedef  CPU_INT32U  CPU_DATA;
N#elif   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_DATA;
S#else
Stypedef  CPU_INT08U  CPU_DATA;
N#endif
N
N
Ntypedef  CPU_DATA    CPU_ALIGN;                                 /* Defines CPU data-word-alignment size.                */
Ntypedef  CPU_ADDR    CPU_SIZE_T;                                /* Defines CPU standard 'size_t'   size.                */
N
N
N/*
N*********************************************************************************************************
N*                                       CPU STACK CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_STK_GROWTH in 'cpu.h' with CPU's stack growth order :
N*
N*               (a) CPU_STK_GROWTH_LO_TO_HI     CPU stack pointer increments to the next higher  stack
N*                                                   memory address after data is pushed onto the stack
N*               (b) CPU_STK_GROWTH_HI_TO_LO     CPU stack pointer decrements to the next lower   stack
N*                                                   memory address after data is pushed onto the stack
N*********************************************************************************************************
N*/
N
N#define  CPU_CFG_STK_GROWTH     CPU_STK_GROWTH_HI_TO_LO         /* Defines CPU stack growth order (see Note #1).        */
N
Ntypedef  CPU_INT32U             CPU_STK;                        /* Defines CPU stack word size (in octets).             */
Ntypedef  CPU_ADDR               CPU_STK_SIZE;                   /* Defines CPU stack      size (in number of CPU_STKs). */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it supports multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (1) Push/save   interrupt status onto a local stack
N*                       (2) Disable     interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (3) Pop/restore interrupt status from a local stack
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it supports multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (1) Save    interrupt status into a local variable
N*                       (2) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (3) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) (a) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need
N*                   to be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).
N*
N*                   (1) 'cpu_sr' local variable SHOULD be declared via the CPU_SR_ALLOC() macro which, if 
N*                        used, MUST be declared following ALL other local variables.
N*
N*                        Example :
N*
N*                           void  Fnct (void)
N*                           {
N*                               CPU_INT08U  val_08;
N*                               CPU_INT16U  val_16;
N*                               CPU_INT32U  val_32;
N*                               CPU_SR_ALLOC();         MUST be declared after ALL other local variables
N*                                   :
N*                                   :
N*                           }
N*
N*               (b) Configure 'CPU_SR' data type with the appropriate-sized CPU data type large enough to
N*                   completely store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N//定义测量关中断的宏
N#define CPU_CFG_INT_DIS_MEAS_EN
N                                                                /* Configure CPU critical method      (see Note #1) :   */
N#define  CPU_CFG_CRITICAL_METHOD    CPU_CRITICAL_METHOD_STATUS_LOCAL
N
Ntypedef  CPU_INT32U                 CPU_SR;                     /* Defines   CPU status register size (see Note #3b).   */
N
N                                                                /* Allocates CPU status register word (see Note #3a).   */
N#if     (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
X#if     (3u == 3u)
N#define  CPU_SR_ALLOC()             CPU_SR  cpu_sr = (CPU_SR)0
N#else
S#define  CPU_SR_ALLOC()
N#endif
N
N
N
N#define  CPU_INT_DIS()         do { cpu_sr = CPU_SR_Save(); } while (0) /* Save    CPU status word & disable interrupts.*/
N#define  CPU_INT_EN()          do { CPU_SR_Restore(cpu_sr); } while (0) /* Restore CPU status word.                     */
N
N
N#ifdef   CPU_CFG_INT_DIS_MEAS_EN
N                                                                        /* Disable interrupts, ...                      */
N                                                                        /* & start interrupts disabled time measurement.*/
N#define  CPU_CRITICAL_ENTER()  do { CPU_INT_DIS();         \
N                                    CPU_IntDisMeasStart(); }  while (0)
X#define  CPU_CRITICAL_ENTER()  do { CPU_INT_DIS();                                             CPU_IntDisMeasStart(); }  while (0)
N                                                                        /* Stop & measure   interrupts disabled time,   */
N                                                                        /* ...  & re-enable interrupts.                 */
N#define  CPU_CRITICAL_EXIT()   do { CPU_IntDisMeasStop();  \
N                                    CPU_INT_EN();          }  while (0)
X#define  CPU_CRITICAL_EXIT()   do { CPU_IntDisMeasStop();                                      CPU_INT_EN();          }  while (0)
N
N#else
S
S#define  CPU_CRITICAL_ENTER()  do { CPU_INT_DIS(); } while (0)          /* Disable   interrupts.                        */
S#define  CPU_CRITICAL_EXIT()   do { CPU_INT_EN();  } while (0)          /* Re-enable interrupts.                        */
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*
N* Note(s) : (1) CPU_CntLeadZeros() prototyped/defined respectively in :
N*
N*               (a) 'cpu.h'/'cpu_a.asm',       if CPU_CFG_LEAD_ZEROS_ASM_PRESENT      #define'd in 'cpu.h'/
N*                                                 'cpu_cfg.h' to enable assembly-version function
N*
N*               (b) 'cpu_core.h'/'cpu_core.c', if CPU_CFG_LEAD_ZEROS_ASM_PRESENT  NOT #define'd in 'cpu.h'/
N*                                                 'cpu_cfg.h' to enable C-source-version function otherwise
N*
N*               See also 'cpu_core.h  FUNCTION PROTOTYPES  Note #2'.
N*********************************************************************************************************
N*/
N
Nvoid        CPU_IntDis       (void);
Nvoid        CPU_IntEn        (void);
N
Nvoid        CPU_IntSrcDis    (CPU_INT08U  pos);
Nvoid        CPU_IntSrcEn     (CPU_INT08U  pos);
Nvoid        CPU_IntSrcPendClr(CPU_INT08U  pos);
NCPU_INT16S  CPU_IntSrcPrioGet(CPU_INT08U  pos);
Nvoid        CPU_IntSrcPrioSet(CPU_INT08U  pos,
N                              CPU_INT08U  prio);
N
N
Nvoid        CPU_WaitForInt   (void);
Nvoid        CPU_WaitForExcept(void);
N
N
NCPU_SR      CPU_SR_Save      (void);
Nvoid        CPU_SR_Restore   (CPU_SR      cpu_sr);
N
N
N
N#define     CPU_CFG_LEAD_ZEROS_ASM_PRESENT                      /* See Note #1.                                         */
N
NCPU_DATA    CPU_CntLeadZeros (CPU_DATA    val);
NCPU_DATA    CPU_RevBits      (CPU_DATA    val);
N
N
Nvoid        CPU_BitBandClr   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
Nvoid        CPU_BitBandSet   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          INTERRUPT SOURCES
N*********************************************************************************************************
N*/
N
N#define  CPU_INT_STK_PTR                                   0u
N#define  CPU_INT_RESET                                     1u
N#define  CPU_INT_NMI                                       2u
N#define  CPU_INT_HFAULT                                    3u
N#define  CPU_INT_MEM                                       4u
N#define  CPU_INT_BUSFAULT                                  5u
N#define  CPU_INT_USAGEFAULT                                6u
N#define  CPU_INT_RSVD_07                                   7u
N#define  CPU_INT_RSVD_08                                   8u
N#define  CPU_INT_RSVD_09                                   9u
N#define  CPU_INT_RSVD_10                                  10u
N#define  CPU_INT_SVCALL                                   11u
N#define  CPU_INT_DBGMON                                   12u
N#define  CPU_INT_RSVD_13                                  13u
N#define  CPU_INT_PENDSV                                   14u
N#define  CPU_INT_SYSTICK                                  15u
N#define  CPU_INT_EXT0                                     16u
N
N/*
N*********************************************************************************************************
N*                                            CPU REGISTERS
N*********************************************************************************************************
N*/
N
N#define  CPU_REG_NVIC_NVIC           (*((CPU_REG32 *)(0xE000E004)))             /* Int Ctrl'er Type Reg.                */
N#define  CPU_REG_NVIC_ST_CTRL        (*((CPU_REG32 *)(0xE000E010)))             /* SysTick Ctrl & Status Reg.           */
N#define  CPU_REG_NVIC_ST_RELOAD      (*((CPU_REG32 *)(0xE000E014)))             /* SysTick Reload      Value Reg.       */
N#define  CPU_REG_NVIC_ST_CURRENT     (*((CPU_REG32 *)(0xE000E018)))             /* SysTick Current     Value Reg.       */
N#define  CPU_REG_NVIC_ST_CAL         (*((CPU_REG32 *)(0xE000E01C)))             /* SysTick Calibration Value Reg.       */
N
N#define  CPU_REG_NVIC_SETEN(n)       (*((CPU_REG32 *)(0xE000E100 + (n) * 4u)))  /* IRQ Set En Reg.                      */
N#define  CPU_REG_NVIC_CLREN(n)       (*((CPU_REG32 *)(0xE000E180 + (n) * 4u)))  /* IRQ Clr En Reg.                      */
N#define  CPU_REG_NVIC_SETPEND(n)     (*((CPU_REG32 *)(0xE000E200 + (n) * 4u)))  /* IRQ Set Pending Reg.                 */
N#define  CPU_REG_NVIC_CLRPEND(n)     (*((CPU_REG32 *)(0xE000E280 + (n) * 4u)))  /* IRQ Clr Pending Reg.                 */
N#define  CPU_REG_NVIC_ACTIVE(n)      (*((CPU_REG32 *)(0xE000E300 + (n) * 4u)))  /* IRQ Active Reg.                      */
N#define  CPU_REG_NVIC_PRIO(n)        (*((CPU_REG32 *)(0xE000E400 + (n) * 4u)))  /* IRQ Prio Reg.                        */
N
N#define  CPU_REG_NVIC_CPUID          (*((CPU_REG32 *)(0xE000ED00)))             /* CPUID Base Reg.                      */
N#define  CPU_REG_NVIC_ICSR           (*((CPU_REG32 *)(0xE000ED04)))             /* Int Ctrl State  Reg.                 */
N#define  CPU_REG_NVIC_VTOR           (*((CPU_REG32 *)(0xE000ED08)))             /* Vect Tbl Offset Reg.                 */
N#define  CPU_REG_NVIC_AIRCR          (*((CPU_REG32 *)(0xE000ED0C)))             /* App Int/Reset Ctrl Reg.              */
N#define  CPU_REG_NVIC_SCR            (*((CPU_REG32 *)(0xE000ED10)))             /* System Ctrl Reg.                     */
N#define  CPU_REG_NVIC_CCR            (*((CPU_REG32 *)(0xE000ED14)))             /* Cfg    Ctrl Reg.                     */
N#define  CPU_REG_NVIC_SHPRI1         (*((CPU_REG32 *)(0xE000ED18)))             /* System Handlers  4 to  7 Prio.       */
N#define  CPU_REG_NVIC_SHPRI2         (*((CPU_REG32 *)(0xE000ED1C)))             /* System Handlers  8 to 11 Prio.       */
N#define  CPU_REG_NVIC_SHPRI3         (*((CPU_REG32 *)(0xE000ED20)))             /* System Handlers 12 to 15 Prio.       */
N#define  CPU_REG_NVIC_SHCSR          (*((CPU_REG32 *)(0xE000ED24)))             /* System Handler Ctrl & State Reg.     */
N#define  CPU_REG_NVIC_CFSR           (*((CPU_REG32 *)(0xE000ED28)))             /* Configurable Fault Status Reg.       */
N#define  CPU_REG_NVIC_HFSR           (*((CPU_REG32 *)(0xE000ED2C)))             /* Hard  Fault Status Reg.              */
N#define  CPU_REG_NVIC_DFSR           (*((CPU_REG32 *)(0xE000ED30)))             /* Debug Fault Status Reg.              */
N#define  CPU_REG_NVIC_MMFAR          (*((CPU_REG32 *)(0xE000ED34)))             /* Mem Manage Addr Reg.                 */
N#define  CPU_REG_NVIC_BFAR           (*((CPU_REG32 *)(0xE000ED38)))             /* Bus Fault  Addr Reg.                 */
N#define  CPU_REG_NVIC_AFSR           (*((CPU_REG32 *)(0xE000ED3C)))             /* Aux Fault Status Reg.                */
N
N#define  CPU_REG_NVIC_PFR0           (*((CPU_REG32 *)(0xE000ED40)))             /* Processor Feature Reg 0.             */
N#define  CPU_REG_NVIC_PFR1           (*((CPU_REG32 *)(0xE000ED44)))             /* Processor Feature Reg 1.             */
N#define  CPU_REG_NVIC_DFR0           (*((CPU_REG32 *)(0xE000ED48)))             /* Debug     Feature Reg 0.             */
N#define  CPU_REG_NVIC_AFR0           (*((CPU_REG32 *)(0xE000ED4C)))             /* Aux       Feature Reg 0.             */
N#define  CPU_REG_NVIC_MMFR0          (*((CPU_REG32 *)(0xE000ED50)))             /* Memory Model Feature Reg 0.          */
N#define  CPU_REG_NVIC_MMFR1          (*((CPU_REG32 *)(0xE000ED54)))             /* Memory Model Feature Reg 1.          */
N#define  CPU_REG_NVIC_MMFR2          (*((CPU_REG32 *)(0xE000ED58)))             /* Memory Model Feature Reg 2.          */
N#define  CPU_REG_NVIC_MMFR3          (*((CPU_REG32 *)(0xE000ED5C)))             /* Memory Model Feature Reg 3.          */
N#define  CPU_REG_NVIC_ISAFR0         (*((CPU_REG32 *)(0xE000ED60)))             /* ISA Feature Reg 0.                   */
N#define  CPU_REG_NVIC_ISAFR1         (*((CPU_REG32 *)(0xE000ED64)))             /* ISA Feature Reg 1.                   */
N#define  CPU_REG_NVIC_ISAFR2         (*((CPU_REG32 *)(0xE000ED68)))             /* ISA Feature Reg 2.                   */
N#define  CPU_REG_NVIC_ISAFR3         (*((CPU_REG32 *)(0xE000ED6C)))             /* ISA Feature Reg 3.                   */
N#define  CPU_REG_NVIC_ISAFR4         (*((CPU_REG32 *)(0xE000ED70)))             /* ISA Feature Reg 4.                   */
N#define  CPU_REG_NVIC_SW_TRIG        (*((CPU_REG32 *)(0xE000EF00)))             /* Software Trigger Int Reg.            */
N
N#define  CPU_REG_MPU_TYPE            (*((CPU_REG32 *)(0xE000ED90)))             /* MPU Type Reg.                        */
N#define  CPU_REG_MPU_CTRL            (*((CPU_REG32 *)(0xE000ED94)))             /* MPU Ctrl Reg.                        */
N#define  CPU_REG_MPU_REG_NBR         (*((CPU_REG32 *)(0xE000ED98)))             /* MPU Region Nbr Reg.                  */
N#define  CPU_REG_MPU_REG_BASE        (*((CPU_REG32 *)(0xE000ED9C)))             /* MPU Region Base Addr Reg.            */
N#define  CPU_REG_MPU_REG_ATTR        (*((CPU_REG32 *)(0xE000EDA0)))             /* MPU Region Attrib & Size Reg.        */
N
N#define  CPU_REG_DBG_CTRL            (*((CPU_REG32 *)(0xE000EDF0)))             /* Debug Halting Ctrl & Status Reg.     */
N#define  CPU_REG_DBG_SELECT          (*((CPU_REG32 *)(0xE000EDF4)))             /* Debug Core Reg Selector Reg.         */
N#define  CPU_REG_DBG_DATA            (*((CPU_REG32 *)(0xE000EDF8)))             /* Debug Core Reg Data     Reg.         */
N#define  CPU_REG_DBG_INT             (*((CPU_REG32 *)(0xE000EDFC)))             /* Debug Except & Monitor Ctrl Reg.     */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          CPU REGISTER BITS
N*********************************************************************************************************
N*/
N
N                                                                /* ---------- SYSTICK CTRL & STATUS REG BITS ---------- */
N#define  CPU_REG_NVIC_ST_CTRL_COUNTFLAG           0x00010000
N#define  CPU_REG_NVIC_ST_CTRL_CLKSOURCE           0x00000004
N#define  CPU_REG_NVIC_ST_CTRL_TICKINT             0x00000002
N#define  CPU_REG_NVIC_ST_CTRL_ENABLE              0x00000001
N
N
N                                                                /* -------- SYSTICK CALIBRATION VALUE REG BITS -------- */
N#define  CPU_REG_NVIC_ST_CAL_NOREF                0x80000000
N#define  CPU_REG_NVIC_ST_CAL_SKEW                 0x40000000
N
N                                                                /* -------------- INT CTRL STATE REG BITS ------------- */
N#define  CPU_REG_NVIC_ICSR_NMIPENDSET             0x80000000
N#define  CPU_REG_NVIC_ICSR_PENDSVSET              0x10000000
N#define  CPU_REG_NVIC_ICSR_PENDSVCLR              0x08000000
N#define  CPU_REG_NVIC_ICSR_PENDSTSET              0x04000000
N#define  CPU_REG_NVIC_ICSR_PENDSTCLR              0x02000000
N#define  CPU_REG_NVIC_ICSR_ISRPREEMPT             0x00800000
N#define  CPU_REG_NVIC_ICSR_ISRPENDING             0x00400000
N#define  CPU_REG_NVIC_ICSR_RETTOBASE              0x00000800
N
N                                                                /* ------------- VECT TBL OFFSET REG BITS ------------- */
N#define  CPU_REG_NVIC_VTOR_TBLBASE                0x20000000
N
N                                                                /* ------------ APP INT/RESET CTRL REG BITS ----------- */
N#define  CPU_REG_NVIC_AIRCR_ENDIANNESS            0x00008000
N#define  CPU_REG_NVIC_AIRCR_SYSRESETREQ           0x00000004
N#define  CPU_REG_NVIC_AIRCR_VECTCLRACTIVE         0x00000002
N#define  CPU_REG_NVIC_AIRCR_VECTRESET             0x00000001
N
N                                                                /* --------------- SYSTEM CTRL REG BITS --------------- */
N#define  CPU_REG_NVIC_SCR_SEVONPEND               0x00000010
N#define  CPU_REG_NVIC_SCR_SLEEPDEEP               0x00000004
N#define  CPU_REG_NVIC_SCR_SLEEPONEXIT             0x00000002
N
N                                                                /* ----------------- CFG CTRL REG BITS ---------------- */
N#define  CPU_REG_NVIC_CCR_STKALIGN                0x00000200
N#define  CPU_REG_NVIC_CCR_BFHFNMIGN               0x00000100
N#define  CPU_REG_NVIC_CCR_DIV_0_TRP               0x00000010
N#define  CPU_REG_NVIC_CCR_UNALIGN_TRP             0x00000008
N#define  CPU_REG_NVIC_CCR_USERSETMPEND            0x00000002
N#define  CPU_REG_NVIC_CCR_NONBASETHRDENA          0x00000001
N
N                                                                /* ------- SYSTEM HANDLER CTRL & STATE REG BITS ------- */
N#define  CPU_REG_NVIC_SHCSR_USGFAULTENA           0x00040000
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTENA           0x00020000
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTENA           0x00010000
N#define  CPU_REG_NVIC_SHCSR_SVCALLPENDED          0x00008000
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTPENDED        0x00004000
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTPENDED        0x00002000
N#define  CPU_REG_NVIC_SHCSR_USGFAULTPENDED        0x00001000
N#define  CPU_REG_NVIC_SHCSR_SYSTICKACT            0x00000800
N#define  CPU_REG_NVIC_SHCSR_PENDSVACT             0x00000400
N#define  CPU_REG_NVIC_SHCSR_MONITORACT            0x00000100
N#define  CPU_REG_NVIC_SHCSR_SVCALLACT             0x00000080
N#define  CPU_REG_NVIC_SHCSR_USGFAULTACT           0x00000008
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTACT           0x00000002
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTACT           0x00000001
N
N                                                                /* -------- CONFIGURABLE FAULT STATUS REG BITS -------- */
N#define  CPU_REG_NVIC_CFSR_DIVBYZERO              0x02000000
N#define  CPU_REG_NVIC_CFSR_UNALIGNED              0x01000000
N#define  CPU_REG_NVIC_CFSR_NOCP                   0x00080000
N#define  CPU_REG_NVIC_CFSR_INVPC                  0x00040000
N#define  CPU_REG_NVIC_CFSR_INVSTATE               0x00020000
N#define  CPU_REG_NVIC_CFSR_UNDEFINSTR             0x00010000
N#define  CPU_REG_NVIC_CFSR_BFARVALID              0x00008000
N#define  CPU_REG_NVIC_CFSR_STKERR                 0x00001000
N#define  CPU_REG_NVIC_CFSR_UNSTKERR               0x00000800
N#define  CPU_REG_NVIC_CFSR_IMPRECISERR            0x00000400
N#define  CPU_REG_NVIC_CFSR_PRECISERR              0x00000200
N#define  CPU_REG_NVIC_CFSR_IBUSERR                0x00000100
N#define  CPU_REG_NVIC_CFSR_MMARVALID              0x00000080
N#define  CPU_REG_NVIC_CFSR_MSTKERR                0x00000010
N#define  CPU_REG_NVIC_CFSR_MUNSTKERR              0x00000008
N#define  CPU_REG_NVIC_CFSR_DACCVIOL               0x00000002
N#define  CPU_REG_NVIC_CFSR_IACCVIOL               0x00000001
N
N                                                                /* ------------ HARD FAULT STATUS REG BITS ------------ */
N#define  CPU_REG_NVIC_HFSR_DEBUGEVT               0x80000000
N#define  CPU_REG_NVIC_HFSR_FORCED                 0x40000000
N#define  CPU_REG_NVIC_HFSR_VECTTBL                0x00000002
N
N                                                                /* ------------ DEBUG FAULT STATUS REG BITS ----------- */
N#define  CPU_REG_NVIC_DFSR_EXTERNAL               0x00000010
N#define  CPU_REG_NVIC_DFSR_VCATCH                 0x00000008
N#define  CPU_REG_NVIC_DFSR_DWTTRAP                0x00000004
N#define  CPU_REG_NVIC_DFSR_BKPT                   0x00000002
N#define  CPU_REG_NVIC_DFSR_HALTED                 0x00000001
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          CPU REGISTER MASK
N*********************************************************************************************************
N*/
N
N#define  CPU_MSK_NVIC_ICSR_VECT_ACTIVE            0x000001FF
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CFG_ADDR_SIZE
S#error  "CPU_CFG_ADDR_SIZE              not #define'd in 'cpu.h'               "
S#error  "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif  ((CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_08) && \
S        (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_16) && \
S        (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_32))
X#elif  ((4u != 1u) &&         (4u != 2u) &&         (4u != 4u))
S#error  "CPU_CFG_ADDR_SIZE        illegally #define'd in 'cpu.h'               "
S#error  "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N#ifndef  CPU_CFG_DATA_SIZE
S#error  "CPU_CFG_DATA_SIZE              not #define'd in 'cpu.h'               "
S#error  "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif  ((CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_08) && \
S        (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_16) && \
S        (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_32))
X#elif  ((4u != 1u) &&         (4u != 2u) &&         (4u != 4u))
S#error  "CPU_CFG_DATA_SIZE        illegally #define'd in 'cpu.h'               "
S#error  "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error  "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N
N
N#ifndef  CPU_CFG_ENDIAN_TYPE
S#error  "CPU_CFG_ENDIAN_TYPE            not #define'd in 'cpu.h'   "
S#error  "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error  "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
S
S#elif  ((CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_BIG   ) && \
S        (CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_LITTLE))
X#elif  ((2u != 1u   ) &&         (2u != 2u))
S#error  "CPU_CFG_ENDIAN_TYPE      illegally #define'd in 'cpu.h'   "
S#error  "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error  "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
N#endif
N
N
N
N
N#ifndef  CPU_CFG_STK_GROWTH
S#error  "CPU_CFG_STK_GROWTH             not #define'd in 'cpu.h'    "
S#error  "                         [MUST be  CPU_STK_GROWTH_LO_TO_HI]"
S#error  "                         [     ||  CPU_STK_GROWTH_HI_TO_LO]"
S
S#elif  ((CPU_CFG_STK_GROWTH != CPU_STK_GROWTH_LO_TO_HI) && \
S        (CPU_CFG_STK_GROWTH != CPU_STK_GROWTH_HI_TO_LO))
X#elif  ((2u != 1u) &&         (2u != 2u))
S#error  "CPU_CFG_STK_GROWTH       illegally #define'd in 'cpu.h'    "
S#error  "                         [MUST be  CPU_STK_GROWTH_LO_TO_HI]"
S#error  "                         [     ||  CPU_STK_GROWTH_HI_TO_LO]"
N#endif
N
N
N
N
N#ifndef  CPU_CFG_CRITICAL_METHOD
S#error  "CPU_CFG_CRITICAL_METHOD        not #define'd in 'cpu.h'             "
S#error  "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error  "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error  "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
S
S#elif  ((CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_INT_DIS_EN  ) && \
S        (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_STK  ) && \
S        (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_LOCAL))
X#elif  ((3u != 1u  ) &&         (3u != 2u  ) &&         (3u != 3u))
S#error  "CPU_CFG_CRITICAL_METHOD  illegally #define'd in 'cpu.h'             "
S#error  "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error  "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error  "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of CPU module include.                           */
N
L 61 "..\ucos\core\os.h" 2
N#include <cpu_core.h>
L 1 "..\ucos\cpu\cpu_core.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form to registered licensees ONLY.  It is 
N*               illegal to distribute this source code to any third party unless you receive 
N*               written permission by an authorized Micrium representative.  Knowledge of 
N*               the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest 
N*               software available.  Your honesty is greatly appreciated.
N*
N*               You can contact us at www.micrium.com.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                           CORE CPU MODULE
N*
N* Filename      : cpu_core.h
N* Version       : V1.28.01
N* Programmer(s) : SR
N*                 ITJ
N*********************************************************************************************************
N* Note(s)       : (1) Assumes the following versions (or more recent) of software modules are included in 
N*                     the project build :
N*
N*                     (a) uC/LIB V1.35.00
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CORE_MODULE_PRESENT
N#define  CPU_CORE_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CORE CPU MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The core CPU module software version is denoted as follows :
N*
N*                       Vx.yy.zz
N*
N*                           where
N*                                   V               denotes 'Version' label
N*                                   x               denotes     major software version revision number
N*                                   yy              denotes     minor software version revision number
N*                                   zz              denotes sub-minor software version revision number
N*
N*               (b) The software version label #define is formatted as follows :
N*
N*                       ver = x.yyzz * 100 * 100
N*
N*                           where
N*                                   ver             denotes software version number scaled as an integer value
N*                                   x.yyzz          denotes software version number, where the unscaled integer 
N*                                                       portion denotes the major version number & the unscaled 
N*                                                       fractional portion denotes the (concatenated) minor 
N*                                                       version numbers
N*********************************************************************************************************
N*/
N
N#define  CPU_CORE_VERSION                              12801u   /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                               EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef   CPU_CORE_MODULE
S#define  CPU_CORE_EXT
N#else
N#define  CPU_CORE_EXT  extern
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) CPU-configuration software files are located in the following directories :
N*
N*               (a) \<Your Product Application>\cpu_cfg.h
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_*.*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                       where
N*                               <Your Product Application>      directory path for Your Product's Application
N*                               <CPU-Compiler Directory>        directory path for common CPU-compiler software
N*                               <cpu>                           directory name for specific processor (CPU)
N*                               <compiler>                      directory name for specific compiler
N*
N*           (2) NO compiler-supplied standard library functions SHOULD be used.
N*
N*               (a) Standard library functions are implemented in the custom library module(s) :
N*
N*                       \<Custom Library Directory>\lib_*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom library software
N*
N*           (3) Compiler MUST be configured to include as additional include path directories :
N*
N*               (a) '\<Your Product Application>\' directory                            See Note #1a
N*
N*               (b) (1) '\<CPU-Compiler Directory>\'                  directory         See Note #1b1
N*                   (2) '\<CPU-Compiler Directory>\<cpu>\<compiler>\' directory         See Note #1b2
N*
N*               (c) '\<Custom Library Directory>\' directory                            See Note #2a
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N#include  <lib_def.h>
L 1 "..\ucos\lib\lib_def.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/LIB
N*                                        CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form to registered licensees ONLY.  It is 
N*               illegal to distribute this source code to any third party unless you receive 
N*               written permission by an authorized Micrium representative.  Knowledge of 
N*               the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest 
N*               software available.  Your honesty is greatly appreciated.
N*
N*               You can contact us at www.micrium.com.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     CORE CUSTOM LIBRARY MODULE
N*
N* Filename      : lib_def.h
N* Version       : V1.35.00
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib_*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_DEF_MODULE_PRESENT
N#define  LIB_DEF_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                CUSTOM LIBRARY MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The custom library module software version is denoted as follows :
N*
N*                       Vx.yy.zz
N*
N*                           where
N*                                   V               denotes 'Version' label
N*                                   x               denotes     major software version revision number
N*                                   yy              denotes     minor software version revision number
N*                                   zz              denotes sub-minor software version revision number
N*
N*               (b) The software version label #define is formatted as follows :
N*
N*                       ver = x.yyzz * 100 * 100
N*
N*                           where
N*                                   ver             denotes software version number scaled as an integer value
N*                                   x.yyzz          denotes software version number, where the unscaled integer 
N*                                                       portion denotes the major version number & the unscaled 
N*                                                       fractional portion denotes the (concatenated) minor 
N*                                                       version numbers
N*********************************************************************************************************
N*/
N
N#define  LIB_VERSION                                   13500u   /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The custom library software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib_*.*
N*
N*                       where
N*                               <Custom Library Directory>      directory path for custom library software
N*
N*           (2) CPU-configuration  software files are located in the following directories :
N*
N*               (a) \<CPU-Compiler Directory>\cpu_*.*
N*               (b) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                       where
N*                               <CPU-Compiler Directory>        directory path for common CPU-compiler software
N*                               <cpu>                           directory name for specific processor (CPU)
N*                               <compiler>                      directory name for specific compiler
N*
N*           (3) Compiler MUST be configured to include as additional include path directories :
N*
N*               (a) '\<Custom Library Directory>\' directory                            See Note #1a
N*
N*               (b) (1) '\<CPU-Compiler Directory>\'                  directory         See Note #2a
N*                   (2) '\<CPU-Compiler Directory>\<cpu>\<compiler>\' directory         See Note #2b
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N//定义测量关中断的宏
N#define CPU_CFG_INT_DIS_MEAS_EN
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          STANDARD DEFINES
N*********************************************************************************************************
N*/
N
N#define  DEF_NULL                                 ((void *)0)
N
N
N                                                                /* ----------------- BOOLEAN DEFINES ------------------ */
N#define  DEF_FALSE                                         0u
N#define  DEF_TRUE                                          1u
N
N#define  DEF_NO                                            0u
N#define  DEF_YES                                           1u
N
N#define  DEF_DISABLED                                      0u
N#define  DEF_ENABLED                                       1u
N
N#define  DEF_INACTIVE                                      0u
N#define  DEF_ACTIVE                                        1u
N
N#define  DEF_INVALID                                       0u
N#define  DEF_VALID                                         1u
N
N#define  DEF_OFF                                           0u
N#define  DEF_ON                                            1u
N
N#define  DEF_CLR                                           0u
N#define  DEF_SET                                           1u
N
N#define  DEF_FAIL                                          0u
N#define  DEF_OK                                            1u
N
N
N/* ------------------- BIT DEFINES -------------------- */
N#define  DEF_BIT_NONE                                   0x00u
N
N#define  DEF_BIT_00                                     0x01u
N#define  DEF_BIT_01                                     0x02u
N#define  DEF_BIT_02                                     0x04u
N#define  DEF_BIT_03                                     0x08u
N#define  DEF_BIT_04                                     0x10u
N#define  DEF_BIT_05                                     0x20u
N#define  DEF_BIT_06                                     0x40u
N#define  DEF_BIT_07                                     0x80u
N
N#define  DEF_BIT_08                                   0x0100u
N#define  DEF_BIT_09                                   0x0200u
N#define  DEF_BIT_10                                   0x0400u
N#define  DEF_BIT_11                                   0x0800u
N#define  DEF_BIT_12                                   0x1000u
N#define  DEF_BIT_13                                   0x2000u
N#define  DEF_BIT_14                                   0x4000u
N#define  DEF_BIT_15                                   0x8000u
N
N#define  DEF_BIT_16                               0x00010000u
N#define  DEF_BIT_17                               0x00020000u
N#define  DEF_BIT_18                               0x00040000u
N#define  DEF_BIT_19                               0x00080000u
N#define  DEF_BIT_20                               0x00100000u
N#define  DEF_BIT_21                               0x00200000u
N#define  DEF_BIT_22                               0x00400000u
N#define  DEF_BIT_23                               0x00800000u
N
N#define  DEF_BIT_24                               0x01000000u
N#define  DEF_BIT_25                               0x02000000u
N#define  DEF_BIT_26                               0x04000000u
N#define  DEF_BIT_27                               0x08000000u
N#define  DEF_BIT_28                               0x10000000u
N#define  DEF_BIT_29                               0x20000000u
N#define  DEF_BIT_30                               0x40000000u
N#define  DEF_BIT_31                               0x80000000u
N/*$PAGE*/
N#define  DEF_BIT_32                       0x0000000100000000u
N#define  DEF_BIT_33                       0x0000000200000000u
N#define  DEF_BIT_34                       0x0000000400000000u
N#define  DEF_BIT_35                       0x0000000800000000u
N#define  DEF_BIT_36                       0x0000001000000000u
N#define  DEF_BIT_37                       0x0000002000000000u
N#define  DEF_BIT_38                       0x0000004000000000u
N#define  DEF_BIT_39                       0x0000008000000000u
N
N#define  DEF_BIT_40                       0x0000010000000000u
N#define  DEF_BIT_41                       0x0000020000000000u
N#define  DEF_BIT_42                       0x0000040000000000u
N#define  DEF_BIT_43                       0x0000080000000000u
N#define  DEF_BIT_44                       0x0000100000000000u
N#define  DEF_BIT_45                       0x0000200000000000u
N#define  DEF_BIT_46                       0x0000400000000000u
N#define  DEF_BIT_47                       0x0000800000000000u
N
N#define  DEF_BIT_48                       0x0001000000000000u
N#define  DEF_BIT_49                       0x0002000000000000u
N#define  DEF_BIT_50                       0x0004000000000000u
N#define  DEF_BIT_51                       0x0008000000000000u
N#define  DEF_BIT_52                       0x0010000000000000u
N#define  DEF_BIT_53                       0x0020000000000000u
N#define  DEF_BIT_54                       0x0040000000000000u
N#define  DEF_BIT_55                       0x0080000000000000u
N
N#define  DEF_BIT_56                       0x0100000000000000u
N#define  DEF_BIT_57                       0x0200000000000000u
N#define  DEF_BIT_58                       0x0400000000000000u
N#define  DEF_BIT_59                       0x0800000000000000u
N#define  DEF_BIT_60                       0x1000000000000000u
N#define  DEF_BIT_61                       0x2000000000000000u
N#define  DEF_BIT_62                       0x4000000000000000u
N#define  DEF_BIT_63                       0x8000000000000000u
N
N
N                                                                /* ------------------ OCTET DEFINES ------------------- */
N#define  DEF_OCTET_NBR_BITS                                8u
N#define  DEF_OCTET_MASK                                 0xFFu
N
N#define  DEF_OCTET_TO_BIT_NBR_BITS                         3u
N#define  DEF_OCTET_TO_BIT_SHIFT                          DEF_OCTET_TO_BIT_NBR_BITS
N#define  DEF_OCTET_TO_BIT_MASK                          0x07u
N
N
N#define  DEF_NIBBLE_NBR_BITS                               4u
N#define  DEF_NIBBLE_MASK                                0x0Fu
N
N
N                                                                /* --------------- NUMBER BASE DEFINES ---------------- */
N#define  DEF_NBR_BASE_BIN                                  2u
N#define  DEF_NBR_BASE_OCT                                  8u
N#define  DEF_NBR_BASE_DEC                                 10u
N#define  DEF_NBR_BASE_HEX                                 16u
N
N
N/*$PAGE*/
N                                                                /* ----------------- INTEGER DEFINES ------------------ */
N#define  DEF_INT_08_NBR_BITS                               8u
N#define  DEF_INT_08_MASK                                0xFFu
N
N#define  DEF_INT_08U_MIN_VAL                               0u
N#define  DEF_INT_08U_MAX_VAL                             255u
N
N#define  DEF_INT_08S_MIN_VAL_ONES_CPL                  (-127)
N#define  DEF_INT_08S_MAX_VAL_ONES_CPL                    127
N
N#define  DEF_INT_08S_MIN_VAL                            (DEF_INT_08S_MIN_VAL_ONES_CPL - 1)
N#define  DEF_INT_08S_MAX_VAL                             DEF_INT_08S_MAX_VAL_ONES_CPL
N
N#define  DEF_INT_08U_NBR_DIG_MIN                           1u
N#define  DEF_INT_08U_NBR_DIG_MAX                           3u
N
N#define  DEF_INT_08S_NBR_DIG_MIN                           3u
N#define  DEF_INT_08S_NBR_DIG_MAX                           3u
N
N
N
N#define  DEF_INT_16_NBR_BITS                              16u
N#define  DEF_INT_16_MASK                              0xFFFFu
N
N#define  DEF_INT_16U_MIN_VAL                               0u
N#define  DEF_INT_16U_MAX_VAL                           65535u
N
N#define  DEF_INT_16S_MIN_VAL_ONES_CPL                (-32767)
N#define  DEF_INT_16S_MAX_VAL_ONES_CPL                  32767
N
N#define  DEF_INT_16S_MIN_VAL                            (DEF_INT_16S_MIN_VAL_ONES_CPL - 1)
N#define  DEF_INT_16S_MAX_VAL                             DEF_INT_16S_MAX_VAL_ONES_CPL
N
N#define  DEF_INT_16U_NBR_DIG_MIN                           1u
N#define  DEF_INT_16U_NBR_DIG_MAX                           5u
N
N#define  DEF_INT_16S_NBR_DIG_MIN                           5u
N#define  DEF_INT_16S_NBR_DIG_MAX                           5u
N
N
N
N#define  DEF_INT_32_NBR_BITS                              32u
N#define  DEF_INT_32_MASK                          0xFFFFFFFFu
N
N#define  DEF_INT_32U_MIN_VAL                               0u
N#define  DEF_INT_32U_MAX_VAL                      4294967295u
N
N#define  DEF_INT_32S_MIN_VAL_ONES_CPL           (-2147483647)
N#define  DEF_INT_32S_MAX_VAL_ONES_CPL             2147483647
N
N#define  DEF_INT_32S_MIN_VAL                            (DEF_INT_32S_MIN_VAL_ONES_CPL - 1)
N#define  DEF_INT_32S_MAX_VAL                             DEF_INT_32S_MAX_VAL_ONES_CPL
N
N#define  DEF_INT_32U_NBR_DIG_MIN                           1u
N#define  DEF_INT_32U_NBR_DIG_MAX                          10u
N
N#define  DEF_INT_32S_NBR_DIG_MIN                          10u
N#define  DEF_INT_32S_NBR_DIG_MAX                          10u
N
N
N
N#define  DEF_INT_64_NBR_BITS                              64u
N#define  DEF_INT_64_MASK                  0xFFFFFFFFFFFFFFFFu
N
N#define  DEF_INT_64U_MIN_VAL                               0u
N#define  DEF_INT_64U_MAX_VAL            18446744073709551615u
N
N#define  DEF_INT_64S_MIN_VAL_ONES_CPL  (-9223372036854775807)
N#define  DEF_INT_64S_MAX_VAL_ONES_CPL    9223372036854775807
N
N#define  DEF_INT_64S_MIN_VAL                            (DEF_INT_64S_MIN_VAL_ONES_CPL - 1)
N#define  DEF_INT_64S_MAX_VAL                             DEF_INT_64S_MAX_VAL_ONES_CPL
N
N#define  DEF_INT_64U_NBR_DIG_MIN                           1u
N#define  DEF_INT_64U_NBR_DIG_MAX                          20u
N
N#define  DEF_INT_64S_NBR_DIG_MIN                          19u
N#define  DEF_INT_64S_NBR_DIG_MAX                          19u
N
N
N
N/*$PAGE*/
N                                                                /* --------------- CPU INTEGER DEFINES ---------------- */
N#define  DEF_INT_CPU_NBR_BITS                           (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS)
N
N
N#if     (DEF_INT_CPU_NBR_BITS == DEF_INT_08_NBR_BITS)
X#if     ((4u * 8u) == 8u)
S
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_08_MASK
S
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_08U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_08U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_08S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_08S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_08S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_08S_MAX_VAL_ONES_CPL
S
S
S
S#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_16_NBR_BITS)
X#elif   ((4u * 8u) == 16u)
S
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_16_MASK
S
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_16U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_16U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_16S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_16S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_16S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_16S_MAX_VAL_ONES_CPL
S
S
S
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_32_NBR_BITS)
X#elif   ((4u * 8u) == 32u)
N
N
N#define  DEF_INT_CPU_MASK                                DEF_INT_32_MASK
N
N#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_32U_MIN_VAL
N#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_32U_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_32S_MIN_VAL
N#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_32S_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_32S_MIN_VAL_ONES_CPL
N#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_32S_MAX_VAL_ONES_CPL
N
N
N
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_64_NBR_BITS)
S
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_64_MASK
S
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_64U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_64U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_64S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_64S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_64S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_64S_MAX_VAL_ONES_CPL
S
S
S
S#else
S
S#error  "CPU_CFG_DATA_SIZE  illegally #defined in 'cpu.h'      "
S#error  "                   [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N
N/*$PAGE*/
N                                                                /* ------------------- TIME DEFINES ------------------- */
N#define  DEF_TIME_NBR_DAY_PER_WK                           7uL
N#define  DEF_TIME_NBR_DAY_PER_YR                         365uL
N#define  DEF_TIME_NBR_DAY_PER_YR_LEAP                    366uL
N
N#define  DEF_TIME_NBR_HR_PER_DAY                          24uL
N#define  DEF_TIME_NBR_HR_PER_WK                         (DEF_TIME_NBR_HR_PER_DAY  * DEF_TIME_NBR_DAY_PER_WK     )
N#define  DEF_TIME_NBR_HR_PER_YR                         (DEF_TIME_NBR_HR_PER_DAY  * DEF_TIME_NBR_DAY_PER_YR     )
N#define  DEF_TIME_NBR_HR_PER_YR_LEAP                    (DEF_TIME_NBR_HR_PER_DAY  * DEF_TIME_NBR_DAY_PER_YR_LEAP)
N
N#define  DEF_TIME_NBR_MIN_PER_HR                          60uL
N#define  DEF_TIME_NBR_MIN_PER_DAY                       (DEF_TIME_NBR_MIN_PER_HR  * DEF_TIME_NBR_HR_PER_DAY     )
N#define  DEF_TIME_NBR_MIN_PER_WK                        (DEF_TIME_NBR_MIN_PER_DAY * DEF_TIME_NBR_DAY_PER_WK     )
N#define  DEF_TIME_NBR_MIN_PER_YR                        (DEF_TIME_NBR_MIN_PER_DAY * DEF_TIME_NBR_DAY_PER_YR     )
N#define  DEF_TIME_NBR_MIN_PER_YR_LEAP                   (DEF_TIME_NBR_MIN_PER_DAY * DEF_TIME_NBR_DAY_PER_YR_LEAP)
N
N#define  DEF_TIME_NBR_SEC_PER_MIN                         60uL
N#define  DEF_TIME_NBR_SEC_PER_HR                        (DEF_TIME_NBR_SEC_PER_MIN * DEF_TIME_NBR_MIN_PER_HR     )
N#define  DEF_TIME_NBR_SEC_PER_DAY                       (DEF_TIME_NBR_SEC_PER_HR  * DEF_TIME_NBR_HR_PER_DAY     )
N#define  DEF_TIME_NBR_SEC_PER_WK                        (DEF_TIME_NBR_SEC_PER_DAY * DEF_TIME_NBR_DAY_PER_WK     )
N#define  DEF_TIME_NBR_SEC_PER_YR                        (DEF_TIME_NBR_SEC_PER_DAY * DEF_TIME_NBR_DAY_PER_YR     )
N#define  DEF_TIME_NBR_SEC_PER_YR_LEAP                   (DEF_TIME_NBR_SEC_PER_DAY * DEF_TIME_NBR_DAY_PER_YR_LEAP)
N
N#define  DEF_TIME_NBR_mS_PER_SEC                        1000uL
N#define  DEF_TIME_NBR_uS_PER_SEC                     1000000uL
N#define  DEF_TIME_NBR_nS_PER_SEC                  1000000000uL
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             ERROR CODES
N*
N* Note(s) : (1) All generic library error codes are #define'd in 'lib_def.h';
N*               Any module-specific error codes are #define'd in library module header files.
N*********************************************************************************************************
N*/
N
N#define  LIB_ERR_NONE                                      0u
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                    LIBRARY ERROR CODES DATA TYPE
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U  LIB_ERR;
N
N
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             BIT MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_BIT()
N*
N* Description : Create bit mask with single, specified bit set.
N*
N* Argument(s) : bit         Bit number of bit to set.
N*
N* Return(s)   : Bit mask with single, specified bit set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) (a) 'bit' values that overflow the target CPU &/or compiler environment (e.g. negative 
N*                       or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*
N*                   (b) To avoid overflowing any target CPU &/or compiler's integer data type, unsigned 
N*                       bit constant '1' is suffixed with 'L'ong integer modifier.
N*
N*                       This may still be insufficient for CPUs &/or compilers that support 'long long' 
N*                       integer data types, in which case 'LL' integer modifier should be suffixed.  
N*                       However, since almost all 16- & 32-bit CPUs & compilers support 'long' integer 
N*                       data types but many may NOT support 'long long' integer data types, only 'long' 
N*                       integer data types & modifiers are supported.
N*
N*                       See also 'DEF_BITxx()  Note #1b'.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT(bit)                                                   (1uL << (bit))
N
N
N/*
N*********************************************************************************************************
N*                                             DEF_BITxx()
N*
N* Description : Create bit mask of specified bit size with single, specified bit set.
N*
N* Argument(s) : bit         Bit number of bit to set.
N*
N* Return(s)   : Bit mask with single, specified bit set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) (a) 'bit' values that overflow the target CPU &/or compiler environment (e.g. negative 
N*                       or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*
N*                   (b) To avoid overflowing any target CPU &/or compiler's integer data type, unsigned 
N*                       bit constant '1' is cast to specified integer data type size.
N*
N*               (2) Ideally, DEF_BITxx() macro's should be named DEF_BIT_xx(); however, these names already 
N*                   previously-released for bit constant #define's (see 'STANDARD DEFINES  BIT DEFINES').
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT08(bit)                        ((CPU_INT08U)((CPU_INT08U)1u  << (bit)))
N
N#define  DEF_BIT16(bit)                        ((CPU_INT16U)((CPU_INT16U)1u  << (bit)))
N
N#define  DEF_BIT32(bit)                        ((CPU_INT32U)((CPU_INT32U)1u  << (bit)))
N
N#define  DEF_BIT64(bit)                        ((CPU_INT64U)((CPU_INT64U)1u  << (bit)))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_MASK()
N*
N* Description : Shift a bit mask.
N*
N* Argument(s) : bit_mask    Bit mask to shift.
N*
N*               bit_shift   Number of bit positions to left-shift bit mask.
N*
N* Return(s)   : Shifted bit mask.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_mask' SHOULD be an unsigned integer.
N*
N*               (2) 'bit_shift' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_MASK(bit_mask, bit_shift)                                     ((bit_mask) << (bit_shift))
N
N
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_MASK_xx()
N*
N* Description : Shift a bit mask of specified bit size.
N*
N* Argument(s) : bit_mask    Bit mask to shift.
N*
N*               bit_shift   Number of bit positions to left-shift bit mask.
N*
N* Return(s)   : Shifted bit mask.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_mask' SHOULD be an unsigned integer.
N*
N*               (2) 'bit_shift' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_MASK_08(bit_mask, bit_shift)         ((CPU_INT08U)((CPU_INT08U)(bit_mask) << (bit_shift)))
N
N#define  DEF_BIT_MASK_16(bit_mask, bit_shift)         ((CPU_INT16U)((CPU_INT16U)(bit_mask) << (bit_shift)))
N
N#define  DEF_BIT_MASK_32(bit_mask, bit_shift)         ((CPU_INT32U)((CPU_INT32U)(bit_mask) << (bit_shift)))
N
N#define  DEF_BIT_MASK_64(bit_mask, bit_shift)         ((CPU_INT64U)((CPU_INT64U)(bit_mask) << (bit_shift)))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_FIELD()
N*
N* Description : Create & shift a contiguous bit field.
N*
N* Argument(s) : bit_field   Number of contiguous bits to set in the bit field.
N*
N*               bit_shift   Number of bit positions   to left-shift bit field.
N*
N* Return(s)   : Shifted bit field.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) (a) 'bit_field'/'bit_shift' values that overflow the target CPU &/or compiler 
N*                       environment (e.g. negative or greater-than-CPU-data-size values) MAY generate 
N*                       compiler warnings &/or errors.
N*
N*                   (b) To avoid overflowing any target CPU &/or compiler's integer data type, unsigned 
N*                       bit constant '1' is suffixed with 'L'ong integer modifier.
N*
N*                       This may still be insufficient for CPUs &/or compilers that support 'long long' 
N*                       integer data types, in which case 'LL' integer modifier should be suffixed.  
N*                       However, since almost all 16- & 32-bit CPUs & compilers support 'long' integer 
N*                       data types but many may NOT support 'long long' integer data types, only 'long' 
N*                       integer data types & modifiers are supported.
N*
N*                       See also 'DEF_BIT_FIELD_xx()  Note #1b'.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_FIELD(bit_field, bit_shift)                                 ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)     \
N                                                                                                                     : (DEF_BIT(bit_field) - 1uL)) \
N                                                                                                                            << (bit_shift))
X#define  DEF_BIT_FIELD(bit_field, bit_shift)                                 ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)                                                                                                                          : (DEF_BIT(bit_field) - 1uL))                                                                                                                             << (bit_shift))
N
N/*
N*********************************************************************************************************
N*                                         DEF_BIT_FIELD_xx()
N*
N* Description : Create & shift a contiguous bit field of specified bit size.
N*
N* Argument(s) : bit_field   Number of contiguous bits to set in the bit field.
N*
N*               bit_shift   Number of bit positions   to left-shift bit field.
N*
N* Return(s)   : Shifted bit field.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) (a) 'bit_field'/'bit_shift' values that overflow the target CPU &/or compiler 
N*                       environment (e.g. negative or greater-than-CPU-data-size values) MAY generate 
N*                       compiler warnings &/or errors.
N*
N*                   (b) To avoid overflowing any target CPU &/or compiler's integer data type, unsigned 
N*                       bit constant '1' is cast to specified integer data type size.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_FIELD_08(bit_field, bit_shift)     ((CPU_INT08U)((((CPU_INT08U)(bit_field) >= (CPU_INT08U)DEF_INT_08_NBR_BITS) ? (CPU_INT08U)(DEF_INT_08U_MAX_VAL)                    \
N                                                                                                                                : (CPU_INT08U)(DEF_BIT08(bit_field) - (CPU_INT08U)1u)) \
N                                                                                                                                                     << (bit_shift)))
X#define  DEF_BIT_FIELD_08(bit_field, bit_shift)     ((CPU_INT08U)((((CPU_INT08U)(bit_field) >= (CPU_INT08U)DEF_INT_08_NBR_BITS) ? (CPU_INT08U)(DEF_INT_08U_MAX_VAL)                                                                                                                                                    : (CPU_INT08U)(DEF_BIT08(bit_field) - (CPU_INT08U)1u))                                                                                                                                                      << (bit_shift)))
N
N#define  DEF_BIT_FIELD_16(bit_field, bit_shift)     ((CPU_INT16U)((((CPU_INT16U)(bit_field) >= (CPU_INT16U)DEF_INT_16_NBR_BITS) ? (CPU_INT16U)(DEF_INT_16U_MAX_VAL)                    \
N                                                                                                                                : (CPU_INT16U)(DEF_BIT16(bit_field) - (CPU_INT16U)1u)) \
N                                                                                                                                                     << (bit_shift)))
X#define  DEF_BIT_FIELD_16(bit_field, bit_shift)     ((CPU_INT16U)((((CPU_INT16U)(bit_field) >= (CPU_INT16U)DEF_INT_16_NBR_BITS) ? (CPU_INT16U)(DEF_INT_16U_MAX_VAL)                                                                                                                                                    : (CPU_INT16U)(DEF_BIT16(bit_field) - (CPU_INT16U)1u))                                                                                                                                                      << (bit_shift)))
N
N#define  DEF_BIT_FIELD_32(bit_field, bit_shift)     ((CPU_INT32U)((((CPU_INT32U)(bit_field) >= (CPU_INT32U)DEF_INT_32_NBR_BITS) ? (CPU_INT32U)(DEF_INT_32U_MAX_VAL)                    \
N                                                                                                                                : (CPU_INT32U)(DEF_BIT32(bit_field) - (CPU_INT32U)1u)) \
N                                                                                                                                                     << (bit_shift)))
X#define  DEF_BIT_FIELD_32(bit_field, bit_shift)     ((CPU_INT32U)((((CPU_INT32U)(bit_field) >= (CPU_INT32U)DEF_INT_32_NBR_BITS) ? (CPU_INT32U)(DEF_INT_32U_MAX_VAL)                                                                                                                                                    : (CPU_INT32U)(DEF_BIT32(bit_field) - (CPU_INT32U)1u))                                                                                                                                                      << (bit_shift)))
N
N#define  DEF_BIT_FIELD_64(bit_field, bit_shift)     ((CPU_INT64U)((((CPU_INT64U)(bit_field) >= (CPU_INT64U)DEF_INT_64_NBR_BITS) ? (CPU_INT64U)(DEF_INT_64U_MAX_VAL)                    \
N                                                                                                                                : (CPU_INT64U)(DEF_BIT64(bit_field) - (CPU_INT64U)1u)) \
N                                                                                                                                                     << (bit_shift)))
X#define  DEF_BIT_FIELD_64(bit_field, bit_shift)     ((CPU_INT64U)((((CPU_INT64U)(bit_field) >= (CPU_INT64U)DEF_INT_64_NBR_BITS) ? (CPU_INT64U)(DEF_INT_64U_MAX_VAL)                                                                                                                                                    : (CPU_INT64U)(DEF_BIT64(bit_field) - (CPU_INT64U)1u))                                                                                                                                                      << (bit_shift)))
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_SET()
N*
N* Description : Set specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by setting specified bit(s).
N*
N*               mask        Mask of bits to set.
N*
N* Return(s)   : Modified value with specified bit(s) set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'val' & 'mask' SHOULD be unsigned integers.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_SET(val, mask)                        ((val) |=  (mask))
N
N
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_CLR()
N*
N* Description : Clear specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by clearing specified bit(s).
N*
N*               mask        Mask of bits to clear.
N*
N* Return(s)   : Modified value with specified bit(s) clear.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'val' & 'mask' SHOULD be unsigned integers.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_CLR(val, mask)                        ((val) &= ~(mask))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_SET()
N*
N* Description : Determine if specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set (see Note #2).
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     set in value.
N*
N*               DEF_NO,  if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'val' & 'mask' SHOULD be unsigned integers.
N*
N*               (2) NULL 'mask' allowed; returns 'DEF_NO' since NO mask bits specified.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET(val, mask)                           ((((mask)  !=  0u)  && \
N                                                      (((val) & (mask)) == (mask))) ? (DEF_YES) : (DEF_NO ))
X#define  DEF_BIT_IS_SET(val, mask)                           ((((mask)  !=  0u)  &&                                                       (((val) & (mask)) == (mask))) ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_CLR()
N*
N* Description : Determine if specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear (see Note #2).
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     clear in value.
N*
N*               DEF_NO,  if ALL specified bit(s) are NOT clear in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'val' & 'mask' SHOULD be unsigned integers.
N*
N*               (2) NULL 'mask' allowed; returns 'DEF_NO' since NO mask bits specified.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR(val, mask)                           ((((mask)  !=  0u)  && \
N                                                      (((val) & (mask)) ==  0u))    ? (DEF_YES) : (DEF_NO ))
X#define  DEF_BIT_IS_CLR(val, mask)                           ((((mask)  !=  0u)  &&                                                       (((val) & (mask)) ==  0u))    ? (DEF_YES) : (DEF_NO ))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_SET_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set (see Note #2).
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     set in value.
N*
N*               DEF_NO,  if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'val' & 'mask' SHOULD be unsigned integers.
N*
N*               (2) NULL 'mask' allowed; returns 'DEF_NO' since NO mask bits specified.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET_ANY(val, mask)               ((((val) & (mask)) ==  0u)     ? (DEF_NO ) : (DEF_YES))
N
N
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_CLR_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear (see Note #2).
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     clear in value.
N*
N*               DEF_NO,  if ALL specified bit(s) are NOT clear in value.
N*
N* Note(s)     : (1) 'val' & 'mask' SHOULD be unsigned integers.
N*
N*               (2) NULL 'mask' allowed; returns 'DEF_NO' since NO mask bits specified.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR_ANY(val, mask)               ((((val) & (mask)) == (mask))  ? (DEF_NO ) : (DEF_YES))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DEF_CHK_VAL_MIN()
N*
N* Description : Validate a value as greater than or equal to a specified minimum value.
N*
N* Argument(s) : val        Value to validate.
N*
N*               val_min    Minimum value to test.
N*
N* Return(s)   : DEF_OK,    Value is greater than or equal to minimum value.
N*
N*               DEF_FAIL,  otherwise.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) DEF_CHK_VAL_MIN() avoids directly comparing any two values if only one of the values 
N*                   is negative since the negative value might be incorrectly promoted to an arbitrary 
N*                   unsigned value if the other value to compare is unsigned.
N*
N*               (2) Validation of values is limited to the range supported by the compiler &/or target 
N*                   environment.  All other values that underflow/overflow the supported range will 
N*                   modulo/wrap into the supported range as arbitrary signed or unsigned values.
N*
N*                   Therefore, any values that underflow the most negative signed value or overflow 
N*                   the most positive unsigned value supported by the compiler &/or target environment 
N*                   cannot be validated :
N*
N*                           (    N-1       N     ]
N*                           ( -(2   )  ,  2  - 1 ]
N*                           (                    ]
N*
N*                               where
N*                                       N       Number of data word bits supported by the compiler 
N*                                                   &/or target environment
N*
N*                   (a) Note that the most negative value, -2^(N-1), is NOT included in the supported 
N*                       range since many compilers do NOT always correctly handle this value.
N*********************************************************************************************************
N*/
N
N#define  DEF_CHK_VAL_MIN(val, val_min)            (((!(((val)     >= 0) && ((val_min) < 0))) && \
N                                                     ((((val_min) >= 0) && ((val)     < 0))  || \
N                                                       ((val) < (val_min)))) ? DEF_FAIL : DEF_OK)
X#define  DEF_CHK_VAL_MIN(val, val_min)            (((!(((val)     >= 0) && ((val_min) < 0))) &&                                                      ((((val_min) >= 0) && ((val)     < 0))  ||                                                        ((val) < (val_min)))) ? DEF_FAIL : DEF_OK)
N                                            
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DEF_CHK_VAL_MAX()
N*
N* Description : Validate a value as less than or equal to a specified maximum value.
N*
N* Argument(s) : val        Value to validate.
N*
N*               val_max    Maximum value to test.
N*
N* Return(s)   : DEF_OK,    Value is less than or equal to maximum value.
N*
N*               DEF_FAIL,  otherwise.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) DEF_CHK_VAL_MAX() avoids directly comparing any two values if only one of the values 
N*                   is negative since the negative value might be incorrectly promoted to an arbitrary 
N*                   unsigned value if the other value to compare is unsigned.
N*
N*               (2) Validation of values is limited to the range supported by the compiler &/or target 
N*                   environment.  All other values that underflow/overflow the supported range will 
N*                   modulo/wrap into the supported range as arbitrary signed or unsigned values.
N*
N*                   Therefore, any values that underflow the most negative signed value or overflow 
N*                   the most positive unsigned value supported by the compiler &/or target environment 
N*                   cannot be validated :
N*
N*                           (    N-1       N     ]
N*                           ( -(2   )  ,  2  - 1 ]
N*                           (                    ]
N*
N*                               where
N*                                       N       Number of data word bits supported by the compiler 
N*                                                   &/or target environment
N*
N*                   (a) Note that the most negative value, -2^(N-1), is NOT included in the supported 
N*                       range since many compilers do NOT always correctly handle this value.
N*********************************************************************************************************
N*/
N
N#define  DEF_CHK_VAL_MAX(val, val_max)            (((!(((val_max) >= 0) && ((val)     < 0))) && \
N                                                     ((((val)     >= 0) && ((val_max) < 0))  || \
N                                                       ((val) > (val_max)))) ? DEF_FAIL : DEF_OK)
X#define  DEF_CHK_VAL_MAX(val, val_max)            (((!(((val_max) >= 0) && ((val)     < 0))) &&                                                      ((((val)     >= 0) && ((val_max) < 0))  ||                                                        ((val) > (val_max)))) ? DEF_FAIL : DEF_OK)
N                                                
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DEF_CHK_VAL()
N*
N* Description : Validate a value as greater than or equal to a specified minimum value & less than or 
N*                   equal to a specified maximum value.
N*
N* Argument(s) : val        Value to validate.
N*
N*               val_min    Minimum value to test.
N*
N*               val_max    Maximum value to test.
N*
N* Return(s)   : DEF_OK,    Value is greater than or equal to minimum value AND 
N*                                   less    than or equal to maximum value.
N*
N*               DEF_FAIL,  otherwise.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) DEF_CHK_VAL() avoids directly comparing any two values if only one of the values 
N*                   is negative since the negative value might be incorrectly promoted to an arbitrary 
N*                   unsigned value if the other value to compare is unsigned.
N*
N*               (2) Validation of values is limited to the range supported by the compiler &/or target 
N*                   environment.  All other values that underflow/overflow the supported range will 
N*                   modulo/wrap into the supported range as arbitrary signed or unsigned values.
N*
N*                   Therefore, any values that underflow the most negative signed value or overflow 
N*                   the most positive unsigned value supported by the compiler &/or target environment 
N*                   cannot be validated :
N*
N*                           (    N-1       N     ]
N*                           ( -(2   )  ,  2  - 1 ]
N*                           (                    ]
N*
N*                               where
N*                                       N       Number of data word bits supported by the compiler 
N*                                                   &/or target environment
N*
N*                   (a) Note that the most negative value, -2^(N-1), is NOT included in the supported 
N*                       range since many compilers do NOT always correctly handle this value.
N*
N*               (3) DEF_CHK_VAL() does NOT validate that the maximum value ('val_max') is greater than 
N*                   or equal to the minimum value ('val_min').
N*********************************************************************************************************
N*/
N
N#define  DEF_CHK_VAL(val, val_min, val_max)          (((DEF_CHK_VAL_MIN(val, val_min) == DEF_FAIL) ||                  \
N                                                       (DEF_CHK_VAL_MAX(val, val_max) == DEF_FAIL)) ? DEF_FAIL : DEF_OK)
X#define  DEF_CHK_VAL(val, val_min, val_max)          (((DEF_CHK_VAL_MIN(val, val_min) == DEF_FAIL) ||                                                                         (DEF_CHK_VAL_MAX(val, val_max) == DEF_FAIL)) ? DEF_FAIL : DEF_OK)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            MATH MACRO'S
N*
N* Note(s) : (1) Ideally, ALL mathematical macro's & functions SHOULD be defined in the custom mathematics 
N*               library ('lib_math.*').  #### However, to maintain backwards compatibility with previously-
N*               released modules, mathematical macro & function definitions should only be moved to the 
N*               custom mathematics library once all previously-released modules are updated to include the 
N*               custom mathematics library.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_MIN()
N*
N* Description : Determine the minimum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Minimum of the two values.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MIN(a, b)                                  (((a) < (b)) ? (a) : (b))
N
N
N/*
N*********************************************************************************************************
N*                                              DEF_MAX()
N*
N* Description : Determine the maximum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Maximum of the two values.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MAX(a, b)                                  (((a) > (b)) ? (a) : (b))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              DEF_ABS()
N*
N* Description : Determine the absolute value of a value.
N*
N* Argument(s) : a           Value to calculate absolute value.
N*
N* Return(s)   : Absolute value of the value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_ABS(a)                                     (((a) < 0) ? (-(a)) : (a))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib def module include.                       */
N
L 133 "..\ucos\cpu\cpu_core.h" 2
N#include  <cpu_cfg.h>
N
N#if (CPU_CFG_NAME_EN == DEF_ENABLED)
X#if (0u == 1u)
S#include  <lib_mem.h>
S#include  <lib_str.h>
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          CPU CONFIGURATION
N*
N* Note(s) : (1) The following pre-processor directives correctly configure CPU parameters.  DO NOT MODIFY.
N*
N*           (2) CPU timestamp timer feature is required for :
N*
N*               (a) CPU timestamps
N*               (b) CPU interrupts disabled time measurement
N*
N*               See also 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
N*                      & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1'.
N*********************************************************************************************************
N*/
N
N#ifdef   CPU_CFG_TS_EN
S#undef   CPU_CFG_TS_EN
N#endif
N
N
N#if    ((CPU_CFG_TS_32_EN == DEF_ENABLED) || \
N        (CPU_CFG_TS_64_EN == DEF_ENABLED))
X#if    ((1u == 1u) ||         (0u == 1u))
N#define  CPU_CFG_TS_EN                          DEF_ENABLED
N#else
S#define  CPU_CFG_TS_EN                          DEF_DISABLED
N#endif
N
N#if    ((CPU_CFG_TS_EN == DEF_ENABLED) || \
N(defined(CPU_CFG_INT_DIS_MEAS_EN)))
X#if    ((1u == 1u) || (1L))
N#define  CPU_CFG_TS_TMR_EN                      DEF_ENABLED
N#else
S#define  CPU_CFG_TS_TMR_EN                      DEF_DISABLED
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                               DEFINES
N*********************************************************************************************************
N*/
N
N#define  CPU_TIME_MEAS_NBR_MIN                             1u
N#define  CPU_TIME_MEAS_NBR_MAX                           128u
N
N
N/*
N*********************************************************************************************************
N*                                           CPU ERROR CODES
N*********************************************************************************************************
N*/
N
N#define  CPU_ERR_NONE                                      0u
N#define  CPU_ERR_NULL_PTR                                 10u
N
N#define  CPU_ERR_NAME_SIZE                              1000u
N
N#define  CPU_ERR_TS_FREQ_INVALID                        2000u
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      CPU ERROR CODES DATA TYPE
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U  CPU_ERR;
N
N
N/*
N*********************************************************************************************************
N*                                      CPU TIMESTAMP DATA TYPES
N*
N* Note(s) : (1) CPU timestamp timer data type defined to the binary-multiple of 8-bit octets as configured 
N*               by 'CPU_CFG_TS_TMR_SIZE' (see 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #2').
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  CPU_TS32;
Ntypedef  CPU_INT64U  CPU_TS64;
N
Ntypedef  CPU_TS32    CPU_TS;                                    /* Req'd for backwards-compatibility.                   */
N
N
N#if     (CPU_CFG_TS_TMR_EN   == DEF_ENABLED)                    /* CPU ts tmr defined to cfg'd word size (see Note #1). */
X#if     (1u   == 1u)                     
N#if     (CPU_CFG_TS_TMR_SIZE == CPU_WORD_SIZE_08)
X#if     (4u == 1u)
Stypedef  CPU_INT08U  CPU_TS_TMR;
S#elif   (CPU_CFG_TS_TMR_SIZE == CPU_WORD_SIZE_16)
X#elif   (4u == 2u)
Stypedef  CPU_INT16U  CPU_TS_TMR;
S#elif   (CPU_CFG_TS_TMR_SIZE == CPU_WORD_SIZE_64)
X#elif   (4u == 8u)
Stypedef  CPU_INT64U  CPU_TS_TMR;
N#else                                                           /* CPU ts tmr dflt size = 32-bits.                      */
Ntypedef  CPU_INT32U  CPU_TS_TMR;
N#endif
N#endif
N
N
N/*
N*********************************************************************************************************
N*                               CPU TIMESTAMP TIMER FREQUENCY DATA TYPE
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  CPU_TS_TMR_FREQ;
N
N
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N#if    (CPU_CFG_NAME_EN   == DEF_ENABLED)
X#if    (0u   == 1u)
SCPU_CORE_EXT  CPU_CHAR         CPU_Name[CPU_CFG_NAME_SIZE];     /* CPU host name.                                       */
N#endif
N
N
N#if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
N     (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
X#if ((1u    == 1u)  &&      (4u <  4u))
SCPU_CORE_EXT  CPU_TS32         CPU_TS_32_Accum;                 /* 32-bit accum'd ts  (in ts tmr cnts).                 */
SCPU_CORE_EXT  CPU_TS_TMR       CPU_TS_32_TmrPrev;               /* 32-bit ts prev tmr (in ts tmr cnts).                 */
N#endif
N
N#if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
N     (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
X#if ((0u    == 1u)  &&      (4u <  8u))
SCPU_CORE_EXT  CPU_TS64         CPU_TS_64_Accum;                 /* 64-bit accum'd ts  (in ts tmr cnts).                 */
SCPU_CORE_EXT  CPU_TS_TMR       CPU_TS_64_TmrPrev;               /* 64-bit ts prev tmr (in ts tmr cnts).                 */
N#endif
N
N#if  (CPU_CFG_TS_TMR_EN   == DEF_ENABLED)
X#if  (1u   == 1u)
NCPU_CORE_EXT  CPU_TS_TMR_FREQ  CPU_TS_TmrFreq_Hz;               /* CPU ts tmr freq (in Hz).                             */
Xextern  CPU_TS_TMR_FREQ  CPU_TS_TmrFreq_Hz;                
N#endif
N
N
N#ifdef  CPU_CFG_INT_DIS_MEAS_EN
NCPU_CORE_EXT  CPU_INT16U       CPU_IntDisMeasCtr;               /* Nbr tot    ints dis'd ctr.                           */
Xextern  CPU_INT16U       CPU_IntDisMeasCtr;                
NCPU_CORE_EXT  CPU_INT16U       CPU_IntDisNestCtr;               /* Nbr nested ints dis'd ctr.                           */
Xextern  CPU_INT16U       CPU_IntDisNestCtr;                
N                                                                /* Ints dis'd time (in ts tmr cnts) : ...               */
NCPU_CORE_EXT  CPU_TS_TMR       CPU_IntDisMeasStart_cnts;        /* ...  start time.                                     */
Xextern  CPU_TS_TMR       CPU_IntDisMeasStart_cnts;         
NCPU_CORE_EXT  CPU_TS_TMR       CPU_IntDisMeasStop_cnts;         /* ...  stop  time.                                     */
Xextern  CPU_TS_TMR       CPU_IntDisMeasStop_cnts;          
NCPU_CORE_EXT  CPU_TS_TMR       CPU_IntDisMeasOvrhd_cnts;        /* ...        time meas ovrhd.                          */
Xextern  CPU_TS_TMR       CPU_IntDisMeasOvrhd_cnts;         
NCPU_CORE_EXT  CPU_TS_TMR       CPU_IntDisMeasMaxCur_cnts;       /* ...     resetable max time dis'd.                    */
Xextern  CPU_TS_TMR       CPU_IntDisMeasMaxCur_cnts;        
NCPU_CORE_EXT  CPU_TS_TMR       CPU_IntDisMeasMax_cnts;          /* ... non-resetable max time dis'd.                    */
Xextern  CPU_TS_TMR       CPU_IntDisMeasMax_cnts;           
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                               MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                         CPU_SW_EXCEPTION()
N*
N* Description : Trap unrecoverable software exception.
N*
N* Argument(s) : err_rtn_val     Error type &/or value of the calling function to return (see Note #2b).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : various.
N*
N* Note(s)     : (1) CPU_SW_EXCEPTION() deadlocks the current code execution -- whether multi-tasked/
N*                   -processed/-threaded or single-threaded -- when the current code execution cannot 
N*                   gracefully recover or report a fault or exception condition.
N*
N*                   Example CPU_SW_EXCEPTION() call :
N*
N*                       void  Fnct (CPU_ERR  *p_err)
N*                       {
N*                           :
N*
N*                           if (p_err == (CPU_ERR *)0) {        If 'p_err' NULL, cannot return error ...
N*                               CPU_SW_EXCEPTION(;);            ... so trap invalid argument exception.
N*                           }
N*
N*                           :
N*                       }
N*
N*                   See also 'cpu_core.c  CPU_SW_Exception()  Note #1'.
N*
N*               (2) (a) CPU_SW_EXCEPTION()  MAY be developer-implemented to output &/or handle any error or 
N*                       exception conditions; but since CPU_SW_EXCEPTION() is intended to trap unrecoverable 
N*                       software  conditions, it is recommended that developer-implemented versions prevent 
N*                       execution of any code following calls to CPU_SW_EXCEPTION() by deadlocking the code 
N*                       (see Note #1).
N*
N*                           Example CPU_SW_EXCEPTION() :
N*
N*                               #define  CPU_SW_EXCEPTION(err_rtn_val)      do {                         \
N*                                                                               Log(__FILE__, __LINE__); \
N*                                                                               CPU_SW_Exception();      \
N*                                                                           } while (0)
X
N*
N*                   (b) (1) However, if execution of code following calls to CPU_SW_EXCEPTION() is required 
N*                           (e.g. for automated testing); it is recommended that the last statement in 
N*                           developer-implemented versions be to return from the current function to prevent 
N*                           possible software exception(s) in the current function from triggering CPU &/or 
N*                           hardware exception(s).
N*
N*                           Example CPU_SW_EXCEPTION() :
N*
N*                               #define  CPU_SW_EXCEPTION(err_rtn_val)      do {                         \
N*                                                                               Log(__FILE__, __LINE__); \
N*                                                                               return  err_rtn_val;     \
N*                                                                           } while (0)
X
N*
N*                           (A) Note that 'err_rtn_val' in the return statement MUST NOT be enclosed in 
N*                               parentheses.  This allows CPU_SW_EXCEPTION() to return from functions that 
N*                               return 'void', i.e. NO return type or value (see also Note #2b2A).
N*$PAGE*
N*                       (2) In order for CPU_SW_EXCEPTION() to return from functions with various return 
N*                           types/values, each caller function MUST pass an appropriate error return type 
N*                           & value to CPU_SW_EXCEPTION().
N*
N*                           (A) Note that CPU_SW_EXCEPTION()  MUST NOT be passed any return type or value 
N*                               for functions that return 'void', i.e. NO return type or value; but SHOULD 
N*                               instead be passed a single semicolon.  This prevents possible compiler 
N*                               warnings that CPU_SW_EXCEPTION() is passed too few arguments.  However, 
N*                               the compiler may warn that CPU_SW_EXCEPTION() does NOT prevent creating 
N*                               null statements on lines with NO other code statements.
N*                       
N*                           Example CPU_SW_EXCEPTION() calls :
N*
N*                               void  Fnct (CPU_ERR  *p_err)
N*                               {
N*                                   :
N*
N*                                   if (p_err == (CPU_ERR *)0) {
N*                                       CPU_SW_EXCEPTION(;);            Exception macro returns NO value
N*                                   }                                       (see Note #2b2A)
N*
N*                                   :
N*                               }
N*
N*                               CPU_BOOLEAN  Fnct (CPU_ERR  *p_err)
N*                               {
N*                                   :
N*
N*                                   if (p_err == (CPU_ERR *)0) {
N*                                       CPU_SW_EXCEPTION(DEF_FAIL);     Exception macro returns 'DEF_FAIL'
N*                                   }
N*
N*                                   :
N*                               }
N*
N*                               OBJ  *Fnct (CPU_ERR  *p_err)
N*                               {
N*                                   :
N*
N*                                   if (p_err == (CPU_ERR *)0) {
N*                                       CPU_SW_EXCEPTION((OBJ *)0);     Exception macro returns NULL 'OBJ *'
N*                                   }
N*
N*                                   :
N*                               }
N*
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_SW_EXCEPTION                                                       /* See Note #2.                         */
N#define  CPU_SW_EXCEPTION(err_rtn_val)              do {                    \
N                                                        CPU_SW_Exception(); \
N                                                    } while (0)
X#define  CPU_SW_EXCEPTION(err_rtn_val)              do {                                                                            CPU_SW_Exception();                                                     } while (0)
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          CPU_TYPE_CREATE()
N*
N* Description : Creates a generic type value.
N*
N* Argument(s) : char_1      1st ASCII character to create generic type value.
N*
N*               char_2      2nd ASCII character to create generic type value.
N*
N*               char_3      3rd ASCII character to create generic type value.
N*
N*               char_4      4th ASCII character to create generic type value.
N*
N* Return(s)   : 32-bit generic type value.
N*
N* Caller(s)   : various.
N*
N* Note(s)     : (1) (a) Generic type values should be #define'd with large, non-trivial values to trap 
N*                       & discard invalid/corrupted objects based on type value.
N*
N*                       In other words, by assigning large, non-trivial values to valid objects' type 
N*                       fields; the likelihood that an object with an unassigned &/or corrupted type 
N*                       field will contain a value is highly improbable & therefore the object itself 
N*                       will be trapped as invalid.
N*
N*                   (b) (1) CPU_TYPE_CREATE()  creates a 32-bit type value from four values.
N*
N*                       (2) Ideally, generic type values SHOULD be created from 'CPU_CHAR' characters to 
N*                           represent ASCII string abbreviations of the specific object types.  Memory 
N*                           displays of object type values will display the specific object types with 
N*                           their chosen ASCII names.
N*
N*                           Examples :
N*
N*                               #define  FILE_TYPE  CPU_TYPE_CREATE('F', 'I', 'L', 'E')
N*                               #define  BUF_TYPE   CPU_TYPE_CREATE('B', 'U', 'F', ' ')
N*********************************************************************************************************
N*/
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2u == 1u)
S#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (3u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_2)) << (2u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_3)) << (1u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_4)) << (0u * DEF_OCTET_NBR_BITS)))
X#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (3u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_2)) << (2u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_3)) << (1u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_4)) << (0u * DEF_OCTET_NBR_BITS)))
S
N#else
N
N#if    ((CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_64) || \
N        (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_32))
X#if    ((4u   == 8u) ||         (4u   == 4u))
N#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (0u * DEF_OCTET_NBR_BITS)) | \
N                                                                 ((CPU_INT32U)((CPU_INT08U)(char_2)) << (1u * DEF_OCTET_NBR_BITS)) | \
N                                                                 ((CPU_INT32U)((CPU_INT08U)(char_3)) << (2u * DEF_OCTET_NBR_BITS)) | \
N                                                                 ((CPU_INT32U)((CPU_INT08U)(char_4)) << (3u * DEF_OCTET_NBR_BITS)))
X#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (0u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_2)) << (1u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_3)) << (2u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_4)) << (3u * DEF_OCTET_NBR_BITS)))
N
N
N#elif   (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_16)
S#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (2u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_2)) << (3u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_3)) << (0u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_4)) << (1u * DEF_OCTET_NBR_BITS)))
X#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (2u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_2)) << (3u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_3)) << (0u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_4)) << (1u * DEF_OCTET_NBR_BITS)))
S
S#else                                                           /* Dflt CPU_WORD_SIZE_08.                               */
S#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (3u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_2)) << (2u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_3)) << (1u * DEF_OCTET_NBR_BITS)) | \
S                                                                 ((CPU_INT32U)((CPU_INT08U)(char_4)) << (0u * DEF_OCTET_NBR_BITS)))
X#define  CPU_TYPE_CREATE(char_1, char_2, char_3, char_4)        (((CPU_INT32U)((CPU_INT08U)(char_1)) << (3u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_2)) << (2u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_3)) << (1u * DEF_OCTET_NBR_BITS)) |                                                                  ((CPU_INT32U)((CPU_INT08U)(char_4)) << (0u * DEF_OCTET_NBR_BITS)))
N#endif
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*
N* Note(s) : (1) CPU interrupts disabled time measurement functions prototyped/defined only if 
N*               CPU_CFG_INT_DIS_MEAS_EN  #define'd in 'cpu_cfg.h'.
N*
N*           (2) CPU_CntLeadZeros() prototyped/defined respectively in :
N*
N*               (a) 'cpu.h'/'cpu_a.asm',       if CPU_CFG_LEAD_ZEROS_ASM_PRESENT      #define'd in 'cpu.h'/
N*                                                 'cpu_cfg.h' to enable assembly-version function
N*
N*               (b) 'cpu_core.h'/'cpu_core.c', if CPU_CFG_LEAD_ZEROS_ASM_PRESENT  NOT #define'd in 'cpu.h'/
N*                                                 'cpu_cfg.h' to enable C-source-version function otherwise
N*********************************************************************************************************
N*/
N
Nvoid             CPU_Init                 (void);
N
Nvoid             CPU_SW_Exception         (void);
N
N
N
N#if (CPU_CFG_NAME_EN == DEF_ENABLED)                                    /* -------------- CPU NAME FNCTS -------------- */
X#if (0u == 1u)                                     
Svoid             CPU_NameClr              (void);
S
Svoid             CPU_NameGet              (       CPU_CHAR  *p_name,
S                                                  CPU_ERR   *p_err);
S
Svoid             CPU_NameSet              (const  CPU_CHAR  *p_name,
S                                                  CPU_ERR   *p_err);
N#endif
N
N
N
N                                                                        /* --------------- CPU TS FNCTS --------------- */
N#if (CPU_CFG_TS_32_EN == DEF_ENABLED)
X#if (1u == 1u)
NCPU_TS32         CPU_TS_Get32             (void);
N#endif
N
N#if (CPU_CFG_TS_64_EN == DEF_ENABLED)
X#if (0u == 1u)
SCPU_TS64         CPU_TS_Get64             (void);
N#endif
N
N#if (CPU_CFG_TS_EN    == DEF_ENABLED)
X#if (1u    == 1u)
Nvoid             CPU_TS_Update            (void);
N#endif
N
N
N#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)                                  /* ------------- CPU TS TMR FNCTS ------------- */
X#if (1u == 1u)                                   
NCPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet        (CPU_ERR          *p_err);
N
Nvoid             CPU_TS_TmrFreqSet        (CPU_TS_TMR_FREQ   freq_hz);
N#endif
N
N
N
N#ifdef  CPU_CFG_INT_DIS_MEAS_EN                                         /* -------- CPU INT DIS TIME MEAS FNCTS ------- */
N                                                                        /* See Note #1.                                 */
NCPU_TS_TMR       CPU_IntDisMeasMaxCurReset(void);
N
NCPU_TS_TMR       CPU_IntDisMeasMaxCurGet  (void);
N
NCPU_TS_TMR       CPU_IntDisMeasMaxGet     (void);
N
N
Nvoid             CPU_IntDisMeasStart      (void);
N
Nvoid             CPU_IntDisMeasStop       (void);
N#endif
N
N
N
N#ifndef  CPU_CFG_LEAD_ZEROS_ASM_PRESENT                                 /* --------- CPU CNT LEAD ZEROS FNCTS --------- */
SCPU_DATA         CPU_CntLeadZeros         (CPU_DATA          val);      /* See Note #2.                                 */
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*                                      DEFINED IN PRODUCT'S BSP
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                          CPU_TS_TmrInit()
N*
N* Description : Initialize & start CPU timestamp timer.
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : CPU_TS_Init().
N*
N*               This function is an INTERNAL CPU module function & MUST be implemented by application/
N*               BSP function(s) [see Note #1] but MUST NOT be called by application function(s).
N*
N* Note(s)     : (1) CPU_TS_TmrInit() is an application/BSP function that MUST be defined by the developer 
N*                   if either of the following CPU features is enabled :
N*
N*                   (a) CPU timestamps
N*                   (b) CPU interrupts disabled time measurements
N*
N*                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
N*                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
N*
N*               (2) (a) Timer count values MUST be returned via word-size-configurable 'CPU_TS_TMR' 
N*                       data type.
N*
N*                       (1) If timer has more bits, truncate timer values' higher-order bits greater 
N*                           than the configured 'CPU_TS_TMR' timestamp timer data type word size.
N*
N*                       (2) Since the timer MUST NOT have less bits than the configured 'CPU_TS_TMR' 
N*                           timestamp timer data type word size; 'CPU_CFG_TS_TMR_SIZE' MUST be 
N*                           configured so that ALL bits in 'CPU_TS_TMR' data type are significant.
N*
N*                           In other words, if timer size is not a binary-multiple of 8-bit octets 
N*                           (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple 
N*                           octet word size SHOULD be configured (e.g. to 16-bits).  However, the 
N*                           minimum supported word size for CPU timestamp timers is 8-bits.
N*
N*                       See also 'cpu_cfg.h   CPU TIMESTAMP CONFIGURATION  Note #2'
N*                              & 'cpu_core.h  CPU TIMESTAMP DATA TYPES     Note #1'.
N*
N*                   (b) Timer SHOULD be an 'up'  counter whose values increase with each time count.
N*
N*                   (c) When applicable, timer period SHOULD be less than the typical measured time 
N*                       but MUST be less than the maximum measured time; otherwise, timer resolution 
N*                       inadequate to measure desired times.
N*
N*                   See also 'CPU_TS_TmrRd()  Note #2'.
N*********************************************************************************************************
N*/
N
N#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
X#if (1u == 1u)
Nvoid  CPU_TS_TmrInit(void);
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           CPU_TS_TmrRd()
N*
N* Description : Get current CPU timestamp timer count value.
N*
N* Argument(s) : none.
N*
N* Return(s)   : Timestamp timer count (see Notes #2a & #2b).
N*
N* Caller(s)   : CPU_TS_Init(),
N*               CPU_TS_Get32(),
N*               CPU_TS_Get64(),
N*               CPU_IntDisMeasStart(),
N*               CPU_IntDisMeasStop().
N*
N*               This function is an INTERNAL CPU module function & MUST be implemented by application/
N*               BSP function(s) [see Note #1] but SHOULD NOT be called by application function(s).
N*
N* Note(s)     : (1) CPU_TS_TmrRd() is an application/BSP function that MUST be defined by the developer 
N*                   if either of the following CPU features is enabled :
N*
N*                   (a) CPU timestamps
N*                   (b) CPU interrupts disabled time measurements
N*
N*                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
N*                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
N*
N*               (2) (a) Timer count values MUST be returned via word-size-configurable 'CPU_TS_TMR' 
N*                       data type.
N*
N*                       (1) If timer has more bits, truncate timer values' higher-order bits greater 
N*                           than the configured 'CPU_TS_TMR' timestamp timer data type word size.
N*
N*                       (2) Since the timer MUST NOT have less bits than the configured 'CPU_TS_TMR' 
N*                           timestamp timer data type word size; 'CPU_CFG_TS_TMR_SIZE' MUST be 
N*                           configured so that ALL bits in 'CPU_TS_TMR' data type are significant.
N*
N*                           In other words, if timer size is not a binary-multiple of 8-bit octets 
N*                           (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple 
N*                           octet word size SHOULD be configured (e.g. to 16-bits).  However, the 
N*                           minimum supported word size for CPU timestamp timers is 8-bits.
N*
N*                       See also 'cpu_cfg.h   CPU TIMESTAMP CONFIGURATION  Note #2'
N*                              & 'cpu_core.h  CPU TIMESTAMP DATA TYPES     Note #1'.
N*
N*                   (b) Timer SHOULD be an 'up'  counter whose values increase with each time count.
N*
N*                       (1) If timer is a 'down' counter whose values decrease with each time count,
N*                           then the returned timer value MUST be ones-complemented.
N*
N*                   (c) (1) When applicable, the amount of time measured by CPU timestamps is 
N*                           calculated by either of the following equations :
N*
N*                           (A) Time measured  =  Number timer counts  *  Timer period
N*
N*                                   where
N*
N*                                       Number timer counts     Number of timer counts measured 
N*                                       Timer period            Timer's period in some units of 
N*                                                                   (fractional) seconds
N*                                       Time measured           Amount of time measured, in same 
N*                                                                   units of (fractional) seconds 
N*                                                                   as the Timer period
N*
N*                                                  Number timer counts
N*                           (B) Time measured  =  ---------------------
N*                                                    Timer frequency
N*
N*                                   where
N*
N*                                       Number timer counts     Number of timer counts measured
N*                                       Timer frequency         Timer's frequency in some units 
N*                                                                   of counts per second
N*                                       Time measured           Amount of time measured, in seconds
N*
N*                       (2) Timer period SHOULD be less than the typical measured time but MUST be less 
N*                           than the maximum measured time; otherwise, timer resolution inadequate to 
N*                           measure desired times.
N*********************************************************************************************************
N*/
N
N#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
X#if (1u == 1u)
NCPU_TS_TMR  CPU_TS_TmrRd(void);
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         CPU_TSxx_to_uSec()
N*
N* Description : Convert a 32-/64-bit CPU timestamp from timer counts to microseconds.
N*
N* Argument(s) : ts_cnts   CPU timestamp (in timestamp timer counts [see Note #2aA]).
N*
N* Return(s)   : Converted CPU timestamp (in microseconds           [see Note #2aD]).
N*
N* Caller(s)   : Application.
N*
N*               This function is an (optional) CPU module application interface (API) function which 
N*               MAY be implemented by application/BSP function(s) [see Note #1] & MAY be called by 
N*               application function(s).
N*
N* Note(s)     : (1) CPU_TS32_to_uSec()/CPU_TS64_to_uSec() are application/BSP functions that MAY be 
N*                   optionally defined by the developer when either of the following CPU features is 
N*                   enabled :
N*
N*                   (a) CPU timestamps
N*                   (b) CPU interrupts disabled time measurements
N*
N*                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
N*                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
N*
N*               (2) (a) The amount of time measured by CPU timestamps is calculated by either of 
N*                       the following equations :
N*
N*                                                                        10^6 microseconds
N*                       (1) Time measured  =   Number timer counts   *  -------------------  *  Timer period
N*                                                                            1 second
N*
N*                                              Number timer counts       10^6 microseconds
N*                       (2) Time measured  =  ---------------------  *  -------------------
N*                                                Timer frequency             1 second
N*
N*                               where
N*
N*                                   (A) Number timer counts     Number of timer counts measured
N*                                   (B) Timer frequency         Timer's frequency in some units 
N*                                                                   of counts per second
N*                                   (C) Timer period            Timer's period in some units of 
N*                                                                   (fractional)  seconds
N*                                   (D) Time measured           Amount of time measured, 
N*                                                                   in microseconds
N*
N*                   (b) Timer period SHOULD be less than the typical measured time but MUST be less 
N*                       than the maximum measured time; otherwise, timer resolution inadequate to 
N*                       measure desired times.
N*
N*                   (c) Specific implementations may convert any number of CPU_TS32 or CPU_TS64 bits 
N*                       -- up to 32 or 64, respectively -- into microseconds.
N*********************************************************************************************************
N*/
N
N#if (CPU_CFG_TS_32_EN == DEF_ENABLED)
X#if (1u == 1u)
NCPU_INT64U  CPU_TS32_to_uSec(CPU_TS32  ts_cnts);
N#endif
N
N#if (CPU_CFG_TS_64_EN == DEF_ENABLED)
X#if (0u == 1u)
SCPU_INT64U  CPU_TS64_to_uSec(CPU_TS64  ts_cnts);
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CFG_NAME_EN
S#error  "CPU_CFG_NAME_EN                       not #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  DEF_ENABLED ]           "
S#error  "                                [     ||  DEF_DISABLED]           "
S
S#elif  ((CPU_CFG_NAME_EN != DEF_ENABLED ) && \
S        (CPU_CFG_NAME_EN != DEF_DISABLED))
X#elif  ((0u != 1u ) &&         (0u != 0u))
S#error  "CPU_CFG_NAME_EN                 illegally #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  DEF_ENABLED ]           "
S#error  "                                [     ||  DEF_DISABLED]           "
S
S
S#elif   (CPU_CFG_NAME_EN == DEF_ENABLED)
X#elif   (0u == 1u)
S
S#ifndef  CPU_CFG_NAME_SIZE
S#error  "CPU_CFG_NAME_SIZE                     not #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  >=   1]                 "
S#error  "                                [     &&  <= 255]                 "
S
S#elif   (DEF_CHK_VAL(CPU_CFG_NAME_SIZE,            \
S                     1,                            \
S                     DEF_INT_08U_MAX_VAL) != DEF_OK)
X#elif   (DEF_CHK_VAL(CPU_CFG_NAME_SIZE,                                 1,                                                 DEF_INT_08U_MAX_VAL) != DEF_OK)
S#error  "CPU_CFG_NAME_SIZE               illegally #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  >=   1]                 "
S#error  "                                [     &&  <= 255]                 "
S#endif
S
N#endif
N
N
N
N
N#ifndef  CPU_CFG_TS_32_EN
S#error  "CPU_CFG_TS_32_EN                      not #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  DEF_DISABLED]           "
S#error  "                                [     ||  DEF_ENABLED ]           "
S
S#elif  ((CPU_CFG_TS_32_EN != DEF_DISABLED) && \
S        (CPU_CFG_TS_32_EN != DEF_ENABLED ))
X#elif  ((1u != 0u) &&         (1u != 1u ))
S#error  "CPU_CFG_TS_32_EN                illegally #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  DEF_DISABLED]           "
S#error  "                                [     ||  DEF_ENABLED ]           "
S
N#endif
N
N
N#ifndef  CPU_CFG_TS_64_EN
S#error  "CPU_CFG_TS_64_EN                      not #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  DEF_DISABLED]           "
S#error  "                                [     ||  DEF_ENABLED ]           "
S
S#elif  ((CPU_CFG_TS_64_EN != DEF_DISABLED) && \
S        (CPU_CFG_TS_64_EN != DEF_ENABLED ))
X#elif  ((0u != 0u) &&         (0u != 1u ))
S#error  "CPU_CFG_TS_64_EN                illegally #define'd in 'cpu_cfg.h'"
S#error  "                                [MUST be  DEF_DISABLED]           "
S#error  "                                [     ||  DEF_ENABLED ]           "
S
N#endif
N
N                                                                /* Correctly configured in 'cpu_core.h'; DO NOT MODIFY. */
N#ifndef  CPU_CFG_TS_EN
S#error  "CPU_CFG_TS_EN                         not #define'd in 'cpu_core.h'"
S#error  "                                [MUST be  DEF_DISABLED]            "
S#error  "                                [     ||  DEF_ENABLED ]            "
S
S#elif  ((CPU_CFG_TS_EN != DEF_DISABLED) && \
S        (CPU_CFG_TS_EN != DEF_ENABLED ))
X#elif  ((1u != 0u) &&         (1u != 1u ))
S#error  "CPU_CFG_TS_EN                   illegally #define'd in 'cpu_core.h'"
S#error  "                                [MUST be  DEF_DISABLED]            "
S#error  "                                [     ||  DEF_ENABLED ]            "
S
N#endif
N
N
N/*$PAGE*/
N                                                                /* Correctly configured in 'cpu_core.h'; DO NOT MODIFY. */
N#ifndef  CPU_CFG_TS_TMR_EN
S#error  "CPU_CFG_TS_TMR_EN                     not #define'd in 'cpu_core.h'"
S#error  "                                [MUST be  DEF_DISABLED]            "
S#error  "                                [     ||  DEF_ENABLED ]            "
S
S#elif  ((CPU_CFG_TS_TMR_EN != DEF_DISABLED) && \
S        (CPU_CFG_TS_TMR_EN != DEF_ENABLED ))
X#elif  ((1u != 0u) &&         (1u != 1u ))
S#error  "CPU_CFG_TS_TMR_EN               illegally #define'd in 'cpu_core.h'"
S#error  "                                [MUST be  DEF_DISABLED]            "
S#error  "                                [     ||  DEF_ENABLED ]            "
S
S
N#elif   (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
X#elif   (1u == 1u)
N
N#ifndef  CPU_CFG_TS_TMR_SIZE
S#error  "CPU_CFG_TS_TMR_SIZE                   not #define'd in 'cpu_cfg.h'       "
S#error  "                                [MUST be  CPU_WORD_SIZE_08   8-bit timer]"
S#error  "                                [     ||  CPU_WORD_SIZE_16  16-bit timer]"
S#error  "                                [     ||  CPU_WORD_SIZE_32  32-bit timer]"
S#error  "                                [     ||  CPU_WORD_SIZE_64  64-bit timer]"
S
S#elif  ((CPU_CFG_TS_TMR_SIZE != CPU_WORD_SIZE_08) && \
S        (CPU_CFG_TS_TMR_SIZE != CPU_WORD_SIZE_16) && \
S        (CPU_CFG_TS_TMR_SIZE != CPU_WORD_SIZE_32) && \
S        (CPU_CFG_TS_TMR_SIZE != CPU_WORD_SIZE_64))
X#elif  ((4u != 1u) &&         (4u != 2u) &&         (4u != 4u) &&         (4u != 8u))
S#error  "CPU_CFG_TS_TMR_SIZE             illegally #define'd in 'cpu_cfg.h'       "
S#error  "                                [MUST be  CPU_WORD_SIZE_08   8-bit timer]"
S#error  "                                [     ||  CPU_WORD_SIZE_16  16-bit timer]"
S#error  "                                [     ||  CPU_WORD_SIZE_32  32-bit timer]"
S#error  "                                [     ||  CPU_WORD_SIZE_64  64-bit timer]"
N#endif
N
N#endif
N
N
N
N#ifndef  CPU_CFG_INT_DIS_MEAS_EN
S#if 0                                                           /* Optionally configured in 'cpu_cfg.h'; DO NOT MODIFY. */
S#error  "CPU_CFG_INT_DIS_MEAS_EN               not #define'd in 'cpu_cfg.h'"
S#endif
S
N#else
N
N#ifndef  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR
S#error  "CPU_CFG_INT_DIS_MEAS_OVRHD_NBR        not #define'd in 'cpu_cfg.h' "
S#error  "                                [MUST be  >= CPU_TIME_MEAS_NBR_MIN]"
S#error  "                                [     ||  <= CPU_TIME_MEAS_NBR_MAX]"
S
S#elif   (DEF_CHK_VAL(CPU_CFG_INT_DIS_MEAS_OVRHD_NBR, \
S                     CPU_TIME_MEAS_NBR_MIN,          \
S                     CPU_TIME_MEAS_NBR_MAX) != DEF_OK)
X#elif   (((((((!(((1u) >= 0) && ((1u) < 0))) && ((((1u) >= 0) && ((1u) < 0)) || ((1u) < (1u)))) ? 0u : 1u) == 0u) || ((((!(((128u) >= 0) && ((1u) < 0))) && ((((1u) >= 0) && ((128u) < 0)) || ((1u) > (128u)))) ? 0u : 1u) == 0u)) ? 0u : 1u) != 1u)
S#error  "CPU_CFG_INT_DIS_MEAS_OVRHD_NBR  illegally #define'd in 'cpu_cfg.h' "
S#error  "                                [MUST be  >= CPU_TIME_MEAS_NBR_MIN]"
S#error  "                                [     ||  <= CPU_TIME_MEAS_NBR_MAX]"
S
N#endif
N
N#endif
N
N
N
N
N#ifndef  CPU_CFG_LEAD_ZEROS_ASM_PRESENT
S#if 0                                                           /* Optionally configured in 'cpu_cfg.h'; DO NOT MODIFY. */
S#error  "CPU_CFG_LEAD_ZEROS_ASM_PRESENT        not #define'd in 'cpu.h'/'cpu_cfg.h'"
S#endif
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                    LIBRARY CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N                                                                /* See 'cpu_core.h  Note #1a'.                          */
N#if     (LIB_VERSION < 13500u)
X#if     (13500u < 13500u)
S#error  "LIB_VERSION  [SHOULD be >= V1.35.00]"
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of CPU core module include.                      */
N
L 62 "..\ucos\core\os.h" 2
N#include <lib_def.h>
N#include <os_type.h>
L 1 "..\ucos\core\os_type.h" 1
N/*
N************************************************************************************************************************
N*                                                      uC/OS-III
N*                                                 The Real-Time Kernel
N*
N*                                        (c) Copyright 2009, Micrium, Weston, FL
N*                                                  All Rights Reserved
N*                                                    www.Micrium.com
N*
N* File    : OS_TYPE.H
N* By      : JJL
N* Version : V3.00.3
N*
N* LICENSING TERMS:
N* ---------------
N*       uC/OS-III  is provided in source form to registered licensees.  It is illegal to distribute this source
N*       code to any third party unless you receive written permission by an authorized Micrium officer.  
N*
N*       Knowledge of the source code may NOT be used to develop a similar product.
N*
N*       Please help us continue to provide the  Embedded  community with the  finest software  available.   Your 
N*       honesty is greatly appreciated.
N*
N*       You can contact us at www.micrium.com.
N************************************************************************************************************************
N*/
N
N#ifndef   OS_TYPE_H
N#define   OS_TYPE_H
N
N/*
N************************************************************************************************************************
N*                                                 INCLUDE HEADER FILES
N************************************************************************************************************************
N*/
N
N                                                       /*       Description                                    # Bits */
N                                                       /*                                               <recommended> */
N                                                       /* ----------------------------------------------------------- */
N                                                       
Ntypedef   CPU_INT08U      OS_CPU_USAGE;                /* CPU Usage 0..100%                                 <8>/16/32 */
N
Ntypedef   CPU_INT32U      OS_CTR;                      /* Counter,                                                 32 */
N
Ntypedef   CPU_INT32U      OS_CTX_SW_CTR;               /* Counter of context switches,                             32 */
N
Ntypedef   CPU_INT64U      OS_CYCLES;                   /* CPU clock cycles,                                   32/<64> */
N
Ntypedef   CPU_INT32U      OS_FLAGS;                    /* Event flags,                                      8/16/<32> */
N
Ntypedef   CPU_INT32U      OS_IDLE_CTR;                 /* Holds the number of times the idle task runs,       <32>/64 */
N
Ntypedef   CPU_INT16U      OS_MEM_QTY;                  /* Number of memory blocks,                            <16>/32 */
Ntypedef   CPU_INT16U      OS_MEM_SIZE;                 /* Size in bytes of a memory block,                    <16>/32 */
N
Ntypedef   CPU_INT16U      OS_MSG_QTY;                  /* Number of OS_MSGs in the msg pool,                  <16>/32 */
Ntypedef   CPU_INT16U      OS_MSG_SIZE;                 /* Size of messages in number of bytes,                <16>/32 */
N
Ntypedef   CPU_INT08U      OS_NESTING_CTR;              /* Interrupt and scheduler nesting,                  <8>/16/32 */
N
Ntypedef   CPU_INT16U      OS_OBJ_QTY;                  /* Number of kernel objects counter,                   <16>/32 */
Ntypedef   CPU_INT32U      OS_OBJ_TYPE;                 /* Special flag to determine object type,                   32 */
N
Ntypedef   CPU_INT16U      OS_OPT;                      /* Holds function options                              <16>/32 */
N
Ntypedef   CPU_INT08U      OS_PRIO;                     /* Priority of a task,                               <8>/16/32 */
N
Ntypedef   CPU_INT16U      OS_QTY;                      /* Quantity                                            <16>/32 */
N
Ntypedef   CPU_INT32U      OS_RATE_HZ;                  /* Rate in Hertz                                            32 */
N
Ntypedef   CPU_INT32U      OS_REG;                      /* Task register                                     8/16/<32> */
Ntypedef   CPU_INT08U      OS_REG_ID;                   /* Index to task register                            <8>/16/32 */
N
Ntypedef   CPU_INT32U      OS_SEM_CTR;                  /* Semaphore value                                     16/<32> */
N
Ntypedef   CPU_INT08U      OS_STATE;                    /* State variable                                    <8>/16/32 */
N
Ntypedef   CPU_INT08U      OS_STATUS;                   /* Status                                            <8>/16/32 */
N
Ntypedef   CPU_INT32U      OS_TICK;                     /* Clock tick counter                                  <32>/64 */
Ntypedef   CPU_INT16U      OS_TICK_SPOKE_IX;            /* Tick wheel spoke position                         8/<16>/32 */
N
Ntypedef   CPU_INT32U      OS_TMR_TICK;                 /* Holds the current timer tick count,                 <32>/64 */
Ntypedef   CPU_INT16U      OS_TMR_SPOKE_IX;             /* Timer wheel spoke position                        8/<16>/32 */
N
N#endif
L 64 "..\ucos\core\os.h" 2
N#include <os_cpu.h>
L 1 "..\ucos\port\os_cpu.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-III
N*                                          The Real-Time Kernel
N*
N*
N*                           (c) Copyright 2009-2010; Micrium, Inc.; Weston, FL
N*                    All rights reserved.  Protected by international copyright laws.
N*
N*                                           ARM Cortex-M3 Port
N*
N* File      : OS_CPU.H
N* Version   : V3.01.2
N* By        : JJL
N*
N* LICENSING TERMS:
N* ---------------
N*             uC/OS-III is provided in source form to registered licensees ONLY.  It is 
N*             illegal to distribute this source code to any third party unless you receive 
N*             written permission by an authorized Micrium representative.  Knowledge of 
N*             the source code may NOT be used to develop a similar product.
N*
N*             Please help us continue to provide the Embedded community with the finest
N*             software available.  Your honesty is greatly appreciated.
N*
N*             You can contact us at www.micrium.com.
N*
N* For       : ARMv7M Cortex-M3
N* Mode      : Thumb2
N* Toolchain : IAR EWARM
N*********************************************************************************************************
N*/
N
N#ifndef  OS_CPU_H
N#define  OS_CPU_H
N
N#ifdef   OS_CPU_GLOBALS
S#define  OS_CPU_EXT
N#else
N#define  OS_CPU_EXT  extern
N#endif
N
N/*
N*********************************************************************************************************
N*                                               MACROS
N*********************************************************************************************************
N*/
N
N#ifndef  NVIC_INT_CTRL
N#define  NVIC_INT_CTRL                      *((CPU_REG32 *)0xE000ED04)
N#endif
N
N#ifndef  NVIC_PENDSVSET
N#define  NVIC_PENDSVSET                                    0x10000000
N#endif
N
N#define  OS_TASK_SW()               NVIC_INT_CTRL = NVIC_PENDSVSET
N#define  OSIntCtxSw()               NVIC_INT_CTRL = NVIC_PENDSVSET
N
N
N/*
N*********************************************************************************************************
N*                                       TIMESTAMP CONFIGURATION
N*
N* Note(s) : (1) OS_TS_GET() is generally defined as CPU_TS_Get32() to allow CPU timestamp timer to be of
N*               any data type size.
N*
N*           (2) For architectures that provide 32-bit or higher precision free running counters 
N*               (i.e. cycle count registers):
N*
N*               (a) OS_TS_GET() may be defined as CPU_TS_TmrRd() to improve performance when retrieving
N*                   the timestamp.
N*
N*               (b) CPU_TS_TmrRd() MUST be configured to be greater or equal to 32-bits to avoid
N*                   truncation of TS.
N*********************************************************************************************************
N*/
N
N#if      OS_CFG_TS_EN == 1u
X#if      1u == 1u
N#define  OS_TS_GET()               (CPU_TS)CPU_TS_TmrRd()   /* See Note #2a.                                          */
N#else
S#define  OS_TS_GET()               (CPU_TS)0u
N#endif
N
N#if (CPU_CFG_TS_32_EN    == DEF_ENABLED) && \
N    (CPU_CFG_TS_TMR_SIZE  < CPU_WORD_SIZE_32)
X#if (1u    == 1u) &&     (4u  < 4u)
S                                                            /* CPU_CFG_TS_TMR_SIZE MUST be >= 32-bit (see Note #2b).  */
S#error  "cpu_cfg.h, CPU_CFG_TS_TMR_SIZE MUST be >= CPU_WORD_SIZE_32"
N#endif
N
N
N/*
N*********************************************************************************************************
N*                              OS TICK INTERRUPT PRIORITY CONFIGURATION
N*
N* Note(s) : (1) For systems that don't need any high, real-time priority interrupts; the tick interrupt
N*               should be configured as the highest priority interrupt but won't adversely affect system
N*               operations.
N*
N*           (2) For systems that need one or more high, real-time interrupts; these should be configured
N*               higher than the tick interrupt which MAY delay execution of the tick interrupt.
N*
N*               (a) If the higher priority interrupts do NOT continually consume CPU cycles but only
N*                   occasionally delay tick interrupts, then the real-time interrupts can successfully
N*                   handle their intermittent/periodic events with the system not losing tick interrupts
N*                   but only increasing the jitter.
N*
N*               (b) If the higher priority interrupts consume enough CPU cycles to continually delay the
N*                   tick interrupt, then the CPU/system is most likely over-burdened & can't be expected
N*                   to handle all its interrupts/tasks. The system time reference gets compromised as a
N*                   result of losing tick interrupts.
N*********************************************************************************************************
N*/
N
N#define  OS_CPU_CFG_SYSTICK_PRIO           0u
N
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
NOS_CPU_EXT  CPU_STK  *OS_CPU_ExceptStkBase;
Xextern  CPU_STK  *OS_CPU_ExceptStkBase;
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid  OSStartHighRdy       (void);
Nvoid  OS_CPU_PendSVHandler (void);
N//void  OS_CPU_SysTickHandler(void);
N//void  OS_CPU_SysTickInit   (CPU_INT32U  cnts);
N
N#endif
L 65 "..\ucos\core\os.h" 2
N
N
N/*
N************************************************************************************************************************
N*                                               CRITICAL SECTION HANDLING
N************************************************************************************************************************
N*/
N
N
N#if      OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u && defined(CPU_CFG_INT_DIS_MEAS_EN)
X#if      1u > 0u && 1L
N#define  OS_SCHED_LOCK_TIME_MEAS_START()    OS_SchedLockTimeMeasStart()
N#else
S#define  OS_SCHED_LOCK_TIME_MEAS_START()
N#endif
N
N
N#if      OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u && defined(CPU_CFG_INT_DIS_MEAS_EN)
X#if      1u > 0u && 1L
N#define  OS_SCHED_LOCK_TIME_MEAS_STOP()     OS_SchedLockTimeMeasStop()
N#else
S#define  OS_SCHED_LOCK_TIME_MEAS_STOP()
N#endif
N
N#if OS_CFG_ISR_POST_DEFERRED_EN > 0u                             /* Deferred ISR Posts ------------------------------ */
X#if 1u > 0u                              
N                                                                 /* Lock the scheduler                                */
N#define  OS_CRITICAL_ENTER()                                       \
N         do {                                                      \
N             CPU_CRITICAL_ENTER();                                 \
N             OSSchedLockNestingCtr++;                              \
N             if (OSSchedLockNestingCtr == 1u) {                    \
N                 OS_SCHED_LOCK_TIME_MEAS_START();                  \
N             }                                                     \
N             CPU_CRITICAL_EXIT();                                  \
N         } while (0)
X#define  OS_CRITICAL_ENTER()                                                do {                                                                   CPU_CRITICAL_ENTER();                                              OSSchedLockNestingCtr++;                                           if (OSSchedLockNestingCtr == 1u) {                                     OS_SCHED_LOCK_TIME_MEAS_START();                               }                                                                  CPU_CRITICAL_EXIT();                                           } while (0)
N                                                                 /* Lock the scheduler but re-enable interrupts       */
N#define  OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT()                     \
N         do {                                                      \
N             OSSchedLockNestingCtr++;                              \
N                                                                   \
N             if (OSSchedLockNestingCtr == 1u) {                    \
N                 OS_SCHED_LOCK_TIME_MEAS_START();                  \
N             }                                                     \
N             CPU_CRITICAL_EXIT();                                  \
N         } while (0)
X#define  OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT()                              do {                                                                   OSSchedLockNestingCtr++;                                                                                                              if (OSSchedLockNestingCtr == 1u) {                                     OS_SCHED_LOCK_TIME_MEAS_START();                               }                                                                  CPU_CRITICAL_EXIT();                                           } while (0)
N
N                                                                 /* Scheduling occurs only if an interrupt occurs     */
N#define  OS_CRITICAL_EXIT()                                        \
N         do {                                                      \
N             CPU_CRITICAL_ENTER();                                 \
N             OSSchedLockNestingCtr--;                              \
N             if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {     \
N                 OS_SCHED_LOCK_TIME_MEAS_STOP();                   \
N                 if (OSIntQNbrEntries > (OS_OBJ_QTY)0) {           \
N                     CPU_CRITICAL_EXIT();                          \
N                     OS_Sched0();                                  \
N                 } else {                                          \
N                     CPU_CRITICAL_EXIT();                          \
N                 }                                                 \
N             } else {                                              \
N                 CPU_CRITICAL_EXIT();                              \
N             }                                                     \
N         } while (0)
X#define  OS_CRITICAL_EXIT()                                                 do {                                                                   CPU_CRITICAL_ENTER();                                              OSSchedLockNestingCtr--;                                           if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {                      OS_SCHED_LOCK_TIME_MEAS_STOP();                                    if (OSIntQNbrEntries > (OS_OBJ_QTY)0) {                                CPU_CRITICAL_EXIT();                                               OS_Sched0();                                                   } else {                                                               CPU_CRITICAL_EXIT();                                           }                                                              } else {                                                               CPU_CRITICAL_EXIT();                                           }                                                              } while (0)
N
N#define  OS_CRITICAL_EXIT_NO_SCHED()                               \
N         do {                                                      \
N             CPU_CRITICAL_ENTER();                                 \
N             OSSchedLockNestingCtr--;                              \
N             if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {     \
N                 OS_SCHED_LOCK_TIME_MEAS_STOP();                   \
N             }                                                     \
N             CPU_CRITICAL_EXIT();                                  \
N         } while (0)
X#define  OS_CRITICAL_EXIT_NO_SCHED()                                        do {                                                                   CPU_CRITICAL_ENTER();                                              OSSchedLockNestingCtr--;                                           if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {                      OS_SCHED_LOCK_TIME_MEAS_STOP();                                }                                                                  CPU_CRITICAL_EXIT();                                           } while (0)
N
N
N#else                                                            /* Direct ISR Posts -------------------------------- */
S
S
S#define  OS_CRITICAL_ENTER()                    CPU_CRITICAL_ENTER()
S
S#define  OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT()
S
S#define  OS_CRITICAL_EXIT()                     CPU_CRITICAL_EXIT()
S
S#define  OS_CRITICAL_EXIT_NO_SCHED()            CPU_CRITICAL_EXIT()
S
N#endif
N
N/*
N************************************************************************************************************************
N*                                                     MISCELLANEOUS
N************************************************************************************************************************
N*/
N
N#ifdef   OS_GLOBALS
S#define  OS_EXT
N#else
N#define  OS_EXT  extern
N#endif
N
N
N#define  OS_PRIO_TBL_SIZE          (((OS_CFG_PRIO_MAX - 1u) / DEF_INT_CPU_NBR_BITS) + 1u)
N
N#define  OS_MSG_EN                 (((OS_CFG_TASK_Q_EN > 0u) || (OS_CFG_Q_EN > 0u)) ? 1u : 0u)
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                                   # D E F I N E S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
N/*
N========================================================================================================================
N*                                                      TASK STATUS
N========================================================================================================================
N*/
N
N#define  OS_STATE_OS_STOPPED                    (OS_STATE)(0u)
N#define  OS_STATE_OS_RUNNING                    (OS_STATE)(1u)
N
N#define  OS_STATE_NOT_RDY                    (CPU_BOOLEAN)(0u)
N#define  OS_STATE_RDY                        (CPU_BOOLEAN)(1u)
N
N
N                                                                /* ------------------- TASK STATES ------------------ */
N#define  OS_TASK_STATE_BIT_DLY               (OS_STATE)(0x01u)  /*   /-------- SUSPENDED bit                          */
N                                                                /*   |                                                */
N#define  OS_TASK_STATE_BIT_PEND              (OS_STATE)(0x02u)  /*   | /-----  PEND      bit                          */
N                                                                /*   | |                                              */
N#define  OS_TASK_STATE_BIT_SUSPENDED         (OS_STATE)(0x04u)  /*   | | /---  Delayed/Timeout bit                    */
N                                                                /*   | | |                                            */
N                                                                /*   V V V                                            */
N
N#define  OS_TASK_STATE_RDY                    (OS_STATE)(  0u)  /*   0 0 0     Ready                                  */
N#define  OS_TASK_STATE_DLY                    (OS_STATE)(  1u)  /*   0 0 1     Delayed or Timeout                     */
N#define  OS_TASK_STATE_PEND                   (OS_STATE)(  2u)  /*   0 1 0     Pend                                   */
N#define  OS_TASK_STATE_PEND_TIMEOUT           (OS_STATE)(  3u)  /*   0 1 1     Pend + Timeout                         */
N#define  OS_TASK_STATE_SUSPENDED              (OS_STATE)(  4u)  /*   1 0 0     Suspended                              */
N#define  OS_TASK_STATE_DLY_SUSPENDED          (OS_STATE)(  5u)  /*   1 0 1     Suspended + Delayed or Timeout         */
N#define  OS_TASK_STATE_PEND_SUSPENDED         (OS_STATE)(  6u)  /*   1 1 0     Suspended + Pend                       */
N#define  OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED (OS_STATE)(  7u)  /*   1 1 1     Suspended + Pend + Timeout             */
N#define  OS_TASK_STATE_DEL                    (OS_STATE)(255u)
N
N                                                                /* ----------------- PENDING ON ... ----------------- */
N#define  OS_TASK_PEND_ON_NOTHING              (OS_STATE)(  0u)  /* Pending on nothing                                 */
N#define  OS_TASK_PEND_ON_FLAG                 (OS_STATE)(  1u)  /* Pending on event flag group                        */
N#define  OS_TASK_PEND_ON_TASK_Q               (OS_STATE)(  2u)  /* Pending on message to be sent to task              */
N#define  OS_TASK_PEND_ON_MULTI                (OS_STATE)(  3u)  /* Pending on multiple semaphores and/or queues       */
N#define  OS_TASK_PEND_ON_MUTEX                (OS_STATE)(  4u)  /* Pending on mutual exclusion semaphore              */
N#define  OS_TASK_PEND_ON_Q                    (OS_STATE)(  5u)  /* Pending on queue                                   */
N#define  OS_TASK_PEND_ON_SEM                  (OS_STATE)(  6u)  /* Pending on semaphore                               */
N#define  OS_TASK_PEND_ON_TASK_SEM             (OS_STATE)(  7u)  /* Pending on signal  to be sent to task              */
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                    TASK PEND STATUS
N*                                      (Status codes for OS_TCBs field .PendStatus)
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_STATUS_PEND_OK                   (OS_STATUS)(  0u)  /* Pending status OK, !pending, or pending complete   */
N#define  OS_STATUS_PEND_ABORT                (OS_STATUS)(  1u)  /* Pending aborted                                    */
N#define  OS_STATUS_PEND_DEL                  (OS_STATUS)(  2u)  /* Pending object deleted                             */
N#define  OS_STATUS_PEND_TIMEOUT              (OS_STATUS)(  3u)  /* Pending timed out                                  */
N
N/*
N========================================================================================================================
N*                                                   OS OBJECT TYPES
N*
N* Note(s) : (1) OS_OBJ_TYPE_&&& #define values specifically chosen as ASCII representations of the kernel
N*               object types.  Memory displays of kernel objects will display the kernel object TYPEs with
N*               their chosen ASCII names.
N========================================================================================================================
N*/
N
N#define  OS_OBJ_TYPE_NONE                    (OS_OBJ_TYPE)CPU_TYPE_CREATE('N', 'O', 'N', 'E')
N#define  OS_OBJ_TYPE_FLAG                    (OS_OBJ_TYPE)CPU_TYPE_CREATE('F', 'L', 'A', 'G')
N#define  OS_OBJ_TYPE_MEM                     (OS_OBJ_TYPE)CPU_TYPE_CREATE('M', 'E', 'M', ' ')
N#define  OS_OBJ_TYPE_MUTEX                   (OS_OBJ_TYPE)CPU_TYPE_CREATE('M', 'U', 'T', 'X')
N#define  OS_OBJ_TYPE_Q                       (OS_OBJ_TYPE)CPU_TYPE_CREATE('Q', 'U', 'E', 'U')
N#define  OS_OBJ_TYPE_SEM                     (OS_OBJ_TYPE)CPU_TYPE_CREATE('S', 'E', 'M', 'A')
N#define  OS_OBJ_TYPE_TASK_MSG                (OS_OBJ_TYPE)CPU_TYPE_CREATE('T', 'M', 'S', 'G')
N#define  OS_OBJ_TYPE_TASK_SIGNAL             (OS_OBJ_TYPE)CPU_TYPE_CREATE('T', 'S', 'I', 'G')
N#define  OS_OBJ_TYPE_TICK                    (OS_OBJ_TYPE)CPU_TYPE_CREATE('T', 'I', 'C', 'K')
N#define  OS_OBJ_TYPE_TMR                     (OS_OBJ_TYPE)CPU_TYPE_CREATE('T', 'M', 'R', ' ')
N
N/*
N========================================================================================================================
N*                                           Possible values for 'opt' argument
N========================================================================================================================
N*/
N
N#define  OS_OPT_NONE                         (OS_OPT)(0x0000u)
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                    DELETE OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_OPT_DEL_NO_PEND                  (OS_OPT)(0x0000u)
N#define  OS_OPT_DEL_ALWAYS                   (OS_OPT)(0x0001u)
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                     PEND OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_OPT_PEND_FLAG_MASK               (OS_OPT)(0x000Fu)
N#define  OS_OPT_PEND_FLAG_CLR_ALL            (OS_OPT)(0x0001u)  /* Wait for ALL    the bits specified to be CLR       */
N#define  OS_OPT_PEND_FLAG_CLR_AND            (OS_OPT)(0x0001u)
N
N#define  OS_OPT_PEND_FLAG_CLR_ANY            (OS_OPT)(0x0002u)  /* Wait for ANY of the bits specified to be CLR       */
N#define  OS_OPT_PEND_FLAG_CLR_OR             (OS_OPT)(0x0002u)
N
N#define  OS_OPT_PEND_FLAG_SET_ALL            (OS_OPT)(0x0004u)  /* Wait for ALL    the bits specified to be SET       */
N#define  OS_OPT_PEND_FLAG_SET_AND            (OS_OPT)(0x0004u)
N
N#define  OS_OPT_PEND_FLAG_SET_ANY            (OS_OPT)(0x0008u)  /* Wait for ANY of the bits specified to be SET       */
N#define  OS_OPT_PEND_FLAG_SET_OR             (OS_OPT)(0x0008u)
N
N#define  OS_OPT_PEND_FLAG_CONSUME            (OS_OPT)(0x0100u)  /* Consume the flags if condition(s) satisfied        */
N
N
N#define  OS_OPT_PEND_BLOCKING                (OS_OPT)(0x0000u)
N#define  OS_OPT_PEND_NON_BLOCKING            (OS_OPT)(0x8000u)
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                  PEND ABORT OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_OPT_PEND_ABORT_1                 (OS_OPT)(0x0000u)  /* Pend abort a single waiting task                   */
N#define  OS_OPT_PEND_ABORT_ALL               (OS_OPT)(0x0100u)  /* Pend abort ALL tasks waiting                       */
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                     POST OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N
N#define  OS_OPT_POST_NONE                    (OS_OPT)(0x0000u)
N
N#define  OS_OPT_POST_FLAG_SET                (OS_OPT)(0x0000u)
N#define  OS_OPT_POST_FLAG_CLR                (OS_OPT)(0x0001u)
N
N#define  OS_OPT_POST_FIFO                    (OS_OPT)(0x0000u)  /* Default is to post FIFO                            */
N#define  OS_OPT_POST_LIFO                    (OS_OPT)(0x0010u)  /* Post to highest priority task waiting              */
N#define  OS_OPT_POST_1                       (OS_OPT)(0x0000u)  /* Post message to highest priority task waiting      */
N#define  OS_OPT_POST_ALL                     (OS_OPT)(0x0200u)  /* Broadcast message to ALL tasks waiting             */
N
N#define  OS_OPT_POST_NO_SCHED                (OS_OPT)(0x8000u)  /* Do not call the scheduler if this is selected      */
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                     TASK OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_OPT_TASK_NONE                    (OS_OPT)(0x0000u)  /* No option selected                                 */
N#define  OS_OPT_TASK_STK_CHK                 (OS_OPT)(0x0001u)  /* Enable stack checking for the task                 */
N#define  OS_OPT_TASK_STK_CLR                 (OS_OPT)(0x0002u)  /* Clear the stack when the task is create            */
N#define  OS_OPT_TASK_SAVE_FP                 (OS_OPT)(0x0004u)  /* Save the contents of any floating-point registers  */
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                     TIME OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_OPT_TIME_DLY                             DEF_BIT_NONE
N#define  OS_OPT_TIME_TIMEOUT                ((OS_OPT)DEF_BIT_01)
N#define  OS_OPT_TIME_MATCH                  ((OS_OPT)DEF_BIT_02)
N#define  OS_OPT_TIME_PERIODIC               ((OS_OPT)DEF_BIT_03)
N
N#define  OS_OPT_TIME_HMSM_STRICT            ((OS_OPT)DEF_BIT_NONE) //默认项的设置！
N#define  OS_OPT_TIME_HMSM_NON_STRICT        ((OS_OPT)DEF_BIT_04)
N
N#define  OS_OPT_TIME_MASK                   ((OS_OPT)(OS_OPT_TIME_DLY      | \
N                                                      OS_OPT_TIME_TIMEOUT  | \
N                                                      OS_OPT_TIME_PERIODIC | \
N                                                      OS_OPT_TIME_MATCH))
X#define  OS_OPT_TIME_MASK                   ((OS_OPT)(OS_OPT_TIME_DLY      |                                                       OS_OPT_TIME_TIMEOUT  |                                                       OS_OPT_TIME_PERIODIC |                                                       OS_OPT_TIME_MATCH))
N
N#define  OS_OPT_TIME_OPTS_MASK                       (OS_OPT_TIME_DLY            | \
N                                                      OS_OPT_TIME_TIMEOUT        | \
N                                                      OS_OPT_TIME_PERIODIC       | \
N                                                      OS_OPT_TIME_MATCH          | \
N                                                      OS_OPT_TIME_HMSM_NON_STRICT)
X#define  OS_OPT_TIME_OPTS_MASK                       (OS_OPT_TIME_DLY            |                                                       OS_OPT_TIME_TIMEOUT        |                                                       OS_OPT_TIME_PERIODIC       |                                                       OS_OPT_TIME_MATCH          |                                                       OS_OPT_TIME_HMSM_NON_STRICT)
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                    TIMER OPTIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_OPT_TMR_NONE                          (OS_OPT)(0u)  /* No option selected                                 */
N
N#define  OS_OPT_TMR_ONE_SHOT                      (OS_OPT)(1u)  /* Timer will not auto restart when it expires        */
N#define  OS_OPT_TMR_PERIODIC                      (OS_OPT)(2u)  /* Timer will     auto restart when it expires        */
N
N#define  OS_OPT_TMR_CALLBACK                      (OS_OPT)(3u)  /* OSTmrStop() option to call 'callback' w/ timer arg */
N#define  OS_OPT_TMR_CALLBACK_ARG                  (OS_OPT)(4u)  /* OSTmrStop() option to call 'callback' w/ new   arg */
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                     TIMER STATES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#define  OS_TMR_STATE_UNUSED                    (OS_STATE)(0u)
N#define  OS_TMR_STATE_STOPPED                   (OS_STATE)(1u)
N#define  OS_TMR_STATE_RUNNING                   (OS_STATE)(2u)
N#define  OS_TMR_STATE_COMPLETED                 (OS_STATE)(3u)
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                       PRIORITY
N------------------------------------------------------------------------------------------------------------------------
N*/
N                                                                    /* Dflt prio to init task TCB                     */
N#define  OS_PRIO_INIT                       (OS_PRIO)(OS_CFG_PRIO_MAX)
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                 TIMER TICK THRESHOLDS
N------------------------------------------------------------------------------------------------------------------------
N*/
N                                                                    /* Threshold to init previous tick time           */
N#define  OS_TICK_TH_INIT                    (OS_TICK)(DEF_BIT       ((sizeof(OS_TICK) * DEF_OCTET_NBR_BITS) - 1u))
N
N                                                                    /* Threshold to check if tick time already ready  */
N#define  OS_TICK_TH_RDY                     (OS_TICK)(DEF_BIT_FIELD(((sizeof(OS_TICK) * DEF_OCTET_NBR_BITS) / 2u), \
N                                                                    ((sizeof(OS_TICK) * DEF_OCTET_NBR_BITS) / 2u)))
X#define  OS_TICK_TH_RDY                     (OS_TICK)(DEF_BIT_FIELD(((sizeof(OS_TICK) * DEF_OCTET_NBR_BITS) / 2u),                                                                     ((sizeof(OS_TICK) * DEF_OCTET_NBR_BITS) / 2u)))
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                                E N U M E R A T I O N S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                      ERROR CODES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Ntypedef  enum  os_err {
N    OS_ERR_NONE                      =     0u,
N
N    OS_ERR_A                         = 10000u,
N    OS_ERR_ACCEPT_ISR                = 10001u,
N
N    OS_ERR_B                         = 11000u,
N
N    OS_ERR_C                         = 12000u,
N    OS_ERR_CREATE_ISR                = 12001u,
N
N    OS_ERR_D                         = 13000u,
N    OS_ERR_DEL_ISR                   = 13001u,
N
N    OS_ERR_E                         = 14000u,
N
N    OS_ERR_F                         = 15000u,
N    OS_ERR_FATAL_RETURN              = 15001u,
N
N    OS_ERR_FLAG_GRP_DEPLETED         = 15101u,
N    OS_ERR_FLAG_NOT_RDY              = 15102u,
N    OS_ERR_FLAG_PEND_OPT             = 15103u,
N    OS_ERR_FLUSH_ISR                 = 15104u,
N
N    OS_ERR_G                         = 16000u,
N
N    OS_ERR_H                         = 17000u,
N
N    OS_ERR_I                         = 18000u,
N    OS_ERR_ILLEGAL_CREATE_RUN_TIME   = 18001u,
N    OS_ERR_INT_Q                     = 18002u,
N    OS_ERR_INT_Q_FULL                = 18003u,
N    OS_ERR_INT_Q_SIZE                = 18004u,
N
N    OS_ERR_J                         = 19000u,
N
N    OS_ERR_K                         = 20000u,
N
N    OS_ERR_L                         = 21000u,
N    OS_ERR_LOCK_NESTING_OVF          = 21001u,
N
N    OS_ERR_M                         = 22000u,
N
N    OS_ERR_MEM_CREATE_ISR            = 22201u,
N    OS_ERR_MEM_FULL                  = 22202u,
N    OS_ERR_MEM_INVALID_P_ADDR        = 22203u,
N    OS_ERR_MEM_INVALID_BLKS          = 22204u,
N    OS_ERR_MEM_INVALID_PART          = 22205u,
N    OS_ERR_MEM_INVALID_P_BLK         = 22206u,
N    OS_ERR_MEM_INVALID_P_MEM         = 22207u,
N    OS_ERR_MEM_INVALID_P_DATA        = 22208u,
N    OS_ERR_MEM_INVALID_SIZE          = 22209u,
N    OS_ERR_MEM_NO_FREE_BLKS          = 22210u,
N
N    OS_ERR_MSG_POOL_EMPTY            = 22301u,
N    OS_ERR_MSG_POOL_NULL_PTR         = 22302u,
N
N    OS_ERR_MUTEX_NOT_OWNER           = 22401u,
N    OS_ERR_MUTEX_OWNER               = 22402u,
N    OS_ERR_MUTEX_NESTING             = 22403u,
N
N    OS_ERR_N                         = 23000u,
N    OS_ERR_NAME                      = 23001u,
N
N    OS_ERR_O                         = 24000u,
N    OS_ERR_OBJ_CREATED               = 24001u,
N    OS_ERR_OBJ_DEL                   = 24002u,
N    OS_ERR_OBJ_PTR_NULL              = 24003u,
N    OS_ERR_OBJ_TYPE                  = 24004u,
N
N    OS_ERR_OPT_INVALID               = 24101u,
N
N    OS_ERR_OS_NOT_RUNNING            = 24201u,
N    OS_ERR_OS_RUNNING                = 24202u,
N
N    OS_ERR_P                         = 25000u,
N    OS_ERR_PEND_ABORT                = 25001u,
N    OS_ERR_PEND_ABORT_ISR            = 25002u,
N    OS_ERR_PEND_ABORT_NONE           = 25003u,
N    OS_ERR_PEND_ABORT_SELF           = 25004u,
N    OS_ERR_PEND_DEL                  = 25005u,
N    OS_ERR_PEND_ISR                  = 25006u,
N    OS_ERR_PEND_LOCKED               = 25007u,
N    OS_ERR_PEND_WOULD_BLOCK          = 25008u,
N
N    OS_ERR_POST_NULL_PTR             = 25101u,
N    OS_ERR_POST_ISR                  = 25102u,
N
N    OS_ERR_PRIO_EXIST                = 25201u,
N    OS_ERR_PRIO                      = 25202u,
N    OS_ERR_PRIO_INVALID              = 25203u,
N
N    OS_ERR_PTR_INVALID               = 25301u,
N
N    OS_ERR_Q                         = 26000u,
N    OS_ERR_Q_FULL                    = 26001u,
N    OS_ERR_Q_EMPTY                   = 26002u,
N    OS_ERR_Q_MAX                     = 26003u,
N    OS_ERR_Q_SIZE                    = 26004u,
N
N    OS_ERR_R                         = 27000u,
N    OS_ERR_REG_ID_INVALID            = 27001u,
N    OS_ERR_ROUND_ROBIN_1             = 27002u,
N    OS_ERR_ROUND_ROBIN_DISABLED      = 27003u,
N
N    OS_ERR_S                         = 28000u,
N    OS_ERR_SCHED_INVALID_TIME_SLICE  = 28001u,
N    OS_ERR_SCHED_LOCK_ISR            = 28002u,
N    OS_ERR_SCHED_LOCKED              = 28003u,
N    OS_ERR_SCHED_NOT_LOCKED          = 28004u,
N    OS_ERR_SCHED_UNLOCK_ISR          = 28005u,
N
N    OS_ERR_SEM_OVF                   = 28101u,
N    OS_ERR_SET_ISR                   = 28102u,
N
N    OS_ERR_STAT_RESET_ISR            = 28201u,
N    OS_ERR_STATE_INVALID             = 28202u,
N    OS_ERR_STATUS_INVALID            = 28203u,
N    OS_ERR_STK_INVALID               = 28204u,
N    OS_ERR_STK_SIZE_INVALID          = 28205u,
N    OS_ERR_STK_LIMIT_INVALID         = 28206u,
N
N    OS_ERR_T                         = 29000u,
N    OS_ERR_TASK_CHANGE_PRIO_ISR      = 29001u,
N    OS_ERR_TASK_CREATE_ISR           = 29002u,
N    OS_ERR_TASK_DEL                  = 29003u,
N    OS_ERR_TASK_DEL_IDLE             = 29004u,
N    OS_ERR_TASK_DEL_INVALID          = 29005u,
N    OS_ERR_TASK_DEL_ISR              = 29006u,
N    OS_ERR_TASK_INVALID              = 29007u,
N    OS_ERR_TASK_NO_MORE_TCB          = 29008u,
N    OS_ERR_TASK_NOT_DLY              = 29009u,
N    OS_ERR_TASK_NOT_EXIST            = 29010u,
N    OS_ERR_TASK_NOT_SUSPENDED        = 29011u,
N    OS_ERR_TASK_OPT                  = 29012u,
N    OS_ERR_TASK_RESUME_ISR           = 29013u,
N    OS_ERR_TASK_RESUME_PRIO          = 29014u,
N    OS_ERR_TASK_RESUME_SELF          = 29015u,
N    OS_ERR_TASK_STK_CHK_ISR          = 29016u,
N    OS_ERR_TASK_SUSPENDED            = 29017u,
N    OS_ERR_TASK_SUSPEND_IDLE         = 29018u,
N    OS_ERR_TASK_SUSPEND_INT_HANDLER  = 29019u,
N    OS_ERR_TASK_SUSPEND_ISR          = 29020u,
N    OS_ERR_TASK_SUSPEND_PRIO         = 29021u,
N    OS_ERR_TASK_WAITING              = 29022u,
N
N    OS_ERR_TCB_INVALID               = 29101u,
N
N    OS_ERR_TICK_WHEEL_SIZE           = 29201u,
N
N    OS_ERR_TIME_DLY_ISR              = 29301u,
N    OS_ERR_TIME_DLY_RESUME_ISR       = 29302u,
N    OS_ERR_TIME_GET_ISR              = 29303u,
N    OS_ERR_TIME_INVALID_HOURS        = 29304u,
N    OS_ERR_TIME_INVALID_MINUTES      = 29305u,
N    OS_ERR_TIME_INVALID_SECONDS      = 29306u,
N    OS_ERR_TIME_INVALID_MILLISECONDS = 29307u,
N    OS_ERR_TIME_NOT_DLY              = 29308u,
N    OS_ERR_TIME_SET_ISR              = 29309u,
N    OS_ERR_TIME_ZERO_DLY             = 29310u,
N
N    OS_ERR_TIMEOUT                   = 29401u,
N
N    OS_ERR_TMR_INACTIVE              = 29501u,
N    OS_ERR_TMR_INVALID_DEST          = 29502u,
N    OS_ERR_TMR_INVALID_DLY           = 29503u,
N    OS_ERR_TMR_INVALID_PERIOD        = 29504u,
N    OS_ERR_TMR_INVALID_STATE         = 29505u,
N    OS_ERR_TMR_INVALID               = 29506u,
N    OS_ERR_TMR_ISR                   = 29507u,
N    OS_ERR_TMR_NO_CALLBACK           = 29508u,
N    OS_ERR_TMR_NON_AVAIL             = 29509u,
N    OS_ERR_TMR_STK_INVALID           = 29510u,
N    OS_ERR_TMR_STOPPED               = 29511u,
N
N    OS_ERR_U                         = 30000u,
N
N    OS_ERR_V                         = 31000u,
N
N    OS_ERR_W                         = 32000u,
N
N    OS_ERR_X                         = 33000u,
N
N    OS_ERR_Y                         = 34000u,
N    OS_ERR_YIELD_ISR                 = 34001u,
N
N    OS_ERR_Z                         = 35000u
N} OS_ERR;
N
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                                  D A T A   T Y P E S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
Ntypedef  struct  os_flag_grp         OS_FLAG_GRP;
N
Ntypedef  struct  os_mem              OS_MEM;
N
Ntypedef  struct  os_msg              OS_MSG;
Ntypedef  struct  os_msg_pool         OS_MSG_POOL;
Ntypedef  struct  os_msg_q            OS_MSG_Q;
N
Ntypedef  struct  os_mutex            OS_MUTEX;
N
Ntypedef  struct  os_int_q            OS_INT_Q;
N
Ntypedef  struct  os_q                OS_Q;
N
Ntypedef  struct  os_sem              OS_SEM;
N
N
Ntypedef  void                      (*OS_TASK_PTR)(void *p_arg);
N
Ntypedef  struct  os_tcb              OS_TCB;
N
Ntypedef  struct  os_rdy_list         OS_RDY_LIST;
N
Ntypedef  struct  os_tick_spoke       OS_TICK_SPOKE;
N
Ntypedef  void                      (*OS_TMR_CALLBACK_PTR)(void *p_tmr, void *p_arg);
Ntypedef  struct  os_tmr              OS_TMR;
Ntypedef  struct  os_tmr_spoke        OS_TMR_SPOKE;
N
N
Ntypedef  struct  os_pend_data        OS_PEND_DATA;
Ntypedef  struct  os_pend_list        OS_PEND_LIST;
Ntypedef  struct  os_pend_obj         OS_PEND_OBJ;
N
N#if OS_CFG_APP_HOOKS_EN > 0u
X#if 1u > 0u
Ntypedef  void                      (*OS_APP_HOOK_VOID)(void);
Ntypedef  void                      (*OS_APP_HOOK_TCB)(OS_TCB *p_tcb);
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                          D A T A   S T R U C T U R E S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                    ISR POST DATA
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
X#if 1u > 0u
Nstruct  os_int_q {
N    OS_OBJ_TYPE          Type;                              /* Type of object placed in the circular list             */
N    OS_INT_Q            *NextPtr;                           /* Pointer to next OS_INT_Q in  circular list             */
N    void                *ObjPtr;                            /* Pointer to object placed in the queue                  */
N    void                *MsgPtr;                            /* Pointer to message if posting to a message queue       */
N    OS_MSG_SIZE          MsgSize;                           /* Message Size       if posting to a message queue       */
N    OS_FLAGS             Flags;                             /* Value of flags if posting to an event flag group       */
N    OS_OPT               Opt;                               /* Post Options                                           */
N    CPU_TS               TS;                                /* Timestamp                                              */
N};
N#endif
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                      READY LIST
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_rdy_list {
N    OS_TCB              *HeadPtr;                           /* Pointer to task that will run at selected priority     */
N    OS_TCB              *TailPtr;                           /* Pointer to last task          at selected priority     */
N    OS_OBJ_QTY           NbrEntries;                        /* Number of entries             at selected priority     */
N};
N
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                           PEND DATA, PEND LIST and PEND OBJ
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_pend_data {
N    OS_PEND_DATA        *PrevPtr;
N    OS_PEND_DATA        *NextPtr;
N    OS_TCB              *TCBPtr;
N    OS_PEND_OBJ         *PendObjPtr;
N    OS_PEND_OBJ         *RdyObjPtr;
N    void                *RdyMsgPtr;
N    OS_MSG_SIZE          RdyMsgSize;
N    CPU_TS               RdyTS;
N};
N
N
N
Nstruct  os_pend_list {
N    OS_PEND_DATA        *HeadPtr;
N    OS_PEND_DATA        *TailPtr;
N    OS_OBJ_QTY           NbrEntries;
N};
N
N
N
Nstruct  os_pend_obj {
N    OS_OBJ_TYPE          Type;
N    CPU_CHAR            *NamePtr;
N    OS_PEND_LIST         PendList;                          /* List of tasks pending on object                        */
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    void                *DbgPrevPtr;
N    void                *DbgNextPtr;
N    CPU_CHAR            *DbgNamePtr;
N#endif
N};
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                     EVENT FLAGS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N
Nstruct  os_flag_grp {                                       /* Event Flag Group                                       */
N    OS_OBJ_TYPE          Type;                              /* Should be set to OS_OBJ_TYPE_FLAG                      */
N    CPU_CHAR            *NamePtr;                           /* Pointer to Event Flag Name (NUL terminated ASCII)      */
N    OS_PEND_LIST         PendList;                          /* List of tasks waiting on event flag group              */
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_FLAG_GRP         *DbgPrevPtr;
N    OS_FLAG_GRP         *DbgNextPtr;
N    CPU_CHAR            *DbgNamePtr;
N#endif
N    OS_FLAGS             Flags;                             /* 8, 16 or 32 bit flags                                  */
N    CPU_TS               TS;                                /* Timestamp of when last post occurred                   */
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                   MEMORY PARTITIONS
N------------------------------------------------------------------------------------------------------------------------
N*/
N
N
Nstruct os_mem {                                             /* MEMORY CONTROL BLOCK                                   */
N    OS_OBJ_TYPE          Type;                              /* Should be set to OS_OBJ_TYPE_MEM                       */
N    void                *AddrPtr;                           /* Pointer to beginning of memory partition               */
N    CPU_CHAR            *NamePtr;
N    void                *FreeListPtr;                       /* Pointer to list of free memory blocks                  */
N    OS_MEM_SIZE          BlkSize;                           /* Size (in bytes) of each block of memory                */
N    OS_MEM_QTY           NbrMax;                            /* Total number of blocks in this partition               */
N    OS_MEM_QTY           NbrFree;                           /* Number of memory blocks remaining in this partition    */
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_MEM              *DbgPrevPtr;
N    OS_MEM              *DbgNextPtr;
N#endif
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                       MESSAGES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_msg {                                            /* MESSAGE CONTROL BLOCK                                  */
N    OS_MSG              *NextPtr;                           /* Pointer to next message                                */
N    void                *MsgPtr;                            /* Actual message                                         */
N    OS_MSG_SIZE          MsgSize;                           /* Size of the message (in # bytes)                       */
N    CPU_TS               MsgTS;                             /* Time stamp of when message was sent                    */
N};
N
N
N
N
Nstruct  os_msg_pool {                                       /* OS_MSG POOL                                            */
N    OS_MSG              *NextPtr;                           /* Pointer to next message                                */
N    OS_MSG_QTY           NbrFree;                           /* Number of messages available from this pool            */
N    OS_MSG_QTY           NbrUsed;                           /* Number of messages used                                */
N};
N
N
N
Nstruct  os_msg_q {                                          /* OS_MSG_Q                                               */
N    OS_MSG              *InPtr;                             /* Pointer to next OS_MSG to be inserted  in   the queue  */
N    OS_MSG              *OutPtr;                            /* Pointer to next OS_MSG to be extracted from the queue  */
N    OS_MSG_QTY           NbrEntriesSize;                    /* Maximum allowable number of entries in the queue       */
N    OS_MSG_QTY           NbrEntries;                        /* Current number of entries in the queue                 */
N    OS_MSG_QTY           NbrEntriesMax;                     /* Peak number of entries in the queue                    */
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                              MUTUAL EXCLUSION SEMAPHORES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_mutex {
N    OS_OBJ_TYPE          Type;                              /* Mutual Exclusion Semaphore                             */
N    CPU_CHAR            *NamePtr;                           /* Should be set to OS_OBJ_TYPE_MUTEX                     */
N    OS_PEND_LIST         PendList;                          /* Pointer to Mutex Name (NUL terminated ASCII)           */
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_MUTEX            *DbgPrevPtr;
N    OS_MUTEX            *DbgNextPtr;
N    CPU_CHAR            *DbgNamePtr;
N#endif
N    OS_TCB              *OwnerTCBPtr;                       /* List of tasks waiting on event flag group              */
N    OS_PRIO              OwnerOriginalPrio;
N    OS_NESTING_CTR       OwnerNestingCtr;                   /* Mutex is available when the counter is 0               */
N    CPU_TS               TS;
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                    MESSAGE QUEUES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_q {
N    OS_OBJ_TYPE          Type;                              /* Message Queue                                          */
N    CPU_CHAR            *NamePtr;                           /* Should be set to OS_OBJ_TYPE_Q                         */
N    OS_PEND_LIST         PendList;                          /* Pointer to Message Queue (NUL terminated ASCII)        */
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_Q                *DbgPrevPtr;
N    OS_Q                *DbgNextPtr;
N    CPU_CHAR            *DbgNamePtr;
N#endif
N    OS_MSG_Q             MsgQ;                              /* List of tasks waiting on event flag group              */
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                      SEMAPHORES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_sem {
N    OS_OBJ_TYPE          Type;                              /* Semaphore                                              */
N    CPU_CHAR            *NamePtr;                           /* Should be set to OS_OBJ_TYPE_SEM                       */
N    OS_PEND_LIST         PendList;                          /* Pointer to Semaphore Name (NUL terminated ASCII)       */
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_SEM              *DbgPrevPtr;
N    OS_SEM              *DbgNextPtr;
N    CPU_CHAR            *DbgNamePtr;
N#endif
N    OS_SEM_CTR           Ctr;                               /* List of tasks waiting on event flag group              */
N    CPU_TS               TS;
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                  TASK CONTROL BLOCK
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct os_tcb {
N    CPU_STK             *StkPtr;                            /* Pointer to current top of stack                        */
N
N    void                *ExtPtr;                            /* Pointer to user definable data for TCB extension       */
N
N    CPU_STK             *StkLimitPtr;                       /* Pointer used to set stack 'watermark' limit            */
N
N    OS_TCB              *NextPtr;                           /* Pointer to next     TCB in the TCB list                */
N    OS_TCB              *PrevPtr;                           /* Pointer to previous TCB in the TCB list                */
N
N    OS_TCB              *TickNextPtr;
N    OS_TCB              *TickPrevPtr;
N
N    OS_TICK_SPOKE       *TickSpokePtr;                      /* Pointer to tick spoke if task is in the tick list      */
N
N    CPU_CHAR            *NamePtr;                           /* Pointer to task name                                   */
N
N    CPU_STK             *StkBasePtr;                        /* Pointer to base address of stack                       */
N
N    OS_TASK_PTR          TaskEntryAddr;                     /* Pointer to task entry point address                    */
N    void                *TaskEntryArg;                      /* Argument passed to task when it was created            */
N
N    OS_PEND_DATA        *PendDataTblPtr;                    /* Pointer to list containing objects pended on           */
N    OS_STATE             PendOn;                            /* Indicates what task is pending on                      */
N    OS_STATUS            PendStatus;                        /* Pend status                                            */
N
N    OS_STATE             TaskState;                         /* See OS_TASK_STATE_xxx                                  */
N    OS_PRIO              Prio;                              /* Task priority (0 == highest)                           */
N    CPU_STK_SIZE         StkSize;                           /* Size of task stack (in number of stack elements)       */
N    OS_OPT               Opt;                               /* Task options as passed by OSTaskCreate()               */
N
N    OS_OBJ_QTY           PendDataTblEntries;                /* Size of array of objects to pend on                    */
N
N    CPU_TS               TS;                                /* Timestamp                                              */
N
N    OS_SEM_CTR           SemCtr;                            /* Task specific semaphore counter                        */
N
N                                                            /* DELAY / TIMEOUT                                        */
N    OS_TICK              TickCtrPrev;                       /* Previous time when task was            ready           */
N    OS_TICK              TickCtrMatch;                      /* Absolute time when task is going to be ready           */
N    OS_TICK              TickRemain;                        /* Number of ticks remaining for a match (updated at ...  */
N                                                            /* ... run-time by OS_StatTask()                          */
N    OS_TICK              TimeQuanta;
N    OS_TICK              TimeQuantaCtr;
N
N#if OS_MSG_EN > 0u
X#if (((0u > 0u) || (1u > 0u)) ? 1u : 0u) > 0u
N    void                *MsgPtr;                            /* Message received                                       */
N    OS_MSG_SIZE          MsgSize;
N#endif
N
N#if OS_CFG_TASK_Q_EN > 0u
X#if 0u > 0u
S    OS_MSG_Q             MsgQ;                              /* Message queue associated with task                     */
S#if OS_CFG_TASK_PROFILE_EN > 0u
S    CPU_TS               MsgQPendTime;                      /* Time it took for signal to be received                 */
S    CPU_TS               MsgQPendTimeMax;                   /* Max amount of time it took for signal to be received   */
S#endif
N#endif
N
N#if OS_CFG_TASK_REG_TBL_SIZE > 0u
X#if 0u > 0u
S    OS_REG               RegTbl[OS_CFG_TASK_REG_TBL_SIZE];  /* Task specific registers                                */
N#endif
N
N#if OS_CFG_FLAG_EN > 0u
X#if 1u > 0u
N    OS_FLAGS             FlagsPend;                         /* Event flag(s) to wait on                               */
N    OS_FLAGS             FlagsRdy;                          /* Event flags that made task ready to run                */
N    OS_OPT               FlagsOpt;                          /* Options (See OS_OPT_FLAG_xxx)                          */
N#endif
N
N#if OS_CFG_TASK_SUSPEND_EN > 0u
X#if 0u > 0u
S    OS_NESTING_CTR       SuspendCtr;                        /* Nesting counter for OSTaskSuspend()                    */
N#endif
N
N#if OS_CFG_TASK_PROFILE_EN > 0u
X#if 0u > 0u
S    OS_CPU_USAGE         CPUUsage;                          /* CPU Usage of task (0-100%)                             */
S    OS_CTX_SW_CTR        CtxSwCtr;                          /* Number of time the task was switched in                */
S    CPU_TS               CyclesDelta;                       /* value of OS_TS_GET() - .CyclesStart                    */
S    CPU_TS               CyclesStart;                       /* Snapshot of cycle counter at start of task resumption  */
S    OS_CYCLES            CyclesTotal;                       /* Total number of # of cycles the task has been running  */
S    OS_CYCLES            CyclesTotalPrev;                   /* Snapshot of previous # of cycles                       */
S
S    CPU_TS               SemPendTime;                       /* Time it took for signal to be received                 */
S    CPU_TS               SemPendTimeMax;                    /* Max amount of time it took for signal to be received   */
N#endif
N
N#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
X#if 0u > 0u
S    CPU_STK_SIZE         StkUsed;                           /* Number of stack elements used from the stack           */
S    CPU_STK_SIZE         StkFree;                           /* Number of stack elements free on   the stack           */
N#endif
N
N#ifdef CPU_CFG_INT_DIS_MEAS_EN
N    CPU_TS               IntDisTimeMax;                     /* Maximum interrupt disable time                         */
N#endif
N#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
X#if 1u > 0u
N    CPU_TS               SchedLockTimeMax;                  /* Maximum scheduler lock time                            */
N#endif
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_TCB              *DbgPrevPtr;
N    OS_TCB              *DbgNextPtr;
N    CPU_CHAR            *DbgNamePtr;
N#endif
N};
N
N/*$PAGE*/
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                    TICK DATA TYPE
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_tick_spoke {
N    OS_TCB              *FirstPtr;                          /* Pointer to list of tasks in tick spoke                 */
N    OS_OBJ_QTY           NbrEntries;                        /* Current number of entries in the tick spoke            */
N    OS_OBJ_QTY           NbrEntriesMax;                     /* Peak number of entries in the tick spoke               */
N};
N
N
N/*
N------------------------------------------------------------------------------------------------------------------------
N*                                                   TIMER DATA TYPES
N------------------------------------------------------------------------------------------------------------------------
N*/
N
Nstruct  os_tmr {
N    OS_OBJ_TYPE          Type;
N    CPU_CHAR            *NamePtr;                           /* Name to give the timer                                 */
N    OS_TMR_CALLBACK_PTR  CallbackPtr;                       /* Function to call when timer expires                    */
N    void                *CallbackPtrArg;                    /* Argument to pass to function when timer expires        */
N    OS_TMR              *NextPtr;                           /* Double link list pointers                              */
N    OS_TMR              *PrevPtr;
N    OS_TICK              Match;                             /* Timer expires when OSTmrTickCtr matches this value     */
N    OS_TICK              Remain;                            /* Amount of time remaining before timer expires          */
N    OS_TICK              Dly;                               /* Delay before start of repeat                           */
N    OS_TICK              Period;                            /* Period to repeat timer                                 */
N    OS_OPT               Opt;                               /* Options (see OS_OPT_TMR_xxx)                           */
N    OS_STATE             State;
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
N    OS_TMR              *DbgPrevPtr;
N    OS_TMR              *DbgNextPtr;
N#endif
N};
N
N
N
Nstruct  os_tmr_spoke {
N    OS_TMR              *FirstPtr;                          /* Pointer to first timer in linked list                  */
N    OS_OBJ_QTY           NbrEntries;
N    OS_OBJ_QTY           NbrEntriesMax;
N};
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                           G L O B A L   V A R I A B L E S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
N#if OS_CFG_APP_HOOKS_EN > 0u
X#if 1u > 0u
NOS_EXT           OS_APP_HOOK_TCB         OS_AppTaskCreateHookPtr;     /* Application hooks                            */
Xextern           OS_APP_HOOK_TCB         OS_AppTaskCreateHookPtr;      
NOS_EXT           OS_APP_HOOK_TCB         OS_AppTaskDelHookPtr;
Xextern           OS_APP_HOOK_TCB         OS_AppTaskDelHookPtr;
NOS_EXT           OS_APP_HOOK_TCB         OS_AppTaskReturnHookPtr;
Xextern           OS_APP_HOOK_TCB         OS_AppTaskReturnHookPtr;
N
NOS_EXT           OS_APP_HOOK_VOID        OS_AppIdleTaskHookPtr;
Xextern           OS_APP_HOOK_VOID        OS_AppIdleTaskHookPtr;
NOS_EXT           OS_APP_HOOK_VOID        OS_AppStatTaskHookPtr;
Xextern           OS_APP_HOOK_VOID        OS_AppStatTaskHookPtr;
NOS_EXT           OS_APP_HOOK_VOID        OS_AppTaskSwHookPtr;
Xextern           OS_APP_HOOK_VOID        OS_AppTaskSwHookPtr;
NOS_EXT           OS_APP_HOOK_VOID        OS_AppTimeTickHookPtr;
Xextern           OS_APP_HOOK_VOID        OS_AppTimeTickHookPtr;
N#endif
N
N                                                                      /* IDLE TASK ---------------------------------- */
NOS_EXT            OS_IDLE_CTR            OSIdleTaskCtr;
Xextern            OS_IDLE_CTR            OSIdleTaskCtr;
NOS_EXT            OS_TCB                 OSIdleTaskTCB;
Xextern            OS_TCB                 OSIdleTaskTCB;
N
N                                                                      /* MISCELLANEOUS ------------------------------ */
NOS_EXT            OS_NESTING_CTR         OSIntNestingCtr;             /* Interrupt nesting level                      */
Xextern            OS_NESTING_CTR         OSIntNestingCtr;              
N#ifdef CPU_CFG_INT_DIS_MEAS_EN
NOS_EXT            CPU_TS                 OSIntDisTimeMax;             /* Overall interrupt disable time               */
Xextern            CPU_TS                 OSIntDisTimeMax;              
N#endif
N
NOS_EXT            OS_STATE               OSRunning;                   /* Flag indicating that kernel is running       */
Xextern            OS_STATE               OSRunning;                    
N
N
N                                                                      /* ISR HANDLER TASK --------------------------- */
N#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_INT_Q              *OSIntQInPtr;
Xextern            OS_INT_Q              *OSIntQInPtr;
NOS_EXT            OS_INT_Q              *OSIntQOutPtr;
Xextern            OS_INT_Q              *OSIntQOutPtr;
NOS_EXT            OS_OBJ_QTY             OSIntQNbrEntries;
Xextern            OS_OBJ_QTY             OSIntQNbrEntries;
NOS_EXT            OS_OBJ_QTY             OSIntQMaxNbrEntries;
Xextern            OS_OBJ_QTY             OSIntQMaxNbrEntries;
NOS_EXT            OS_OBJ_QTY             OSIntQOvfCtr;
Xextern            OS_OBJ_QTY             OSIntQOvfCtr;
NOS_EXT            OS_TCB                 OSIntQTaskTCB;
Xextern            OS_TCB                 OSIntQTaskTCB;
NOS_EXT            CPU_TS                 OSIntQTaskTimeMax;
Xextern            CPU_TS                 OSIntQTaskTimeMax;
N#endif
N
N                                                                      /* FLAGS -------------------------------------- */
N#if OS_CFG_FLAG_EN > 0u
X#if 1u > 0u
N#if OS_CFG_DBG_EN  > 0u
X#if 1u  > 0u
NOS_EXT            OS_FLAG_GRP           *OSFlagDbgListPtr;
Xextern            OS_FLAG_GRP           *OSFlagDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSFlagQty;
Xextern            OS_OBJ_QTY             OSFlagQty;
N#endif
N
N                                                                      /* MEMORY MANAGEMENT -------------------------- */
N#if OS_CFG_MEM_EN > 0u
X#if 1u > 0u
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_MEM                *OSMemDbgListPtr;
Xextern            OS_MEM                *OSMemDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSMemQty;                    /* Number of memory partitions created          */
Xextern            OS_OBJ_QTY             OSMemQty;                     
N#endif
N
N                                                                      /* OS_MSG POOL -------------------------------- */
NOS_EXT            OS_MSG_POOL            OSMsgPool;                   /* Pool of OS_MSG                               */
Xextern            OS_MSG_POOL            OSMsgPool;                    
N
N                                                                      /* MUTEX MANAGEMENT --------------------------- */
N#if OS_CFG_MUTEX_EN > 0u
X#if 1u > 0u
N#if OS_CFG_DBG_EN   > 0u
X#if 1u   > 0u
NOS_EXT            OS_MUTEX              *OSMutexDbgListPtr;
Xextern            OS_MUTEX              *OSMutexDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSMutexQty;                  /* Number of mutexes created                    */
Xextern            OS_OBJ_QTY             OSMutexQty;                   
N#endif
N
N                                                                      /* PRIORITIES --------------------------------- */
NOS_EXT            OS_PRIO                OSPrioCur;                   /* Priority of current task                     */
Xextern            OS_PRIO                OSPrioCur;                    
NOS_EXT            OS_PRIO                OSPrioHighRdy;               /* Priority of highest priority task            */
Xextern            OS_PRIO                OSPrioHighRdy;                
NOS_EXT            OS_PRIO                OSPrioSaved;                 /* Saved priority level when Post Deferred      */
Xextern            OS_PRIO                OSPrioSaved;                  
Nextern            CPU_DATA               OSPrioTbl[OS_PRIO_TBL_SIZE];
Xextern            CPU_DATA               OSPrioTbl[(((64u - 1u) / (4u * 8u)) + 1u)];
N
N                                                                      /* QUEUES ------------------------------------- */
N#if OS_CFG_Q_EN   > 0u
X#if 1u   > 0u
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_Q                  *OSQDbgListPtr;
Xextern            OS_Q                  *OSQDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSQQty;                      /* Number of message queues created             */
Xextern            OS_OBJ_QTY             OSQQty;                       
N#endif
N
N
N
N                                                                      /* READY LIST --------------------------------- */
NOS_EXT            OS_RDY_LIST            OSRdyList[OS_CFG_PRIO_MAX];  /* Table of tasks ready to run                  */
Xextern            OS_RDY_LIST            OSRdyList[64u];   
N
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
SOS_EXT            CPU_BOOLEAN            OSSafetyCriticalStartFlag;   /* Flag indicating that all init. done          */
N#endif
N                                                                      /* SCHEDULER ---------------------------------- */
N#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
X#if 1u > 0u
NOS_EXT            CPU_TS_TMR             OSSchedLockTimeBegin;        /* Scheduler lock time measurement              */
Xextern            CPU_TS_TMR             OSSchedLockTimeBegin;         
NOS_EXT            CPU_TS_TMR             OSSchedLockTimeMax;
Xextern            CPU_TS_TMR             OSSchedLockTimeMax;
NOS_EXT            CPU_TS_TMR             OSSchedLockTimeMaxCur;
Xextern            CPU_TS_TMR             OSSchedLockTimeMaxCur;
N#endif
N
NOS_EXT            OS_NESTING_CTR         OSSchedLockNestingCtr;       /* Lock nesting level                           */
Xextern            OS_NESTING_CTR         OSSchedLockNestingCtr;        
N#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_TICK                OSSchedRoundRobinDfltTimeQuanta;
Xextern            OS_TICK                OSSchedRoundRobinDfltTimeQuanta;
NOS_EXT            CPU_BOOLEAN            OSSchedRoundRobinEn;         /* Enable/Disable round-robin scheduling        */
Xextern            CPU_BOOLEAN            OSSchedRoundRobinEn;          
N#endif
N                                                                      /* SEMAPHORES --------------------------------- */
N#if OS_CFG_SEM_EN > 0u
X#if 1u > 0u
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_SEM                *OSSemDbgListPtr;
Xextern            OS_SEM                *OSSemDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSSemQty;                    /* Number of semaphores created                 */
Xextern            OS_OBJ_QTY             OSSemQty;                     
N#endif
N
N                                                                      /* STATISTICS --------------------------------- */
N#if OS_CFG_STAT_TASK_EN > 0u
X#if 0u > 0u
SOS_EXT            OS_CPU_USAGE           OSStatTaskCPUUsage;          /* CPU Usage in %                               */
SOS_EXT            OS_TICK                OSStatTaskCtr;
SOS_EXT            OS_TICK                OSStatTaskCtrMax;
SOS_EXT            OS_TICK                OSStatTaskCtrRun;
SOS_EXT            CPU_BOOLEAN            OSStatTaskRdy;
SOS_EXT            OS_TCB                 OSStatTaskTCB;
SOS_EXT            CPU_TS                 OSStatTaskTimeMax;
SOS_EXT            CPU_BOOLEAN            OSStatResetFlag;             /* Force the reset of the computed statistics   */
N#endif
N
N                                                                      /* TASKS -------------------------------------- */
NOS_EXT            OS_CTX_SW_CTR          OSTaskCtxSwCtr;              /* Number of context switches                   */
Xextern            OS_CTX_SW_CTR          OSTaskCtxSwCtr;               
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_TCB                *OSTaskDbgListPtr;
Xextern            OS_TCB                *OSTaskDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSTaskQty;                   /* Number of tasks created                      */
Xextern            OS_OBJ_QTY             OSTaskQty;                    
N
N
N                                                                      /* TICK TASK ---------------------------------- */
NOS_EXT            OS_TICK                OSTickCtr;                   /* Counts the #ticks since startup or last set  */
Xextern            OS_TICK                OSTickCtr;                    
NOS_EXT            OS_TCB                 OSTickTaskTCB;
Xextern            OS_TCB                 OSTickTaskTCB;
NOS_EXT            CPU_TS                 OSTickTaskTimeMax;
Xextern            CPU_TS                 OSTickTaskTimeMax;
N
N
N#if OS_CFG_TMR_EN > 0u                                                /* TIMERS ------------------------------------- */
X#if 1u > 0u                                                 
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
NOS_EXT            OS_TMR                *OSTmrDbgListPtr;
Xextern            OS_TMR                *OSTmrDbgListPtr;
N#endif
NOS_EXT            OS_OBJ_QTY             OSTmrQty;                    /* Number of timers created                     */
Xextern            OS_OBJ_QTY             OSTmrQty;                     
NOS_EXT            OS_TCB                 OSTmrTaskTCB;                /* TCB of timer task                            */
Xextern            OS_TCB                 OSTmrTaskTCB;                 
NOS_EXT            CPU_TS                 OSTmrTaskTimeMax;
Xextern            CPU_TS                 OSTmrTaskTimeMax;
NOS_EXT            OS_TICK                OSTmrTickCtr;                /* Current time for the timers                  */
Xextern            OS_TICK                OSTmrTickCtr;                 
NOS_EXT            OS_CTR                 OSTmrUpdateCnt;              /* Counter for updating timers                  */
Xextern            OS_CTR                 OSTmrUpdateCnt;               
NOS_EXT            OS_CTR                 OSTmrUpdateCtr;
Xextern            OS_CTR                 OSTmrUpdateCtr;
N#endif
N
N                                                                      /* TCBs --------------------------------------- */
NOS_EXT            OS_TCB                *OSTCBCurPtr;                 /* Pointer to currently running TCB             */
Xextern            OS_TCB                *OSTCBCurPtr;                  
NOS_EXT            OS_TCB                *OSTCBHighRdyPtr;             /* Pointer to highest priority  TCB             */
Xextern            OS_TCB                *OSTCBHighRdyPtr;              
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                                   E X T E R N A L S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
Nextern  CPU_STK     * const OSCfg_IdleTaskStkBasePtr;
Nextern  CPU_STK_SIZE  const OSCfg_IdleTaskStkLimit;
Nextern  CPU_STK_SIZE  const OSCfg_IdleTaskStkSize;
Nextern  CPU_INT32U    const OSCfg_IdleTaskStkSizeRAM;
N
Nextern  OS_INT_Q    * const OSCfg_IntQBasePtr;
Nextern  OS_OBJ_QTY    const OSCfg_IntQSize;
Nextern  CPU_INT32U    const OSCfg_IntQSizeRAM;
Nextern  CPU_STK     * const OSCfg_IntQTaskStkBasePtr;
Nextern  CPU_STK_SIZE  const OSCfg_IntQTaskStkLimit;
Nextern  CPU_STK_SIZE  const OSCfg_IntQTaskStkSize;
Nextern  CPU_INT32U    const OSCfg_IntQTaskStkSizeRAM;
N
Nextern  CPU_STK     * const OSCfg_ISRStkBasePtr;
Nextern  CPU_STK_SIZE  const OSCfg_ISRStkSize;
Nextern  CPU_INT32U    const OSCfg_ISRStkSizeRAM;
N
Nextern  OS_MSG_SIZE   const OSCfg_MsgPoolSize;
Nextern  CPU_INT32U    const OSCfg_MsgPoolSizeRAM;
Nextern  OS_MSG      * const OSCfg_MsgPoolBasePtr;
N
Nextern  OS_PRIO       const OSCfg_StatTaskPrio;
Nextern  OS_RATE_HZ    const OSCfg_StatTaskRate_Hz;
Nextern  CPU_STK     * const OSCfg_StatTaskStkBasePtr;
Nextern  CPU_STK_SIZE  const OSCfg_StatTaskStkLimit;
Nextern  CPU_STK_SIZE  const OSCfg_StatTaskStkSize;
Nextern  CPU_INT32U    const OSCfg_StatTaskStkSizeRAM;
N
Nextern  CPU_STK_SIZE  const OSCfg_StkSizeMin;
N
Nextern  OS_RATE_HZ    const OSCfg_TickRate_Hz;
Nextern  OS_PRIO       const OSCfg_TickTaskPrio;
Nextern  CPU_STK     * const OSCfg_TickTaskStkBasePtr;
Nextern  CPU_STK_SIZE  const OSCfg_TickTaskStkLimit;
Nextern  CPU_STK_SIZE  const OSCfg_TickTaskStkSize;
Nextern  CPU_INT32U    const OSCfg_TickTaskStkSizeRAM;
Nextern  OS_OBJ_QTY    const OSCfg_TickWheelSize;
Nextern  CPU_INT32U    const OSCfg_TickWheelSizeRAM;
N
Nextern  OS_PRIO       const OSCfg_TmrTaskPrio;
Nextern  OS_RATE_HZ    const OSCfg_TmrTaskRate_Hz;
Nextern  CPU_STK     * const OSCfg_TmrTaskStkBasePtr;
Nextern  CPU_STK_SIZE  const OSCfg_TmrTaskStkLimit;
Nextern  CPU_STK_SIZE  const OSCfg_TmrTaskStkSize;
Nextern  CPU_INT32U    const OSCfg_TmrTaskStkSizeRAM;
Nextern  OS_OBJ_QTY    const OSCfg_TmrWheelSize;
Nextern  CPU_INT32U    const OSCfg_TmrSizeRAM;
N
N
Nextern  CPU_STK        OSCfg_IdleTaskStk[];
N
N#if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
X#if (1u > 0u)
Nextern  CPU_STK        OSCfg_IntQTaskStk[];
Nextern  OS_INT_Q       OSCfg_IntQ[];
N#endif
N
Nextern  CPU_STK        OSCfg_ISRStk[];
N
N#if (OS_MSG_EN > 0u)
X#if ((((0u > 0u) || (1u > 0u)) ? 1u : 0u) > 0u)
Nextern  OS_MSG         OSCfg_MsgPool[];
N#endif
N
N#if (OS_CFG_STAT_TASK_EN > 0u)
X#if (0u > 0u)
Sextern  CPU_STK        OSCfg_StatTaskStk[];
N#endif
N
Nextern  CPU_STK        OSCfg_TickTaskStk[];
Nextern  OS_TICK_SPOKE  OSCfg_TickWheel[];
N
N#if (OS_CFG_TMR_EN > 0u)
X#if (1u > 0u)
Nextern  CPU_STK        OSCfg_TmrTaskStk[];
Nextern  OS_TMR_SPOKE   OSCfg_TmrWheel[];
N#endif
N
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                        F U N C T I O N   P R O T O T Y P E S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
N/* ================================================================================================================== */
N/*                                                    EVENT FLAGS                                                     */
N/* ================================================================================================================== */
N
N#if OS_CFG_FLAG_EN > 0u
X#if 1u > 0u
N
Nvoid          OSFlagCreate              (OS_FLAG_GRP           *p_grp,
N                                         CPU_CHAR              *p_name,
N                                         OS_FLAGS               flags,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_FLAG_DEL_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSFlagDel                 (OS_FLAG_GRP           *p_grp,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
NOS_FLAGS      OSFlagPend                (OS_FLAG_GRP           *p_grp,
N                                         OS_FLAGS               flags,
N                                         OS_TICK                timeout,
N                                         OS_OPT                 opt,
N                                         CPU_TS                *p_ts,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_FLAG_PEND_ABORT_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSFlagPendAbort           (OS_FLAG_GRP           *p_grp,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
NOS_FLAGS      OSFlagPendGetFlagsRdy     (OS_ERR                *p_err);
N
NOS_FLAGS      OSFlagPost                (OS_FLAG_GRP           *p_grp,
N                                         OS_FLAGS               flags,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_FlagClr                (OS_FLAG_GRP           *p_grp);
N
Nvoid          OS_FlagBlock              (OS_PEND_DATA          *p_pend_data,
N                                         OS_FLAG_GRP           *p_grp,
N                                         OS_FLAGS               flags,
N                                         OS_OPT                 opt,
N                                         OS_TICK                timeout);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_FlagDbgListAdd         (OS_FLAG_GRP           *p_grp);
N
Nvoid          OS_FlagDbgListRemove      (OS_FLAG_GRP           *p_grp);
N#endif
N
Nvoid          OS_FlagInit               (OS_ERR                *p_err);
N
NOS_FLAGS      OS_FlagPost               (OS_FLAG_GRP           *p_grp,
N                                         OS_FLAGS               flags,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N
Nvoid          OS_FlagTaskRdy            (OS_TCB                *p_tcb,
N                                         OS_FLAGS               flags_rdy,
N                                         CPU_TS                 ts);
N#endif
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                          FIXED SIZE MEMORY BLOCK MANAGEMENT                                        */
N/* ================================================================================================================== */
N
N#if OS_CFG_MEM_EN > 0u
X#if 1u > 0u
N
Nvoid          OSMemCreate               (OS_MEM                *p_mem,
N                                         CPU_CHAR              *p_name,
N                                         void                  *p_addr,
N                                         OS_MEM_QTY             n_blks,
N                                         OS_MEM_SIZE            blk_size,
N                                         OS_ERR                *p_err);
N
Nvoid         *OSMemGet                  (OS_MEM                *p_mem,
N                                         OS_ERR                *p_err);
N
Nvoid          OSMemPut                  (OS_MEM                *p_mem,
N                                         void                  *p_blk,
N                                         OS_ERR                *p_err);
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_MemDbgListAdd          (OS_MEM                *p_mem);
N#endif
N
Nvoid          OS_MemInit                (OS_ERR                *p_err);
N
N#endif
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                             MUTUAL EXCLUSION SEMAPHORES                                            */
N/* ================================================================================================================== */
N
N#if OS_CFG_MUTEX_EN > 0u
X#if 1u > 0u
N
Nvoid          OSMutexCreate             (OS_MUTEX              *p_mutex,
N                                         CPU_CHAR              *p_name,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_MUTEX_DEL_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSMutexDel                (OS_MUTEX              *p_mutex,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
Nvoid          OSMutexPend               (OS_MUTEX              *p_mutex,
N                                         OS_TICK                timeout,
N                                         OS_OPT                 opt,
N                                         CPU_TS                *p_ts,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_MUTEX_PEND_ABORT_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSMutexPendAbort          (OS_MUTEX              *p_mutex,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
Nvoid          OSMutexPost               (OS_MUTEX              *p_mutex,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_MutexClr               (OS_MUTEX              *p_mutex);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_MutexDbgListAdd        (OS_MUTEX              *p_mutex);
N
Nvoid          OS_MutexDbgListRemove     (OS_MUTEX              *p_mutex);
N#endif
N
Nvoid          OS_MutexInit              (OS_ERR                *p_err);
N#endif
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                                   MESSAGE QUEUES                                                   */
N/* ================================================================================================================== */
N
N#if OS_CFG_PEND_MULTI_EN > 0u
X#if 1u > 0u
N
NOS_OBJ_QTY    OSPendMulti               (OS_PEND_DATA          *p_pend_data_tbl,
N                                         OS_OBJ_QTY             tbl_size,
N                                         OS_TICK                timeout,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
NOS_OBJ_QTY    OS_PendMultiGetRdy        (OS_PEND_DATA          *p_pend_data_tbl,
N                                         OS_OBJ_QTY             tbl_size);
N
NCPU_BOOLEAN   OS_PendMultiValidate      (OS_PEND_DATA          *p_pend_data_tbl,
N                                         OS_OBJ_QTY             tbl_size);
N
Nvoid          OS_PendMultiWait          (OS_PEND_DATA          *p_pend_data_tbl,
N                                         OS_OBJ_QTY             tbl_size,
N                                         OS_TICK                timeout);
N#endif
N
N/* ================================================================================================================== */
N/*                                                   MESSAGE QUEUES                                                   */
N/* ================================================================================================================== */
N
N#if OS_CFG_Q_EN > 0u
X#if 1u > 0u
N
Nvoid          OSQCreate                 (OS_Q                  *p_q,
N                                         CPU_CHAR              *p_name,
N                                         OS_MSG_QTY             max_qty,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_Q_DEL_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSQDel                    (OS_Q                  *p_q,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
N#if OS_CFG_Q_FLUSH_EN > 0u
X#if 1u > 0u
NOS_MSG_QTY    OSQFlush                  (OS_Q                  *p_q,
N                                         OS_ERR                *p_err);
N#endif
N
Nvoid         *OSQPend                   (OS_Q                  *p_q,
N                                         OS_TICK                timeout,
N                                         OS_OPT                 opt,
N                                         OS_MSG_SIZE           *p_msg_size,
N                                         CPU_TS                *p_ts,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_Q_PEND_ABORT_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSQPendAbort              (OS_Q                  *p_q,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
Nvoid          OSQPost                   (OS_Q                  *p_q,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_QClr                   (OS_Q                  *p_q);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_QDbgListAdd            (OS_Q                  *p_q);
N
Nvoid          OS_QDbgListRemove         (OS_Q                  *p_q);
N#endif
N
Nvoid          OS_QInit                  (OS_ERR                *p_err);
N
Nvoid          OS_QPost                  (OS_Q                  *p_q,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N#endif
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                                     SEMAPHORES                                                     */
N/* ================================================================================================================== */
N
N#if OS_CFG_SEM_EN > 0u
X#if 1u > 0u
N
Nvoid          OSSemCreate               (OS_SEM                *p_sem,
N                                         CPU_CHAR              *p_name,
N                                         OS_SEM_CTR             cnt,
N                                         OS_ERR                *p_err);
N
NOS_OBJ_QTY    OSSemDel                  (OS_SEM                *p_sem,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
NOS_SEM_CTR    OSSemPend                 (OS_SEM                *p_sem,
N                                         OS_TICK                timeout,
N                                         OS_OPT                 opt,
N                                         CPU_TS                *p_ts,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_SEM_PEND_ABORT_EN > 0u
X#if 1u > 0u
NOS_OBJ_QTY    OSSemPendAbort            (OS_SEM                *p_sem,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
NOS_SEM_CTR    OSSemPost                 (OS_SEM                *p_sem,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_SEM_SET_EN > 0u
X#if 1u > 0u
Nvoid          OSSemSet                  (OS_SEM                *p_sem,
N                                         OS_SEM_CTR             cnt,
N                                         OS_ERR                *p_err);
N#endif
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_SemClr                 (OS_SEM                *p_sem);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_SemDbgListAdd          (OS_SEM                *p_sem);
N
Nvoid          OS_SemDbgListRemove       (OS_SEM                *p_sem);
N#endif
N
Nvoid          OS_SemInit                (OS_ERR                *p_err);
N
NOS_SEM_CTR    OS_SemPost                (OS_SEM                *p_sem,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N#endif
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                                 TASK MANAGEMENT                                                    */
N/* ================================================================================================================== */
N
N#if OS_CFG_TASK_CHANGE_PRIO_EN > 0u
X#if 0u > 0u
Svoid          OSTaskChangePrio          (OS_TCB                *p_tcb,
S                                         OS_PRIO                prio_new,
S                                         OS_ERR                *p_err);
N#endif
N
Nvoid          OSTaskCreate              (OS_TCB                *p_tcb,
N                                         CPU_CHAR              *p_name,
N                                         OS_TASK_PTR            p_task,
N                                         void                  *p_arg,
N                                         OS_PRIO                prio,
N                                         CPU_STK               *p_stk_base,
N                                         CPU_STK_SIZE           stk_limit,
N                                         CPU_STK_SIZE           stk_size,
N                                         OS_MSG_QTY             q_size,
N                                         OS_TICK                time_quanta,
N                                         void                  *p_ext,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_TASK_DEL_EN > 0u
X#if 1u > 0u
Nvoid          OSTaskDel                 (OS_TCB                *p_tcb,
N                                         OS_ERR                *p_err);
N#endif
N
N#if OS_CFG_TASK_Q_EN > 0u
X#if 0u > 0u
SOS_MSG_QTY    OSTaskQFlush              (OS_TCB                *p_tcb,
S                                         OS_ERR                *p_err);
S
Svoid         *OSTaskQPend               (OS_TICK                timeout,
S                                         OS_OPT                 opt,
S                                         OS_MSG_SIZE           *p_msg_size,
S                                         CPU_TS                *p_ts,
S                                         OS_ERR                *p_err);
S
SCPU_BOOLEAN   OSTaskQPendAbort          (OS_TCB                *p_tcb,
S                                         OS_OPT                 opt,
S                                         OS_ERR                *p_err);
S
Svoid          OSTaskQPost               (OS_TCB                *p_tcb,
S                                         void                  *p_void,
S                                         OS_MSG_SIZE            msg_size,
S                                         OS_OPT                 opt,
S                                         OS_ERR                *p_err);
S
N#endif
N
N#if OS_CFG_TASK_SUSPEND_EN > 0u
X#if 0u > 0u
Svoid          OSTaskResume              (OS_TCB                *p_tcb,
S                                         OS_ERR                *p_err);
S
Svoid          OSTaskSuspend             (OS_TCB                *p_tcb,
S                                         OS_ERR                *p_err);
N#endif
N
N#if OS_CFG_TASK_REG_TBL_SIZE > 0u
X#if 0u > 0u
SOS_REG        OSTaskRegGet              (OS_TCB                *p_tcb,
S                                         OS_REG_ID              id,
S                                         OS_ERR                *p_err);
S
Svoid          OSTaskRegSet              (OS_TCB                *p_tcb,
S                                         OS_REG_ID              id,
S                                         OS_REG                 value,
S                                         OS_ERR                *p_err);
N#endif
N
NOS_SEM_CTR    OSTaskSemPend             (OS_TICK                timeout,
N                                         OS_OPT                 opt,
N                                         CPU_TS                *p_ts,
N                                         OS_ERR                *p_err);
N
N#if (OS_CFG_TASK_SEM_PEND_ABORT_EN > 0u)
X#if (0u > 0u)
SCPU_BOOLEAN   OSTaskSemPendAbort        (OS_TCB                *p_tcb,
S                                         OS_OPT                 opt,
S                                         OS_ERR                *p_err);
N#endif
N
NOS_SEM_CTR    OSTaskSemPost             (OS_TCB                *p_tcb,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
NOS_SEM_CTR    OSTaskSemSet              (OS_TCB                *p_tcb,
N                                         OS_SEM_CTR             cnt,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
X#if 0u > 0u
Svoid          OSTaskStkChk              (OS_TCB                *p_tcb,
S                                         CPU_STK_SIZE          *p_free,
S                                         CPU_STK_SIZE          *p_used,
S                                         OS_ERR                *p_err);
N#endif
N
N#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
X#if 1u > 0u
Nvoid          OSTaskTimeQuantaSet       (OS_TCB                *p_tcb,
N                                         OS_TICK                time_quanta,
N                                         OS_ERR                *p_err);
N#endif
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_TaskBlock              (OS_TCB                *p_tcb,
N                                         OS_TICK                timeout);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_TaskDbgListAdd         (OS_TCB                *p_tcb);
N
Nvoid          OS_TaskDbgListRemove      (OS_TCB                *p_tcb);
N#endif
N
Nvoid          OS_TaskInit               (OS_ERR                *p_err);
N
Nvoid          OS_TaskInitTCB            (OS_TCB                *p_tcb);
N
Nvoid          OS_TaskQPost              (OS_TCB                *p_tcb,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N
Nvoid          OS_TaskRdy                (OS_TCB                *p_tcb);
N
Nvoid          OS_TaskReturn             (void);
N
NOS_SEM_CTR    OS_TaskSemPost            (OS_TCB                *p_tcb,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                                 TIME MANAGEMENT                                                    */
N/* ================================================================================================================== */
N
Nvoid          OSTimeDly                 (OS_TICK                dly,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
N#if OS_CFG_TIME_DLY_HMSM_EN > 0u
X#if 1u > 0u
Nvoid          OSTimeDlyHMSM             (CPU_INT16U             hours,
N                                         CPU_INT16U             minutes,
N                                         CPU_INT16U             seconds,
N                                         CPU_INT32U             milli,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N#endif
N
N#if OS_CFG_TIME_DLY_RESUME_EN > 0u
X#if 1u > 0u
Nvoid          OSTimeDlyResume           (OS_TCB                *p_tcb,
N                                         OS_ERR                *p_err);
N#endif
N
NOS_TICK       OSTimeGet                 (OS_ERR                *p_err);
N
Nvoid          OSTimeSet                 (OS_TICK                ticks,
N                                         OS_ERR                *p_err);
N
Nvoid          OSTimeTick                (void);
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                                 TIMER MANAGEMENT                                                   */
N/* ================================================================================================================== */
N
N#if OS_CFG_TMR_EN > 0u
X#if 1u > 0u
Nvoid          OSTmrCreate               (OS_TMR                *p_tmr,
N                                         CPU_CHAR              *p_name,
N                                         OS_TICK                dly,
N                                         OS_TICK                period,
N                                         OS_OPT                 opt,
N                                         OS_TMR_CALLBACK_PTR    p_callback,
N                                         void                  *p_callback_arg,
N                                         OS_ERR                *p_err);
N
NCPU_BOOLEAN   OSTmrDel                  (OS_TMR                *p_tmr,
N                                         OS_ERR                *p_err);
N
NOS_TICK       OSTmrRemainGet            (OS_TMR                *p_tmr,
N                                         OS_ERR                *p_err);
N
NCPU_BOOLEAN   OSTmrStart                (OS_TMR                *p_tmr,
N                                         OS_ERR                *p_err);
N
NOS_STATE      OSTmrStateGet             (OS_TMR                *p_tmr,
N                                         OS_ERR                *p_err);
N
NCPU_BOOLEAN   OSTmrStop                 (OS_TMR                *p_tmr,
N                                         OS_OPT                 opt,
N                                         void                  *p_callback_arg,
N                                         OS_ERR                *p_err);
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_TmrClr                 (OS_TMR                *p_tmr);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_TmrDbgListAdd          (OS_TMR                *p_tmr);
N
Nvoid          OS_TmrDbgListRemove       (OS_TMR                *p_tmr);
N#endif
N
Nvoid          OS_TmrInit                (OS_ERR                *p_err);
N
Nvoid          OS_TmrLink                (OS_TMR                *p_tmr,
N                                         OS_OPT                 opt);
N
Nvoid          OS_TmrResetPeak           (void);
N
Nvoid          OS_TmrUnlink              (OS_TMR                *p_tmr);
N
Nvoid          OS_TmrTask                (void                  *p_arg);
N
N#endif
N
N/*$PAGE*/
N/* ================================================================================================================== */
N/*                                                    MISCELLANEOUS                                                   */
N/* ================================================================================================================== */
N
Nvoid          OSInit                    (OS_ERR                *p_err);
N
Nvoid          OSIntEnter                (void);
Nvoid          OSIntExit                 (void);
N
Nvoid          OSMsgPoolExtend           (OS_MSG                *p_msg,
N                                         OS_MSG_QTY             size,
N                                         OS_ERR                *p_err);
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
Svoid          OSSafetyCriticalStart     (void);
N#endif
N
N#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
X#if 1u > 0u
Nvoid          OSSchedRoundRobinCfg      (CPU_BOOLEAN            en,
N                                         OS_TICK                dflt_time_quanta,
N                                         OS_ERR                *p_err);
N
Nvoid          OSSchedRoundRobinYield    (OS_ERR                *p_err);
N
N#endif
N
Nvoid          OSSched                   (void);
N
Nvoid          OSSchedLock               (OS_ERR                *p_err);
Nvoid          OSSchedUnlock             (OS_ERR                *p_err);
N
Nvoid          OSStart                   (OS_ERR                *p_err);
N
N#if OS_CFG_STAT_TASK_EN > 0u
X#if 0u > 0u
Svoid          OSStatReset               (OS_ERR                *p_err);
S
Svoid          OSStatTaskCPUUsageInit    (OS_ERR                *p_err);
N#endif
N
NCPU_INT16U    OSVersion                 (OS_ERR                *p_err);
N
N/* ------------------------------------------------ INTERNAL FUNCTIONS ---------------------------------------------- */
N
Nvoid          OS_IdleTask               (void                  *p_arg);
N
Nvoid          OS_IdleTaskInit           (OS_ERR                *p_err);
N
N#if OS_CFG_STAT_TASK_EN > 0u
X#if 0u > 0u
Svoid          OS_StatTask               (void                  *p_arg);
N#endif
N
Nvoid          OS_StatTaskInit           (OS_ERR                *p_err);
N
Nvoid          OS_TickTask               (void                  *p_arg);
Nvoid          OS_TickTaskInit           (OS_ERR                *p_err);
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                                    T A R G E T   S P E C I F I C   F U N C T I O N S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
Nvoid          OSInitHook                (void);
N
Nvoid          OSTaskCreateHook          (OS_TCB                *p_tcb);
Nvoid          OSTaskDelHook             (OS_TCB                *p_tcb);
N
Nvoid          OSIdleTaskHook            (void);
N
Nvoid          OSTaskReturnHook          (OS_TCB                *p_tcb);
N
Nvoid          OSStatTaskHook            (void);
N
NCPU_STK      *OSTaskStkInit             (OS_TASK_PTR            p_task,
N                                         void                  *p_arg,
N                                         CPU_STK               *p_stk_base,
N                                         CPU_STK               *p_stk_limit,
N                                         CPU_STK_SIZE           stk_size,
N                                         OS_OPT                 opt);
N
Nvoid          OSTaskSwHook              (void);
N
Nvoid          OSTimeTickHook            (void);
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N************************************************************************************************************************
N*                   u C / O S - I I I   I N T E R N A L   F U N C T I O N   P R O T O T Y P E S
N************************************************************************************************************************
N************************************************************************************************************************
N*/
N
Nvoid          OSCfg_Init                (void);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_Dbg_Init               (void);
N#endif
N
N
N#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
X#if 1u > 0u
Nvoid          OS_IntQTaskInit           (OS_ERR                *p_err);
N
Nvoid          OS_IntQPost               (OS_OBJ_TYPE            type,
N                                         void                  *p_obj,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         OS_FLAGS               flags,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N
Nvoid          OS_IntQRePost             (void);
N
Nvoid          OS_IntQTask               (void                  *p_arg);
N#endif
N
N/* ----------------------------------------------- MESSAGE MANAGEMENT ----------------------------------------------- */
N
Nvoid          OS_MsgPoolCreate          (OS_MSG                *p_msg,
N                                         OS_MSG_QTY             size);
N
Nvoid          OS_MsgPoolInit            (OS_ERR                *p_err);
N
Nvoid          OS_MsgQEntriesPeakReset   (OS_MSG_Q              *p_msg_q);
N
NOS_MSG_QTY    OS_MsgQFreeAll            (OS_MSG_Q              *p_msg_q);
N
Nvoid         *OS_MsgQGet                (OS_MSG_Q              *p_msg_q,
N                                         OS_MSG_SIZE           *p_msg_size,
N                                         CPU_TS                *p_ts,
N                                         OS_ERR                *p_err);
N
Nvoid          OS_MsgQInit               (OS_MSG_Q              *p_msg_q,
N                                         OS_MSG_QTY             size);
N
Nvoid          OS_MsgQPut                (OS_MSG_Q              *p_msg_q,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         OS_OPT                 opt,
N                                         CPU_TS                 ts,
N                                         OS_ERR                *p_err);
N
N/* ---------------------------------------------- PEND/POST MANAGEMENT ---------------------------------------------- */
N
Nvoid          OS_Pend                   (OS_PEND_DATA          *p_pend_data,
N                                         OS_PEND_OBJ           *p_obj,
N                                         OS_STATE               pending_on,
N                                         OS_TICK                timeout);
N
Nvoid          OS_PendAbort              (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb,
N                                         CPU_TS                 ts);
N
Nvoid          OS_PendAbort1             (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb,
N                                         CPU_TS                 ts);
N
Nvoid          OS_PendObjDel             (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb,
N                                         CPU_TS                 ts);
N
Nvoid          OS_PendObjDel1            (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb,
N                                         CPU_TS                 ts);
N
Nvoid          OS_Post                   (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         CPU_TS                 ts);
N
Nvoid          OS_Post1                  (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb,
N                                         void                  *p_void,
N                                         OS_MSG_SIZE            msg_size,
N                                         CPU_TS                 ts);
N
N/* ----------------------------------------------- PRIORITY MANAGEMENT ---------------------------------------------- */
N
Nvoid          OS_PrioInit               (void);
N
Nvoid          OS_PrioInsert             (OS_PRIO                prio);
N
Nvoid          OS_PrioRemove             (OS_PRIO                prio);
N
NOS_PRIO       OS_PrioGetHighest         (void);
N
N/* --------------------------------------------------- SCHEDULING --------------------------------------------------- */
N
N#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
X#if 1u > 0u
Nvoid          OS_Sched0                 (void);
N#endif
N
N#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
X#if 1u > 0u
Nvoid          OS_SchedLockTimeMeasStart (void);
Nvoid          OS_SchedLockTimeMeasStop  (void);
N#endif
N
N#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
X#if 1u > 0u
Nvoid          OS_SchedRoundRobin        (OS_RDY_LIST           *p_rdy_list);
N#endif
N
N/* --------------------------------------------- READY LIST MANAGEMENT ---------------------------------------------- */
N
Nvoid          OS_RdyListInit            (void);
N
Nvoid          OS_RdyListInsert          (OS_TCB                *p_tcb);
N
Nvoid          OS_RdyListInsertHead      (OS_TCB                *p_tcb);
N
Nvoid          OS_RdyListInsertTail      (OS_TCB                *p_tcb);
N
Nvoid          OS_RdyListMoveHeadToTail  (OS_RDY_LIST           *p_rdy_list);
N
Nvoid          OS_RdyListRemove          (OS_TCB                *p_tcb);
N
N/* ---------------------------------------------- PEND LIST MANAGEMENT ---------------------------------------------- */
N
Nvoid          OS_PendDataInit           (OS_TCB                *p_tcb,
N                                         OS_PEND_DATA          *p_pend_data_tbl,
N                                         OS_OBJ_QTY             tbl_size);
N
N#if OS_CFG_DBG_EN > 0u
X#if 1u > 0u
Nvoid          OS_PendDbgNameAdd         (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb);
N
Nvoid          OS_PendDbgNameRemove      (OS_PEND_OBJ           *p_obj,
N                                         OS_TCB                *p_tcb);
N#endif
N
NOS_PEND_LIST *OS_PendListGetPtr         (OS_PEND_OBJ           *p_obj);
N
Nvoid          OS_PendListInit           (OS_PEND_LIST          *p_pend_list);
N
Nvoid          OS_PendListInsertHead     (OS_PEND_LIST          *p_pend_list,
N                                         OS_PEND_DATA          *p_pend_data);
N
Nvoid          OS_PendListInsertPrio     (OS_PEND_LIST          *p_pend_list,
N                                         OS_PEND_DATA          *p_pend_data);
N
Nvoid          OS_PendListChangePrio     (OS_TCB                *p_tcb,
N                                         OS_PRIO                prio_new);
N
Nvoid          OS_PendListRemove         (OS_TCB                *p_tcb);
N
Nvoid          OS_PendListRemove1        (OS_PEND_LIST          *p_pend_list,
N                                         OS_PEND_DATA          *p_pend_data);
N
N/* ---------------------------------------------- TICK LIST MANAGEMENT ---------------------------------------------- */
N
Nvoid          OS_TickListInit           (void);
N
Nvoid          OS_TickListInsert         (OS_TCB                *p_tcb,
N                                         OS_TICK                time,
N                                         OS_OPT                 opt,
N                                         OS_ERR                *p_err);
N
Nvoid          OS_TickListRemove         (OS_TCB                *p_tcb);
N
Nvoid          OS_TickListResetPeak      (void);
N
Nvoid          OS_TickListUpdate         (void);
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                          LOOK FOR MISSING #define CONSTANTS
N*
N* This section is used to generate ERROR messages at compile time if certain #define constants are
N* MISSING in OS_CFG.H.  This allows you to quickly determine the source of the error.
N*
N* You SHOULD NOT change this section UNLESS you would like to add more comments as to the source of the
N* compile time error.
N************************************************************************************************************************
N*/
N
N/*
N************************************************************************************************************************
N*                                                     MISCELLANEOUS
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_APP_HOOKS_EN
S#error  "OS_CFG.H, Missing OS_CFG_APP_HOOKS_EN: Enable (1) or Disable (0) application specific hook functions"
N#endif
N
N
N#ifndef OS_CFG_ARG_CHK_EN
S#error  "OS_CFG.H, Missing OS_CFG_ARG_CHK_EN: Enable (1) or Disable (0) argument checking"
N#endif
N
N
N#ifndef OS_CFG_DBG_EN
S#error  "OS_CFG.H, Missing OS_CFG_DBG_EN: Allows you to include variables for debugging or not"
N#endif
N
N
N#ifndef OS_CFG_CALLED_FROM_ISR_CHK_EN
S#error  "OS_CFG.H, Missing OS_CFG_CALLED_FROM_ISR_CHK_EN: Enable (1) or Disable (0) checking whether in an ISR in kernel services"
N#endif
N
N
N#ifndef OS_CFG_OBJ_TYPE_CHK_EN
S#error  "OS_CFG.H, Missing OS_CFG_OBJ_TYPE_CHK_EN: Enable (1) or Disable (0) checking for proper object types in kernel services"
N#endif
N
N
N#ifndef OS_CFG_PEND_MULTI_EN
S#error  "OS_CFG.H, Missing OS_CFG_PEND_MULTI_EN: Enable (1) or Disable (0) multi-pend feature"
N#endif
N
N
N#if     OS_CFG_PRIO_MAX < 8u
X#if     64u < 8u
S#error  "OS_CFG.H,         OS_CFG_PRIO_MAX must be >= 8"
N#endif
N
N
N#ifndef OS_CFG_SCHED_LOCK_TIME_MEAS_EN
S#error  "OS_CFG.H, Missing OS_CFG_SCHED_LOCK_TIME_MEAS_EN: Include code to measure scheduler lock time"
N#else
N    #if    (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u) && \
N           (OS_CFG_TS_EN                   < 1u)
X    #if    (1u > 0u) &&            (1u                   < 1u)
S    #error  "OS_CFG.H,         OS_CFG_TS_EN must be Enabled (1) to measure scheduler lock time"
N    #endif
N#endif
N
N
N#ifndef OS_CFG_SCHED_ROUND_ROBIN_EN
S#error  "OS_CFG.H, Missing OS_CFG_SCHED_ROUND_ROBIN_EN: Include code for Round Robin Scheduling"
N#endif
N
N
N#ifndef OS_CFG_STK_SIZE_MIN
S#error  "OS_CFG.H, Missing OS_CFG_STK_SIZE_MIN: Determines the minimum size for a task stack"
N#endif
N
N#ifndef OS_CFG_TS_EN
S#error  "OS_CFG.H, Missing OS_CFG_TS_EN: Determines whether time stamping is enabled"
N#else
N    #if    (OS_CFG_TS_EN  >  0u) && \
N           (CPU_CFG_TS_EN == DEF_DISABLED)
X    #if    (1u  >  0u) &&            (1u == 0u)
S    #error  "CPU_CFG.H,        CPU_CFG_TS_32_EN must be Enabled (1) to use time stamp feature"
N    #endif
N#endif
N
N/*
N************************************************************************************************************************
N*                                                     EVENT FLAGS
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_FLAG_EN
S#error  "OS_CFG.H, Missing OS_CFG_FLAG_EN: Enable (1) or Disable (0) code generation for Event Flags"
N#else
N    #ifndef OS_CFG_FLAG_DEL_EN
S    #error  "OS_CFG.H, Missing OS_CFG_FLAG_DEL_EN: Include code for OSFlagDel()"
N    #endif
N
N    #ifndef OS_CFG_FLAG_MODE_CLR_EN
S    #error  "OS_CFG.H, Missing OS_CFG_FLAG_MODE_CLR_EN: Include code for Wait on Clear EVENT FLAGS"
N    #endif
N
N    #ifndef OS_CFG_FLAG_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_CFG_FLAG_PEND_ABORT_EN: Include code for aborting pends from another task"
N    #endif
N#endif
N
N/*
N************************************************************************************************************************
N*                                                  MEMORY MANAGEMENT
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_MEM_EN
S#error  "OS_CFG.H, Missing OS_CFG_MEM_EN: Enable (1) or Disable (0) code generation for MEMORY MANAGER"
N#endif
N
N/*
N************************************************************************************************************************
N*                                              MUTUAL EXCLUSION SEMAPHORES
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_MUTEX_EN
S#error  "OS_CFG.H, Missing OS_CFG_MUTEX_EN: Enable (1) or Disable (0) code generation for MUTEX"
N#else
N    #ifndef OS_CFG_MUTEX_DEL_EN
S    #error  "OS_CFG.H, Missing OS_CFG_MUTEX_DEL_EN: Include code for OSMutexDel()"
N    #endif
N
N    #ifndef OS_CFG_MUTEX_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_CFG_MUTEX_PEND_ABORT_EN: Include code for OSMutexPendAbort()"
N    #endif
N#endif
N
N/*
N************************************************************************************************************************
N*                                                    MESSAGE QUEUES
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_Q_EN
S#error  "OS_CFG.H, Missing OS_CFG_Q_EN: Enable (1) or Disable (0) code generation for QUEUES"
N#else
N    #ifndef OS_CFG_Q_DEL_EN
S    #error  "OS_CFG.H, Missing OS_CFG_Q_DEL_EN: Include code for OSQDel()"
N    #endif
N
N    #ifndef OS_CFG_Q_FLUSH_EN
S    #error  "OS_CFG.H, Missing OS_CFG_Q_FLUSH_EN: Include code for OSQFlush()"
N    #endif
N
N    #ifndef OS_CFG_Q_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_CFG_Q_PEND_ABORT_EN: Include code for OSQPendAbort()"
N    #endif
N#endif
N
N/*
N************************************************************************************************************************
N*                                                      SEMAPHORES
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_SEM_EN
S#error  "OS_CFG.H, Missing OS_CFG_SEM_EN: Enable (1) or Disable (0) code generation for SEMAPHORES"
N#else
N    #ifndef OS_CFG_SEM_DEL_EN
S    #error  "OS_CFG.H, Missing OS_CFG_SEM_DEL_EN: Include code for OSSemDel()"
N    #endif
N
N    #ifndef OS_CFG_SEM_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_CFG_SEM_PEND_ABORT_EN: Include code for OSSemPendAbort()"
N    #endif
N
N    #ifndef OS_CFG_SEM_SET_EN
S    #error  "OS_CFG.H, Missing OS_CFG_SEM_SET_EN: Include code for OSSemSet()"
N    #endif
N#endif
N
N/*
N************************************************************************************************************************
N*                                                   TASK MANAGEMENT
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_STAT_TASK_EN
S#error  "OS_CFG.H, Missing OS_CFG_STAT_TASK_EN: Enable (1) or Disable(0) the statistics task"
N#endif
N
N#ifndef OS_CFG_STAT_TASK_STK_CHK_EN
S#error  "OS_CFG.H, Missing OS_CFG_STAT_TASK_STK_CHK_EN: Check task stacks from statistics task"
N#endif
N
N#ifndef OS_CFG_TASK_CHANGE_PRIO_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_CHANGE_PRIO_EN: Include code for OSTaskChangePrio()"
N#endif
N
N#ifndef OS_CFG_TASK_DEL_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_DEL_EN: Include code for OSTaskDel()"
N#endif
N
N#ifndef OS_CFG_TASK_Q_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_Q_EN: Include code for OSTaskQxxx()"
N#endif
N
N#ifndef OS_CFG_TASK_Q_PEND_ABORT_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_Q_PEND_ABORT_EN: Include code for OSTaskQPendAbort()"
N#endif
N
N#ifndef OS_CFG_TASK_PROFILE_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_PROFILE_EN: Include code for task profiling"
N#endif
N
N#ifndef OS_CFG_TASK_REG_TBL_SIZE
S#error  "OS_CFG.H, Missing OS_CFG_TASK_REG_TBL_SIZE: Include support for task specific registers"
N#endif
N
N#ifndef OS_CFG_TASK_SEM_PEND_ABORT_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_SEM_PEND_ABORT_EN: Include code for OSTaskSemPendAbort()"
N#endif
N
N#ifndef OS_CFG_TASK_SUSPEND_EN
S#error  "OS_CFG.H, Missing OS_CFG_TASK_SUSPEND_EN: Include code for OSTaskSuspend() and OSTaskResume()"
N#endif
N
N/*
N************************************************************************************************************************
N*                                                  TIME MANAGEMENT
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_TIME_DLY_HMSM_EN
S#error  "OS_CFG.H, Missing OS_CFG_TIME_DLY_HMSM_EN: Include code for OSTimeDlyHMSM()"
N#endif
N
N#ifndef OS_CFG_TIME_DLY_RESUME_EN
S#error  "OS_CFG.H, Missing OS_CFG_TIME_DLY_RESUME_EN: Include code for OSTimeDlyResume()"
N#endif
N
N/*
N************************************************************************************************************************
N*                                                  TIMER MANAGEMENT
N************************************************************************************************************************
N*/
N
N#ifndef OS_CFG_TMR_EN
S#error  "OS_CFG.H, Missing OS_CFG_TMR_EN: When (1) enables code generation for Timer Management"
N#else
N    #ifndef OS_CFG_TMR_DEL_EN
S    #error  "OS_CFG.H, Missing OS_CFG_TMR_DEL_EN: Enables (1) or Disables (0) code for OSTmrDel()"
N    #endif
N#endif
N
N/*
N************************************************************************************************************************
N*                                             LIBRARY CONFIGURATION ERRORS
N************************************************************************************************************************
N*/
N
N                                                                /* See 'os.h  Note #1a'.                              */
N#if LIB_VERSION < 126u
X#if 13500u < 126u
S#error  "lib_def.h, LIB_VERSION SHOULD be >= V1.26"
N#endif
N
N
N                                                                /* See 'os.h  Note #1b'.                              */
N#if CPU_CORE_VERSION < 125u
X#if 12801u < 125u
S#error  "cpu_core.h, CPU_CORE_VERSION SHOULD be >= V1.25"
N#endif
N
N
N/*
N************************************************************************************************************************
N*                                                 uC/OS-III MODULE END
N************************************************************************************************************************
N*/
N
N#ifdef __cplusplus
S}
N#endif
N#endif
L 5 "..\app\app\app.h" 2
N#include "os_type.h"
N
N/*******************设置任务优先级*******************/
N#define STARTUP_TASK_PRIO       3
N#define	TASK_SEM_PRIO			      4	   
N#define	TASK_PRODUCT_PRIO			  OS_CFG_PRIO_MAX-5u 
N#define	TASK_CUSTOMER_PRIO			  OS_CFG_PRIO_MAX-6u 
N
N/************设置栈大小（单位为 OS_STK ）************/
N#define STARTUP_TASK_STK_SIZE   200 
N#define	TASK_SEM_STK_SIZE		    500  
N#define	TASK_PRODUCT_STK_SIZE		    200
N#define	TASK_CUSTOMER_STK_SIZE		    200
N
N/**************** 用户任务声明 *******************/
Nvoid Task_Start(void *p_arg);
Nvoid Task_Sem(void *p_arg);
Nvoid Task_PRODUCT(void *p_arg);
Nvoid Task_CUSTOMER(void *p_arg);
N
N#endif	//_APP_H_
L 2 "..\app\app\app.c" 2
N#include "os.h"
Nextern	OS_TCB	StartUp_TCB;					
N
Nstatic  OS_TCB	SEM_TCB;		   				
Nstatic	CPU_STK	Sem_Stk[TASK_SEM_STK_SIZE];	     	
Xstatic	CPU_STK	Sem_Stk[500];	     	
N
Nstatic  OS_TCB	Product_TCB;		   					
Nstatic	CPU_STK	PRO_Stk[TASK_PRODUCT_STK_SIZE];	   
Xstatic	CPU_STK	PRO_Stk[200];	   
N
Nstatic  OS_TCB	Customer_TCB;		   					
Nstatic	CPU_STK	Cus_Stk[TASK_CUSTOMER_STK_SIZE];	   
Xstatic	CPU_STK	Cus_Stk[200];	   
N
NOS_SEM SemOfPRODUCT;
N
N/* 
N * 函数名：Task_Start
N * 描述  : 启动任务，优先级为3，创建其他任务
N * 输入  ：无
N * 输出  : 无
N */
Nvoid Task_Start(void *p_arg)
N{
N	OS_ERR err;
N  (void)p_arg;	
N
N  CPU_Init();
N
W "..\app\app\app.c" 29 3 function "SysTick_init" declared implicitly
N  SysTick_init();
N
N  //创建信号量任务
N	OSTaskCreate((OS_TCB     *)&SEM_TCB,					            // 任务控制块指针          
N               (CPU_CHAR   *)"Sem",						              // 任务名称
N               (OS_TASK_PTR )Task_Sem,					            // 任务代码指针
N               (void       *)0,							                // 传递给任务的参数parg
N               (OS_PRIO     )TASK_SEM_PRIO,				        // 任务优先级
X               (OS_PRIO     )4,				        
N               (CPU_STK    *)&Sem_Stk[0],				          // 任务堆栈基地址
N               (CPU_STK_SIZE)TASK_SEM_STK_SIZE/10,		      // 堆栈剩余警戒线
X               (CPU_STK_SIZE)500/10,		      
N               (CPU_STK_SIZE)TASK_SEM_STK_SIZE,			      // 堆栈大小
X               (CPU_STK_SIZE)500,			      
N               (OS_MSG_QTY  )0,							                // 可接收的最大消息队列数
N               (OS_TICK     )0,							                // 时间片轮转时间
N               (void       *)0,							                // 任务控制块扩展信息
N               (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
X               (OS_OPT      )((OS_OPT)(0x0001u) | 
N                              OS_OPT_TASK_STK_CLR),	        // 任务选项
X                              (OS_OPT)(0x0002u)),	        
N               (OS_ERR     *)&err);						              // 返回值
N			
N
N	//创建生产者
N	OSTaskCreate((OS_TCB     *)&Product_TCB,					  
N               (CPU_CHAR   *)"PRODUCT",						
N               (OS_TASK_PTR )Task_PRODUCT,				
N               (void       *)0,							
N               (OS_PRIO     )TASK_PRODUCT_PRIO,				
X               (OS_PRIO     )64u-5u,				
N               (CPU_STK    *)&PRO_Stk[0],				
N               (CPU_STK_SIZE)TASK_PRODUCT_STK_SIZE/10,		
X               (CPU_STK_SIZE)200/10,		
N               (CPU_STK_SIZE)TASK_PRODUCT_STK_SIZE,			
X               (CPU_STK_SIZE)200,			
N               (OS_MSG_QTY  )0,						
N               (OS_TICK     )0,							
N               (void       *)0,							
N               (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
X               (OS_OPT      )((OS_OPT)(0x0001u) | 
N                              OS_OPT_TASK_STK_CLR),	 
X                              (OS_OPT)(0x0002u)),	 
N               (OS_ERR     *)&err);	
N							 
N	//创建消息者
N	OSTaskCreate((OS_TCB     *)&Customer_TCB,					  
N               (CPU_CHAR   *)"Customer",						
N               (OS_TASK_PTR )Task_CUSTOMER,				
N               (void       *)0,							
N               (OS_PRIO     )TASK_CUSTOMER_PRIO,				
X               (OS_PRIO     )64u-6u,				
N               (CPU_STK    *)&Cus_Stk[0],				
N               (CPU_STK_SIZE)TASK_CUSTOMER_STK_SIZE/10,		
X               (CPU_STK_SIZE)200/10,		
N               (CPU_STK_SIZE)TASK_CUSTOMER_STK_SIZE,			
X               (CPU_STK_SIZE)200,			
N               (OS_MSG_QTY  )0,						
N               (OS_TICK     )0,							
N               (void       *)0,							
N               (OS_OPT      )(OS_OPT_TASK_STK_CHK | 
X               (OS_OPT      )((OS_OPT)(0x0001u) | 
N                              OS_OPT_TASK_STK_CLR),	 
X                              (OS_OPT)(0x0002u)),	 
N               (OS_ERR     *)&err);	
N               
N  //任务删除自己	
N	OSTaskDel(&StartUp_TCB,&err);							 
N}
N
N
N/* 
N * 函数名：Task_Sem
N * 描述  : 用信号量模拟停车场车位管理任务，优先级为4，
N *         
N * 输入  ：p_arg    用户参数
N * 输出  : 无
N */
Nvoid Task_Sem(void *p_arg)
N{
N  OS_ERR err;
N  OS_SEM_CTR  Ctr;
N	 CPU_TS      ts;
N  (void)p_arg;  
N
N  //在使用信号量之前一定要先创建信号量。
N  //创建一个信号量，按键按下的时候post一个信号量给其他任务。
N  OSSemCreate ((OS_SEM      *)&SemOfPRODUCT,     //指向信号量变量的指针
N               (CPU_CHAR    *)"SemOfPRODUCT",    //信号量的名字
N               (OS_SEM_CTR   )0,             //信号量计数值Ctr代表的是停车场的车位数，3个
N               (OS_ERR      *)&err);         //错误类型
N  
N  
N  while (1)
N  {
N    OSTimeDlyHMSM(0, 0,0,500,OS_OPT_TIME_HMSM_STRICT,&err);	//延时阻塞500ms
X    OSTimeDlyHMSM(0, 0,0,500,((OS_OPT)0x00u),&err);	
N  }
W "..\app\app\app.c" 95 15 variable "Ctr" was declared but never referenced
W "..\app\app\app.c" 96 15 variable "ts" was declared but never referenced
N}
N//按键定时扫描的定时器
Nvoid cbTimerOfPRODUCT (OS_TMR *p_tmr, void *p_arg)
N{
N  OS_ERR      err;
N  OSSemPost ((OS_SEM  *)&SemOfPRODUCT,
N                    (OS_OPT   )OS_OPT_POST_ALL,
X                    (OS_OPT   )(OS_OPT)(0x0200u),
N                    (OS_ERR  *)&err);
N
N}
N/* 
N * 函数名：Task_PRODUCT
N * 描述  : 按键的初始化和创建定时器对按键进行扫描
N *			   优先级为OS_CFG_PRIO_MAX-5u
N * 输入  ：p_arg    用户参数
N * 输出  : 无
N */
Nvoid Task_PRODUCT(void *p_arg)
N{
N  OS_ERR err;  
N  OS_TMR TmrOfPRODUCT;
N
N  (void)p_arg;
N  //创建一个定时器，用来定时扫描按键状态,10m扫描一次按键
N  OSTmrCreate ((OS_TMR              *)&TmrOfPRODUCT,
N               (CPU_CHAR            *)"TmrOfPRODUCT",
N               (OS_TICK              )0,
N               (OS_TICK              )100,  //注意定时器定时的单位在例程中是10ms，所以这里用1就可以
N               (OS_OPT               )OS_OPT_TMR_PERIODIC,
X               (OS_OPT               )(OS_OPT)(2u),
N               (OS_TMR_CALLBACK_PTR  )cbTimerOfPRODUCT,
N               (void                *)0,
N               (OS_ERR              *)&err);
N               
N  //开启定时器
N  OSTmrStart (&TmrOfPRODUCT,&err);
N  
N  while (1)
N  {
N
N    OSTimeDly ((OS_TICK   )1000,
N               (OS_OPT    )OS_OPT_TIME_DLY,
X               (OS_OPT    )0x00u,
N               (OS_ERR   *)&err);
N  }
N}
N
N
N
N/* 
N * 函数名：Task_CUSTOMER
N * 描述  : 按键的初始化和创建定时器对按键进行扫描
N *			   优先级为OS_CFG_PRIO_MAX-5u
N * 输入  ：p_arg    用户参数
N * 输出  : 无
N */
Nvoid Task_CUSTOMER(void *p_arg)
N{
N  OS_ERR err;
N  OS_SEM_CTR  Ctr;
N	 CPU_TS      ts;
N  while (1)
N  {
N
N    //获取信号量
N    Ctr= OSSemPend((OS_SEM   *)&SemOfPRODUCT,
N                   (OS_TICK   )0,                         //如果这个参数设置为0就一直等待下去
N                   (OS_OPT    )OS_OPT_PEND_BLOCKING,  //如果没有信号量也不阻塞
X                   (OS_OPT    )(OS_OPT)(0x0000u),  
N                   (CPU_TS   *)&ts,                       //这个参数是指向存放信号量被提交、强制解除等待状态、或者信号量被删除的时间戳        
N                   (OS_ERR   *)&err);   //LED1( ON );
N		
N	  OSTimeDly ((OS_TICK   )10,
N               (OS_OPT    )OS_OPT_TIME_DLY,
X               (OS_OPT    )0x00u,
N               (OS_ERR   *)&err);
N  }
W "..\app\app\app.c" 168 15 variable "Ctr" was set but never used
N}
N
N/* -------------------------------------end of file------------------------------------ */
